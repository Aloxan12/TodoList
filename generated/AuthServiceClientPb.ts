/**
 * @fileoverview gRPC-Web generated client stub for auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.4
// source: auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as data_types_pb from './data_types_pb'; // proto import: "data_types.proto"
import * as data_types_requests_pb from './data_types_requests_pb'; // proto import: "data_types_requests.proto"
import * as auth_requests_pb from './auth_requests_pb'; // proto import: "auth_requests.proto"


export class AuthGrpcClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAuth = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/Auth',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthRequest,
    auth_requests_pb.AuthResult,
    (request: auth_requests_pb.AuthRequest) => {
      return request.serializeBinary();
    },
    auth_requests_pb.AuthResult.deserializeBinary
  );

  auth(
    request: auth_requests_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_requests_pb.AuthResult>;

  auth(
    request: auth_requests_pb.AuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_requests_pb.AuthResult) => void): grpcWeb.ClientReadableStream<auth_requests_pb.AuthResult>;

  auth(
    request: auth_requests_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_requests_pb.AuthResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/Auth',
        request,
        metadata || {},
        this.methodDescriptorAuth,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/Auth',
    request,
    metadata || {},
    this.methodDescriptorAuth);
  }

  methodDescriptorAuthCheck = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AuthCheck',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    auth_requests_pb.AuthCheckResult,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    auth_requests_pb.AuthCheckResult.deserializeBinary
  );

  authCheck(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_requests_pb.AuthCheckResult>;

  authCheck(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_requests_pb.AuthCheckResult) => void): grpcWeb.ClientReadableStream<auth_requests_pb.AuthCheckResult>;

  authCheck(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_requests_pb.AuthCheckResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AuthCheck',
        request,
        metadata || {},
        this.methodDescriptorAuthCheck,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AuthCheck',
    request,
    metadata || {},
    this.methodDescriptorAuthCheck);
  }

  methodDescriptorPrepareInitialData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/PrepareInitialData',
    grpcWeb.MethodType.SERVER_STREAMING,
    auth_requests_pb.AuthorizedRequest,
    auth_requests_pb.PrepareInitialDataResult,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    auth_requests_pb.PrepareInitialDataResult.deserializeBinary
  );

  prepareInitialData(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<auth_requests_pb.PrepareInitialDataResult> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthGrpc/PrepareInitialData',
      request,
      metadata || {},
      this.methodDescriptorPrepareInitialData);
  }

  methodDescriptorGetSessionInfo = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetSessionInfo',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    auth_requests_pb.SessionInfo,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    auth_requests_pb.SessionInfo.deserializeBinary
  );

  getSessionInfo(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_requests_pb.SessionInfo>;

  getSessionInfo(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_requests_pb.SessionInfo) => void): grpcWeb.ClientReadableStream<auth_requests_pb.SessionInfo>;

  getSessionInfo(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_requests_pb.SessionInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetSessionInfo',
        request,
        metadata || {},
        this.methodDescriptorGetSessionInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetSessionInfo',
    request,
    metadata || {},
    this.methodDescriptorGetSessionInfo);
  }

  methodDescriptorGetInitialKindData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialKindData',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.KindList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.KindList.deserializeBinary
  );

  getInitialKindData(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.KindList>;

  getInitialKindData(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.KindList) => void): grpcWeb.ClientReadableStream<data_types_pb.KindList>;

  getInitialKindData(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.KindList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialKindData',
        request,
        metadata || {},
        this.methodDescriptorGetInitialKindData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialKindData',
    request,
    metadata || {},
    this.methodDescriptorGetInitialKindData);
  }

  methodDescriptorGetInitialVenueTypeDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialVenueTypeDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.VenueTypeList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.VenueTypeList.deserializeBinary
  );

  getInitialVenueTypeDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.VenueTypeList>;

  getInitialVenueTypeDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.VenueTypeList) => void): grpcWeb.ClientReadableStream<data_types_pb.VenueTypeList>;

  getInitialVenueTypeDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.VenueTypeList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialVenueTypeDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialVenueTypeDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialVenueTypeDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialVenueTypeDataList);
  }

  methodDescriptorGetInitialBarcodeFormatDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialBarcodeFormatDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.BarcodeFormatList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.BarcodeFormatList.deserializeBinary
  );

  getInitialBarcodeFormatDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.BarcodeFormatList>;

  getInitialBarcodeFormatDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.BarcodeFormatList) => void): grpcWeb.ClientReadableStream<data_types_pb.BarcodeFormatList>;

  getInitialBarcodeFormatDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.BarcodeFormatList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialBarcodeFormatDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialBarcodeFormatDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialBarcodeFormatDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialBarcodeFormatDataList);
  }

  methodDescriptorGetInitialQuotaFormatDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialQuotaFormatDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.QuotaFormatList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.QuotaFormatList.deserializeBinary
  );

  getInitialQuotaFormatDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.QuotaFormatList>;

  getInitialQuotaFormatDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.QuotaFormatList) => void): grpcWeb.ClientReadableStream<data_types_pb.QuotaFormatList>;

  getInitialQuotaFormatDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.QuotaFormatList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialQuotaFormatDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialQuotaFormatDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialQuotaFormatDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialQuotaFormatDataList);
  }

  methodDescriptorGetInitialBookletTypeDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialBookletTypeDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.BookletTypeList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.BookletTypeList.deserializeBinary
  );

  getInitialBookletTypeDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.BookletTypeList>;

  getInitialBookletTypeDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.BookletTypeList) => void): grpcWeb.ClientReadableStream<data_types_pb.BookletTypeList>;

  getInitialBookletTypeDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.BookletTypeList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialBookletTypeDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialBookletTypeDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialBookletTypeDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialBookletTypeDataList);
  }

  methodDescriptorGetInitialGenreDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialGenreDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.GenreList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.GenreList.deserializeBinary
  );

  getInitialGenreDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.GenreList>;

  getInitialGenreDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.GenreList) => void): grpcWeb.ClientReadableStream<data_types_pb.GenreList>;

  getInitialGenreDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.GenreList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialGenreDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialGenreDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialGenreDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialGenreDataList);
  }

  methodDescriptorGetZoneIdDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetZoneIdDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.ZoneIdList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.ZoneIdList.deserializeBinary
  );

  getZoneIdDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.ZoneIdList>;

  getZoneIdDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.ZoneIdList) => void): grpcWeb.ClientReadableStream<data_types_pb.ZoneIdList>;

  getZoneIdDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.ZoneIdList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetZoneIdDataList',
        request,
        metadata || {},
        this.methodDescriptorGetZoneIdDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetZoneIdDataList',
    request,
    metadata || {},
    this.methodDescriptorGetZoneIdDataList);
  }

  methodDescriptorGetInitialCurrencyDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialCurrencyDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.CurrencyList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.CurrencyList.deserializeBinary
  );

  getInitialCurrencyDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.CurrencyList>;

  getInitialCurrencyDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.CurrencyList) => void): grpcWeb.ClientReadableStream<data_types_pb.CurrencyList>;

  getInitialCurrencyDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.CurrencyList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialCurrencyDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialCurrencyDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialCurrencyDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialCurrencyDataList);
  }

  methodDescriptorGetInitialEOrganizerDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialEOrganizerDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.EOrganizerList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.EOrganizerList.deserializeBinary
  );

  getInitialEOrganizerDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.EOrganizerList>;

  getInitialEOrganizerDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.EOrganizerList) => void): grpcWeb.ClientReadableStream<data_types_pb.EOrganizerList>;

  getInitialEOrganizerDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.EOrganizerList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialEOrganizerDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialEOrganizerDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialEOrganizerDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialEOrganizerDataList);
  }

  methodDescriptorGetInitialCountryData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialCountryData',
    grpcWeb.MethodType.SERVER_STREAMING,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.Country,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Country.deserializeBinary
  );

  getInitialCountryData(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<data_types_pb.Country> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthGrpc/GetInitialCountryData',
      request,
      metadata || {},
      this.methodDescriptorGetInitialCountryData);
  }

  methodDescriptorDeleteCountry = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/DeleteCountry',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.DeleteCountryRequest,
    data_types_pb.Country,
    (request: data_types_requests_pb.DeleteCountryRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Country.deserializeBinary
  );

  deleteCountry(
    request: data_types_requests_pb.DeleteCountryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Country>;

  deleteCountry(
    request: data_types_requests_pb.DeleteCountryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Country) => void): grpcWeb.ClientReadableStream<data_types_pb.Country>;

  deleteCountry(
    request: data_types_requests_pb.DeleteCountryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Country) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/DeleteCountry',
        request,
        metadata || {},
        this.methodDescriptorDeleteCountry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/DeleteCountry',
    request,
    metadata || {},
    this.methodDescriptorDeleteCountry);
  }

  methodDescriptorGetInitialCityData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialCityData',
    grpcWeb.MethodType.SERVER_STREAMING,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.City,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.City.deserializeBinary
  );

  getInitialCityData(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<data_types_pb.City> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthGrpc/GetInitialCityData',
      request,
      metadata || {},
      this.methodDescriptorGetInitialCityData);
  }

  methodDescriptorGetInitialCityByCountryData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialCityByCountryData',
    grpcWeb.MethodType.SERVER_STREAMING,
    data_types_requests_pb.GetCityByCountryRequest,
    data_types_pb.City,
    (request: data_types_requests_pb.GetCityByCountryRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.City.deserializeBinary
  );

  getInitialCityByCountryData(
    request: data_types_requests_pb.GetCityByCountryRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<data_types_pb.City> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthGrpc/GetInitialCityByCountryData',
      request,
      metadata || {},
      this.methodDescriptorGetInitialCityByCountryData);
  }

  methodDescriptorGetInitialCityListByCountryData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialCityListByCountryData',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetCityByCountryRequest,
    data_types_pb.CityList,
    (request: data_types_requests_pb.GetCityByCountryRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.CityList.deserializeBinary
  );

  getInitialCityListByCountryData(
    request: data_types_requests_pb.GetCityByCountryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.CityList>;

  getInitialCityListByCountryData(
    request: data_types_requests_pb.GetCityByCountryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.CityList) => void): grpcWeb.ClientReadableStream<data_types_pb.CityList>;

  getInitialCityListByCountryData(
    request: data_types_requests_pb.GetCityByCountryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.CityList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialCityListByCountryData',
        request,
        metadata || {},
        this.methodDescriptorGetInitialCityListByCountryData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialCityListByCountryData',
    request,
    metadata || {},
    this.methodDescriptorGetInitialCityListByCountryData);
  }

  methodDescriptorDeleteCity = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/DeleteCity',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.DeleteCityRequest,
    data_types_pb.City,
    (request: data_types_requests_pb.DeleteCityRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.City.deserializeBinary
  );

  deleteCity(
    request: data_types_requests_pb.DeleteCityRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.City>;

  deleteCity(
    request: data_types_requests_pb.DeleteCityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.City) => void): grpcWeb.ClientReadableStream<data_types_pb.City>;

  deleteCity(
    request: data_types_requests_pb.DeleteCityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.City) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/DeleteCity',
        request,
        metadata || {},
        this.methodDescriptorDeleteCity,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/DeleteCity',
    request,
    metadata || {},
    this.methodDescriptorDeleteCity);
  }

  methodDescriptorGetInitialVenueByCityData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialVenueByCityData',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetVenueByCityRequest,
    data_types_pb.SimpleVenueList,
    (request: data_types_requests_pb.GetVenueByCityRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.SimpleVenueList.deserializeBinary
  );

  getInitialVenueByCityData(
    request: data_types_requests_pb.GetVenueByCityRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SimpleVenueList>;

  getInitialVenueByCityData(
    request: data_types_requests_pb.GetVenueByCityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SimpleVenueList) => void): grpcWeb.ClientReadableStream<data_types_pb.SimpleVenueList>;

  getInitialVenueByCityData(
    request: data_types_requests_pb.GetVenueByCityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SimpleVenueList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialVenueByCityData',
        request,
        metadata || {},
        this.methodDescriptorGetInitialVenueByCityData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialVenueByCityData',
    request,
    metadata || {},
    this.methodDescriptorGetInitialVenueByCityData);
  }

  methodDescriptorGetInitialVenueDataFiltered = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialVenueDataFiltered',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetVenueFilteredRequest,
    data_types_pb.SimpleVenueList,
    (request: data_types_requests_pb.GetVenueFilteredRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.SimpleVenueList.deserializeBinary
  );

  getInitialVenueDataFiltered(
    request: data_types_requests_pb.GetVenueFilteredRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SimpleVenueList>;

  getInitialVenueDataFiltered(
    request: data_types_requests_pb.GetVenueFilteredRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SimpleVenueList) => void): grpcWeb.ClientReadableStream<data_types_pb.SimpleVenueList>;

  getInitialVenueDataFiltered(
    request: data_types_requests_pb.GetVenueFilteredRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SimpleVenueList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialVenueDataFiltered',
        request,
        metadata || {},
        this.methodDescriptorGetInitialVenueDataFiltered,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialVenueDataFiltered',
    request,
    metadata || {},
    this.methodDescriptorGetInitialVenueDataFiltered);
  }

  methodDescriptorGetInitialVenueByIdData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialVenueByIdData',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetVenueByIdRequest,
    data_types_pb.Venue,
    (request: data_types_requests_pb.GetVenueByIdRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Venue.deserializeBinary
  );

  getInitialVenueByIdData(
    request: data_types_requests_pb.GetVenueByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Venue>;

  getInitialVenueByIdData(
    request: data_types_requests_pb.GetVenueByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Venue) => void): grpcWeb.ClientReadableStream<data_types_pb.Venue>;

  getInitialVenueByIdData(
    request: data_types_requests_pb.GetVenueByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Venue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialVenueByIdData',
        request,
        metadata || {},
        this.methodDescriptorGetInitialVenueByIdData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialVenueByIdData',
    request,
    metadata || {},
    this.methodDescriptorGetInitialVenueByIdData);
  }

  methodDescriptorAddVenue = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AddVenue',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.AddVenueRequest,
    data_types_requests_pb.AddVenueResponse,
    (request: data_types_requests_pb.AddVenueRequest) => {
      return request.serializeBinary();
    },
    data_types_requests_pb.AddVenueResponse.deserializeBinary
  );

  addVenue(
    request: data_types_requests_pb.AddVenueRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_requests_pb.AddVenueResponse>;

  addVenue(
    request: data_types_requests_pb.AddVenueRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.AddVenueResponse) => void): grpcWeb.ClientReadableStream<data_types_requests_pb.AddVenueResponse>;

  addVenue(
    request: data_types_requests_pb.AddVenueRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.AddVenueResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AddVenue',
        request,
        metadata || {},
        this.methodDescriptorAddVenue,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AddVenue',
    request,
    metadata || {},
    this.methodDescriptorAddVenue);
  }

  methodDescriptorSaveVenue = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/SaveVenue',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.SaveVenueRequest,
    data_types_requests_pb.SaveVenueResponse,
    (request: data_types_requests_pb.SaveVenueRequest) => {
      return request.serializeBinary();
    },
    data_types_requests_pb.SaveVenueResponse.deserializeBinary
  );

  saveVenue(
    request: data_types_requests_pb.SaveVenueRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_requests_pb.SaveVenueResponse>;

  saveVenue(
    request: data_types_requests_pb.SaveVenueRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.SaveVenueResponse) => void): grpcWeb.ClientReadableStream<data_types_requests_pb.SaveVenueResponse>;

  saveVenue(
    request: data_types_requests_pb.SaveVenueRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.SaveVenueResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/SaveVenue',
        request,
        metadata || {},
        this.methodDescriptorSaveVenue,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/SaveVenue',
    request,
    metadata || {},
    this.methodDescriptorSaveVenue);
  }

  methodDescriptorDeleteVenue = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/DeleteVenue',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.DeleteVenueRequest,
    data_types_pb.Venue,
    (request: data_types_requests_pb.DeleteVenueRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Venue.deserializeBinary
  );

  deleteVenue(
    request: data_types_requests_pb.DeleteVenueRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Venue>;

  deleteVenue(
    request: data_types_requests_pb.DeleteVenueRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Venue) => void): grpcWeb.ClientReadableStream<data_types_pb.Venue>;

  deleteVenue(
    request: data_types_requests_pb.DeleteVenueRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Venue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/DeleteVenue',
        request,
        metadata || {},
        this.methodDescriptorDeleteVenue,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/DeleteVenue',
    request,
    metadata || {},
    this.methodDescriptorDeleteVenue);
  }

  methodDescriptorGetInitialSeatingPlanDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialSeatingPlanDataList',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetSeatingPlanListRequest,
    data_types_pb.SimpleSeatingPlanList,
    (request: data_types_requests_pb.GetSeatingPlanListRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.SimpleSeatingPlanList.deserializeBinary
  );

  getInitialSeatingPlanDataList(
    request: data_types_requests_pb.GetSeatingPlanListRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SimpleSeatingPlanList>;

  getInitialSeatingPlanDataList(
    request: data_types_requests_pb.GetSeatingPlanListRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SimpleSeatingPlanList) => void): grpcWeb.ClientReadableStream<data_types_pb.SimpleSeatingPlanList>;

  getInitialSeatingPlanDataList(
    request: data_types_requests_pb.GetSeatingPlanListRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SimpleSeatingPlanList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialSeatingPlanDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialSeatingPlanDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialSeatingPlanDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialSeatingPlanDataList);
  }

  methodDescriptorGetInitialSeatingPlanByIdData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialSeatingPlanByIdData',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetSeatingPlanByIdRequest,
    data_types_pb.SeatingPlan,
    (request: data_types_requests_pb.GetSeatingPlanByIdRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.SeatingPlan.deserializeBinary
  );

  getInitialSeatingPlanByIdData(
    request: data_types_requests_pb.GetSeatingPlanByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SeatingPlan>;

  getInitialSeatingPlanByIdData(
    request: data_types_requests_pb.GetSeatingPlanByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void): grpcWeb.ClientReadableStream<data_types_pb.SeatingPlan>;

  getInitialSeatingPlanByIdData(
    request: data_types_requests_pb.GetSeatingPlanByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialSeatingPlanByIdData',
        request,
        metadata || {},
        this.methodDescriptorGetInitialSeatingPlanByIdData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialSeatingPlanByIdData',
    request,
    metadata || {},
    this.methodDescriptorGetInitialSeatingPlanByIdData);
  }

  methodDescriptorGetSeatingPlanByIdFullData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetSeatingPlanByIdFullData',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetSeatingPlanByIdRequest,
    data_types_pb.GetSeatingPlanFullData,
    (request: data_types_requests_pb.GetSeatingPlanByIdRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.GetSeatingPlanFullData.deserializeBinary
  );

  getSeatingPlanByIdFullData(
    request: data_types_requests_pb.GetSeatingPlanByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.GetSeatingPlanFullData>;

  getSeatingPlanByIdFullData(
    request: data_types_requests_pb.GetSeatingPlanByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.GetSeatingPlanFullData) => void): grpcWeb.ClientReadableStream<data_types_pb.GetSeatingPlanFullData>;

  getSeatingPlanByIdFullData(
    request: data_types_requests_pb.GetSeatingPlanByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.GetSeatingPlanFullData) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetSeatingPlanByIdFullData',
        request,
        metadata || {},
        this.methodDescriptorGetSeatingPlanByIdFullData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetSeatingPlanByIdFullData',
    request,
    metadata || {},
    this.methodDescriptorGetSeatingPlanByIdFullData);
  }

  methodDescriptorDeleteSeatingPlan = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/DeleteSeatingPlan',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.DeleteSeatingPlanRequest,
    data_types_pb.SeatingPlan,
    (request: data_types_requests_pb.DeleteSeatingPlanRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.SeatingPlan.deserializeBinary
  );

  deleteSeatingPlan(
    request: data_types_requests_pb.DeleteSeatingPlanRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SeatingPlan>;

  deleteSeatingPlan(
    request: data_types_requests_pb.DeleteSeatingPlanRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void): grpcWeb.ClientReadableStream<data_types_pb.SeatingPlan>;

  deleteSeatingPlan(
    request: data_types_requests_pb.DeleteSeatingPlanRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/DeleteSeatingPlan',
        request,
        metadata || {},
        this.methodDescriptorDeleteSeatingPlan,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/DeleteSeatingPlan',
    request,
    metadata || {},
    this.methodDescriptorDeleteSeatingPlan);
  }

  methodDescriptorGetInitialSGatewayDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialSGatewayDataList',
    grpcWeb.MethodType.UNARY,
    auth_requests_pb.AuthorizedRequest,
    data_types_pb.GatewayList,
    (request: auth_requests_pb.AuthorizedRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.GatewayList.deserializeBinary
  );

  getInitialSGatewayDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.GatewayList>;

  getInitialSGatewayDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.GatewayList) => void): grpcWeb.ClientReadableStream<data_types_pb.GatewayList>;

  getInitialSGatewayDataList(
    request: auth_requests_pb.AuthorizedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.GatewayList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialSGatewayDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialSGatewayDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialSGatewayDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialSGatewayDataList);
  }

  methodDescriptorGetInitialActionDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialActionDataList',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetActionFilteredRequest,
    data_types_pb.SimpleActionList,
    (request: data_types_requests_pb.GetActionFilteredRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.SimpleActionList.deserializeBinary
  );

  getInitialActionDataList(
    request: data_types_requests_pb.GetActionFilteredRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SimpleActionList>;

  getInitialActionDataList(
    request: data_types_requests_pb.GetActionFilteredRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SimpleActionList) => void): grpcWeb.ClientReadableStream<data_types_pb.SimpleActionList>;

  getInitialActionDataList(
    request: data_types_requests_pb.GetActionFilteredRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SimpleActionList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialActionDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialActionDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialActionDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialActionDataList);
  }

  methodDescriptorGetInitialActionIdData = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialActionIdData',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetActionByIdRequest,
    data_types_pb.Action,
    (request: data_types_requests_pb.GetActionByIdRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Action.deserializeBinary
  );

  getInitialActionIdData(
    request: data_types_requests_pb.GetActionByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Action>;

  getInitialActionIdData(
    request: data_types_requests_pb.GetActionByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Action) => void): grpcWeb.ClientReadableStream<data_types_pb.Action>;

  getInitialActionIdData(
    request: data_types_requests_pb.GetActionByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Action) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialActionIdData',
        request,
        metadata || {},
        this.methodDescriptorGetInitialActionIdData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialActionIdData',
    request,
    metadata || {},
    this.methodDescriptorGetInitialActionIdData);
  }

  methodDescriptorDeleteAction = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/DeleteAction',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.DeleteActionRequest,
    data_types_pb.Action,
    (request: data_types_requests_pb.DeleteActionRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Action.deserializeBinary
  );

  deleteAction(
    request: data_types_requests_pb.DeleteActionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Action>;

  deleteAction(
    request: data_types_requests_pb.DeleteActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Action) => void): grpcWeb.ClientReadableStream<data_types_pb.Action>;

  deleteAction(
    request: data_types_requests_pb.DeleteActionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Action) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/DeleteAction',
        request,
        metadata || {},
        this.methodDescriptorDeleteAction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/DeleteAction',
    request,
    metadata || {},
    this.methodDescriptorDeleteAction);
  }

  methodDescriptorGetInitialActionEventDataList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetInitialActionEventDataList',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetActionEventFilteredRequest,
    data_types_pb.ActionEventList,
    (request: data_types_requests_pb.GetActionEventFilteredRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.ActionEventList.deserializeBinary
  );

  getInitialActionEventDataList(
    request: data_types_requests_pb.GetActionEventFilteredRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.ActionEventList>;

  getInitialActionEventDataList(
    request: data_types_requests_pb.GetActionEventFilteredRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.ActionEventList) => void): grpcWeb.ClientReadableStream<data_types_pb.ActionEventList>;

  getInitialActionEventDataList(
    request: data_types_requests_pb.GetActionEventFilteredRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.ActionEventList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetInitialActionEventDataList',
        request,
        metadata || {},
        this.methodDescriptorGetInitialActionEventDataList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetInitialActionEventDataList',
    request,
    metadata || {},
    this.methodDescriptorGetInitialActionEventDataList);
  }

  methodDescriptorAddActionEvent = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AddActionEvent',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.AddActionEventRequest,
    data_types_pb.ActionEventList,
    (request: data_types_requests_pb.AddActionEventRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.ActionEventList.deserializeBinary
  );

  addActionEvent(
    request: data_types_requests_pb.AddActionEventRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.ActionEventList>;

  addActionEvent(
    request: data_types_requests_pb.AddActionEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.ActionEventList) => void): grpcWeb.ClientReadableStream<data_types_pb.ActionEventList>;

  addActionEvent(
    request: data_types_requests_pb.AddActionEventRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.ActionEventList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AddActionEvent',
        request,
        metadata || {},
        this.methodDescriptorAddActionEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AddActionEvent',
    request,
    metadata || {},
    this.methodDescriptorAddActionEvent);
  }

  methodDescriptordeleteActionEvent = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/deleteActionEvent',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.DeleteActionEventRequest,
    data_types_pb.ActionEvent,
    (request: data_types_requests_pb.DeleteActionEventRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.ActionEvent.deserializeBinary
  );

  deleteActionEvent(
    request: data_types_requests_pb.DeleteActionEventRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.ActionEvent>;

  deleteActionEvent(
    request: data_types_requests_pb.DeleteActionEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.ActionEvent) => void): grpcWeb.ClientReadableStream<data_types_pb.ActionEvent>;

  deleteActionEvent(
    request: data_types_requests_pb.DeleteActionEventRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.ActionEvent) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/deleteActionEvent',
        request,
        metadata || {},
        this.methodDescriptordeleteActionEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/deleteActionEvent',
    request,
    metadata || {},
    this.methodDescriptordeleteActionEvent);
  }

  methodDescriptorAddAction = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AddAction',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.AddActionRequest,
    data_types_pb.Action,
    (request: data_types_requests_pb.AddActionRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Action.deserializeBinary
  );

  addAction(
    request: data_types_requests_pb.AddActionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Action>;

  addAction(
    request: data_types_requests_pb.AddActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Action) => void): grpcWeb.ClientReadableStream<data_types_pb.Action>;

  addAction(
    request: data_types_requests_pb.AddActionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Action) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AddAction',
        request,
        metadata || {},
        this.methodDescriptorAddAction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AddAction',
    request,
    metadata || {},
    this.methodDescriptorAddAction);
  }

  methodDescriptorSaveAction = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/SaveAction',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.SaveActionRequest,
    data_types_pb.Action,
    (request: data_types_requests_pb.SaveActionRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Action.deserializeBinary
  );

  saveAction(
    request: data_types_requests_pb.SaveActionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Action>;

  saveAction(
    request: data_types_requests_pb.SaveActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Action) => void): grpcWeb.ClientReadableStream<data_types_pb.Action>;

  saveAction(
    request: data_types_requests_pb.SaveActionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Action) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/SaveAction',
        request,
        metadata || {},
        this.methodDescriptorSaveAction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/SaveAction',
    request,
    metadata || {},
    this.methodDescriptorSaveAction);
  }

  methodDescriptorGetGatewayEventList = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetGatewayEventList',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetGatewayEventListRequest,
    data_types_pb.GatewayEventList,
    (request: data_types_requests_pb.GetGatewayEventListRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.GatewayEventList.deserializeBinary
  );

  getGatewayEventList(
    request: data_types_requests_pb.GetGatewayEventListRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.GatewayEventList>;

  getGatewayEventList(
    request: data_types_requests_pb.GetGatewayEventListRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.GatewayEventList) => void): grpcWeb.ClientReadableStream<data_types_pb.GatewayEventList>;

  getGatewayEventList(
    request: data_types_requests_pb.GetGatewayEventListRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.GatewayEventList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetGatewayEventList',
        request,
        metadata || {},
        this.methodDescriptorGetGatewayEventList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetGatewayEventList',
    request,
    metadata || {},
    this.methodDescriptorGetGatewayEventList);
  }

  methodDescriptorSaveActionEvent = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/SaveActionEvent',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.SaveActionEventRequest,
    data_types_pb.ActionEvent,
    (request: data_types_requests_pb.SaveActionEventRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.ActionEvent.deserializeBinary
  );

  saveActionEvent(
    request: data_types_requests_pb.SaveActionEventRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.ActionEvent>;

  saveActionEvent(
    request: data_types_requests_pb.SaveActionEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.ActionEvent) => void): grpcWeb.ClientReadableStream<data_types_pb.ActionEvent>;

  saveActionEvent(
    request: data_types_requests_pb.SaveActionEventRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.ActionEvent) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/SaveActionEvent',
        request,
        metadata || {},
        this.methodDescriptorSaveActionEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/SaveActionEvent',
    request,
    metadata || {},
    this.methodDescriptorSaveActionEvent);
  }

  methodDescriptorAddCountry = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AddCountry',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.AddCountryRequest,
    data_types_pb.Country,
    (request: data_types_requests_pb.AddCountryRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Country.deserializeBinary
  );

  addCountry(
    request: data_types_requests_pb.AddCountryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Country>;

  addCountry(
    request: data_types_requests_pb.AddCountryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Country) => void): grpcWeb.ClientReadableStream<data_types_pb.Country>;

  addCountry(
    request: data_types_requests_pb.AddCountryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Country) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AddCountry',
        request,
        metadata || {},
        this.methodDescriptorAddCountry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AddCountry',
    request,
    metadata || {},
    this.methodDescriptorAddCountry);
  }

  methodDescriptorSaveCountry = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/SaveCountry',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.SaveCountryRequest,
    data_types_pb.Country,
    (request: data_types_requests_pb.SaveCountryRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.Country.deserializeBinary
  );

  saveCountry(
    request: data_types_requests_pb.SaveCountryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.Country>;

  saveCountry(
    request: data_types_requests_pb.SaveCountryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.Country) => void): grpcWeb.ClientReadableStream<data_types_pb.Country>;

  saveCountry(
    request: data_types_requests_pb.SaveCountryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.Country) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/SaveCountry',
        request,
        metadata || {},
        this.methodDescriptorSaveCountry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/SaveCountry',
    request,
    metadata || {},
    this.methodDescriptorSaveCountry);
  }

  methodDescriptorAddCity = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AddCity',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.AddCityRequest,
    data_types_pb.City,
    (request: data_types_requests_pb.AddCityRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.City.deserializeBinary
  );

  addCity(
    request: data_types_requests_pb.AddCityRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.City>;

  addCity(
    request: data_types_requests_pb.AddCityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.City) => void): grpcWeb.ClientReadableStream<data_types_pb.City>;

  addCity(
    request: data_types_requests_pb.AddCityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.City) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AddCity',
        request,
        metadata || {},
        this.methodDescriptorAddCity,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AddCity',
    request,
    metadata || {},
    this.methodDescriptorAddCity);
  }

  methodDescriptorSaveCity = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/SaveCity',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.SaveCityRequest,
    data_types_pb.City,
    (request: data_types_requests_pb.SaveCityRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.City.deserializeBinary
  );

  saveCity(
    request: data_types_requests_pb.SaveCityRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.City>;

  saveCity(
    request: data_types_requests_pb.SaveCityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.City) => void): grpcWeb.ClientReadableStream<data_types_pb.City>;

  saveCity(
    request: data_types_requests_pb.SaveCityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.City) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/SaveCity',
        request,
        metadata || {},
        this.methodDescriptorSaveCity,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/SaveCity',
    request,
    metadata || {},
    this.methodDescriptorSaveCity);
  }

  methodDescriptorAddPlan1 = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AddPlan1',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.AddPlan1Request,
    data_types_pb.SeatingPlan,
    (request: data_types_requests_pb.AddPlan1Request) => {
      return request.serializeBinary();
    },
    data_types_pb.SeatingPlan.deserializeBinary
  );

  addPlan1(
    request: data_types_requests_pb.AddPlan1Request,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SeatingPlan>;

  addPlan1(
    request: data_types_requests_pb.AddPlan1Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void): grpcWeb.ClientReadableStream<data_types_pb.SeatingPlan>;

  addPlan1(
    request: data_types_requests_pb.AddPlan1Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AddPlan1',
        request,
        metadata || {},
        this.methodDescriptorAddPlan1,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AddPlan1',
    request,
    metadata || {},
    this.methodDescriptorAddPlan1);
  }

  methodDescriptorCheckPlan = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/CheckPlan',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.CheckPlanRequest,
    data_types_requests_pb.CheckPlanResponse,
    (request: data_types_requests_pb.CheckPlanRequest) => {
      return request.serializeBinary();
    },
    data_types_requests_pb.CheckPlanResponse.deserializeBinary
  );

  checkPlan(
    request: data_types_requests_pb.CheckPlanRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_requests_pb.CheckPlanResponse>;

  checkPlan(
    request: data_types_requests_pb.CheckPlanRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.CheckPlanResponse) => void): grpcWeb.ClientReadableStream<data_types_requests_pb.CheckPlanResponse>;

  checkPlan(
    request: data_types_requests_pb.CheckPlanRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.CheckPlanResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/CheckPlan',
        request,
        metadata || {},
        this.methodDescriptorCheckPlan,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/CheckPlan',
    request,
    metadata || {},
    this.methodDescriptorCheckPlan);
  }

  methodDescriptorAddPlan2 = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AddPlan2',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.AddPlan2Request,
    data_types_pb.SeatingPlan,
    (request: data_types_requests_pb.AddPlan2Request) => {
      return request.serializeBinary();
    },
    data_types_pb.SeatingPlan.deserializeBinary
  );

  addPlan2(
    request: data_types_requests_pb.AddPlan2Request,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SeatingPlan>;

  addPlan2(
    request: data_types_requests_pb.AddPlan2Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void): grpcWeb.ClientReadableStream<data_types_pb.SeatingPlan>;

  addPlan2(
    request: data_types_requests_pb.AddPlan2Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AddPlan2',
        request,
        metadata || {},
        this.methodDescriptorAddPlan2,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AddPlan2',
    request,
    metadata || {},
    this.methodDescriptorAddPlan2);
  }

  methodDescriptorAddPlan3 = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/AddPlan3',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.AddPlan3Request,
    data_types_pb.SeatingPlan,
    (request: data_types_requests_pb.AddPlan3Request) => {
      return request.serializeBinary();
    },
    data_types_pb.SeatingPlan.deserializeBinary
  );

  addPlan3(
    request: data_types_requests_pb.AddPlan3Request,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SeatingPlan>;

  addPlan3(
    request: data_types_requests_pb.AddPlan3Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void): grpcWeb.ClientReadableStream<data_types_pb.SeatingPlan>;

  addPlan3(
    request: data_types_requests_pb.AddPlan3Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/AddPlan3',
        request,
        metadata || {},
        this.methodDescriptorAddPlan3,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/AddPlan3',
    request,
    metadata || {},
    this.methodDescriptorAddPlan3);
  }

  methodDescriptorSavePlan = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/SavePlan',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.SavePlanRequest,
    data_types_pb.SeatingPlan,
    (request: data_types_requests_pb.SavePlanRequest) => {
      return request.serializeBinary();
    },
    data_types_pb.SeatingPlan.deserializeBinary
  );

  savePlan(
    request: data_types_requests_pb.SavePlanRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_pb.SeatingPlan>;

  savePlan(
    request: data_types_requests_pb.SavePlanRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void): grpcWeb.ClientReadableStream<data_types_pb.SeatingPlan>;

  savePlan(
    request: data_types_requests_pb.SavePlanRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_pb.SeatingPlan) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/SavePlan',
        request,
        metadata || {},
        this.methodDescriptorSavePlan,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/SavePlan',
    request,
    metadata || {},
    this.methodDescriptorSavePlan);
  }

  methodDescriptorSyncEts = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/SyncEts',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.ActionEventSyncRequest,
    data_types_requests_pb.ActionEventSyncResponse,
    (request: data_types_requests_pb.ActionEventSyncRequest) => {
      return request.serializeBinary();
    },
    data_types_requests_pb.ActionEventSyncResponse.deserializeBinary
  );

  syncEts(
    request: data_types_requests_pb.ActionEventSyncRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_requests_pb.ActionEventSyncResponse>;

  syncEts(
    request: data_types_requests_pb.ActionEventSyncRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.ActionEventSyncResponse) => void): grpcWeb.ClientReadableStream<data_types_requests_pb.ActionEventSyncResponse>;

  syncEts(
    request: data_types_requests_pb.ActionEventSyncRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.ActionEventSyncResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/SyncEts',
        request,
        metadata || {},
        this.methodDescriptorSyncEts,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/SyncEts',
    request,
    metadata || {},
    this.methodDescriptorSyncEts);
  }

  methodDescriptorGetSyncReport = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetSyncReport',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetSyncReportRequest,
    data_types_requests_pb.GetSyncReportResponse,
    (request: data_types_requests_pb.GetSyncReportRequest) => {
      return request.serializeBinary();
    },
    data_types_requests_pb.GetSyncReportResponse.deserializeBinary
  );

  getSyncReport(
    request: data_types_requests_pb.GetSyncReportRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_requests_pb.GetSyncReportResponse>;

  getSyncReport(
    request: data_types_requests_pb.GetSyncReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.GetSyncReportResponse) => void): grpcWeb.ClientReadableStream<data_types_requests_pb.GetSyncReportResponse>;

  getSyncReport(
    request: data_types_requests_pb.GetSyncReportRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.GetSyncReportResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetSyncReport',
        request,
        metadata || {},
        this.methodDescriptorGetSyncReport,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetSyncReport',
    request,
    metadata || {},
    this.methodDescriptorGetSyncReport);
  }

  methodDescriptorGetGatewayEventInfo = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/GetGatewayEventInfo',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.GetGatewayEventInfoRequest,
    data_types_requests_pb.GetGatewayEventInfoResponse,
    (request: data_types_requests_pb.GetGatewayEventInfoRequest) => {
      return request.serializeBinary();
    },
    data_types_requests_pb.GetGatewayEventInfoResponse.deserializeBinary
  );

  getGatewayEventInfo(
    request: data_types_requests_pb.GetGatewayEventInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_requests_pb.GetGatewayEventInfoResponse>;

  getGatewayEventInfo(
    request: data_types_requests_pb.GetGatewayEventInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.GetGatewayEventInfoResponse) => void): grpcWeb.ClientReadableStream<data_types_requests_pb.GetGatewayEventInfoResponse>;

  getGatewayEventInfo(
    request: data_types_requests_pb.GetGatewayEventInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.GetGatewayEventInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/GetGatewayEventInfo',
        request,
        metadata || {},
        this.methodDescriptorGetGatewayEventInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/GetGatewayEventInfo',
    request,
    metadata || {},
    this.methodDescriptorGetGatewayEventInfo);
  }

  methodDescriptorSetActionBooklet = new grpcWeb.MethodDescriptor(
    '/auth.AuthGrpc/SetActionBooklet',
    grpcWeb.MethodType.UNARY,
    data_types_requests_pb.SetActionBookletRequest,
    data_types_requests_pb.SetActionBookletResponse,
    (request: data_types_requests_pb.SetActionBookletRequest) => {
      return request.serializeBinary();
    },
    data_types_requests_pb.SetActionBookletResponse.deserializeBinary
  );

  setActionBooklet(
    request: data_types_requests_pb.SetActionBookletRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_types_requests_pb.SetActionBookletResponse>;

  setActionBooklet(
    request: data_types_requests_pb.SetActionBookletRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.SetActionBookletResponse) => void): grpcWeb.ClientReadableStream<data_types_requests_pb.SetActionBookletResponse>;

  setActionBooklet(
    request: data_types_requests_pb.SetActionBookletRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_types_requests_pb.SetActionBookletResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthGrpc/SetActionBooklet',
        request,
        metadata || {},
        this.methodDescriptorSetActionBooklet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthGrpc/SetActionBooklet',
    request,
    metadata || {},
    this.methodDescriptorSetActionBooklet);
  }

}

