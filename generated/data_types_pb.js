// source: data_types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var struct_pb = require('./struct_pb.js');
goog.object.extend(proto, struct_pb);
goog.exportSymbol('proto.auth.Action', null, global);
goog.exportSymbol('proto.auth.ActionEvent', null, global);
goog.exportSymbol('proto.auth.ActionEventData', null, global);
goog.exportSymbol('proto.auth.ActionEventList', null, global);
goog.exportSymbol('proto.auth.ActionList', null, global);
goog.exportSymbol('proto.auth.Age', null, global);
goog.exportSymbol('proto.auth.BarcodeFormat', null, global);
goog.exportSymbol('proto.auth.BarcodeFormatList', null, global);
goog.exportSymbol('proto.auth.BookletType', null, global);
goog.exportSymbol('proto.auth.BookletTypeList', null, global);
goog.exportSymbol('proto.auth.Category', null, global);
goog.exportSymbol('proto.auth.CategoryLimit', null, global);
goog.exportSymbol('proto.auth.CategoryPrice', null, global);
goog.exportSymbol('proto.auth.City', null, global);
goog.exportSymbol('proto.auth.CityList', null, global);
goog.exportSymbol('proto.auth.Country', null, global);
goog.exportSymbol('proto.auth.CountryList', null, global);
goog.exportSymbol('proto.auth.Currency', null, global);
goog.exportSymbol('proto.auth.CurrencyList', null, global);
goog.exportSymbol('proto.auth.EOrganizer', null, global);
goog.exportSymbol('proto.auth.EOrganizerList', null, global);
goog.exportSymbol('proto.auth.EventSeat', null, global);
goog.exportSymbol('proto.auth.EventSeatState', null, global);
goog.exportSymbol('proto.auth.Gateway', null, global);
goog.exportSymbol('proto.auth.GatewayEvent', null, global);
goog.exportSymbol('proto.auth.GatewayEventList', null, global);
goog.exportSymbol('proto.auth.GatewayList', null, global);
goog.exportSymbol('proto.auth.Genre', null, global);
goog.exportSymbol('proto.auth.GenreList', null, global);
goog.exportSymbol('proto.auth.GetSeatingPlanFullData', null, global);
goog.exportSymbol('proto.auth.Image', null, global);
goog.exportSymbol('proto.auth.Kind', null, global);
goog.exportSymbol('proto.auth.KindList', null, global);
goog.exportSymbol('proto.auth.LoginUser', null, global);
goog.exportSymbol('proto.auth.Point', null, global);
goog.exportSymbol('proto.auth.QuotaFormat', null, global);
goog.exportSymbol('proto.auth.QuotaFormatList', null, global);
goog.exportSymbol('proto.auth.SeatData', null, global);
goog.exportSymbol('proto.auth.SeatLocation', null, global);
goog.exportSymbol('proto.auth.SeatingPlan', null, global);
goog.exportSymbol('proto.auth.SeatingPlanList', null, global);
goog.exportSymbol('proto.auth.SimpleAction', null, global);
goog.exportSymbol('proto.auth.SimpleActionList', null, global);
goog.exportSymbol('proto.auth.SimpleSeatingPlan', null, global);
goog.exportSymbol('proto.auth.SimpleSeatingPlanList', null, global);
goog.exportSymbol('proto.auth.SimpleVenue', null, global);
goog.exportSymbol('proto.auth.SimpleVenueList', null, global);
goog.exportSymbol('proto.auth.TariffPlan', null, global);
goog.exportSymbol('proto.auth.UserType', null, global);
goog.exportSymbol('proto.auth.Venue', null, global);
goog.exportSymbol('proto.auth.VenueList', null, global);
goog.exportSymbol('proto.auth.VenueType', null, global);
goog.exportSymbol('proto.auth.VenueTypeList', null, global);
goog.exportSymbol('proto.auth.ZoneId', null, global);
goog.exportSymbol('proto.auth.ZoneIdList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.LoginUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.LoginUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.LoginUser.displayName = 'proto.auth.LoginUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.KindList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.KindList.repeatedFields_, null);
};
goog.inherits(proto.auth.KindList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.KindList.displayName = 'proto.auth.KindList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Kind = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Kind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Kind.displayName = 'proto.auth.Kind';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.VenueTypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.VenueTypeList.repeatedFields_, null);
};
goog.inherits(proto.auth.VenueTypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.VenueTypeList.displayName = 'proto.auth.VenueTypeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.VenueType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.VenueType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.VenueType.displayName = 'proto.auth.VenueType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.GatewayList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.GatewayList.repeatedFields_, null);
};
goog.inherits(proto.auth.GatewayList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.GatewayList.displayName = 'proto.auth.GatewayList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Gateway = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Gateway, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Gateway.displayName = 'proto.auth.Gateway';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.BarcodeFormatList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.BarcodeFormatList.repeatedFields_, null);
};
goog.inherits(proto.auth.BarcodeFormatList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.BarcodeFormatList.displayName = 'proto.auth.BarcodeFormatList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.BarcodeFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.BarcodeFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.BarcodeFormat.displayName = 'proto.auth.BarcodeFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.QuotaFormatList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.QuotaFormatList.repeatedFields_, null);
};
goog.inherits(proto.auth.QuotaFormatList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.QuotaFormatList.displayName = 'proto.auth.QuotaFormatList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.QuotaFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.QuotaFormat.repeatedFields_, null);
};
goog.inherits(proto.auth.QuotaFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.QuotaFormat.displayName = 'proto.auth.QuotaFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.BookletTypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.BookletTypeList.repeatedFields_, null);
};
goog.inherits(proto.auth.BookletTypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.BookletTypeList.displayName = 'proto.auth.BookletTypeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.BookletType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.BookletType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.BookletType.displayName = 'proto.auth.BookletType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.GenreList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.GenreList.repeatedFields_, null);
};
goog.inherits(proto.auth.GenreList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.GenreList.displayName = 'proto.auth.GenreList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Genre = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Genre, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Genre.displayName = 'proto.auth.Genre';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.ZoneIdList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.ZoneIdList.repeatedFields_, null);
};
goog.inherits(proto.auth.ZoneIdList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.ZoneIdList.displayName = 'proto.auth.ZoneIdList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.ZoneId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.ZoneId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.ZoneId.displayName = 'proto.auth.ZoneId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.CurrencyList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.CurrencyList.repeatedFields_, null);
};
goog.inherits(proto.auth.CurrencyList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.CurrencyList.displayName = 'proto.auth.CurrencyList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Currency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Currency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Currency.displayName = 'proto.auth.Currency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.EOrganizerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.EOrganizerList.repeatedFields_, null);
};
goog.inherits(proto.auth.EOrganizerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.EOrganizerList.displayName = 'proto.auth.EOrganizerList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.EOrganizer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.EOrganizer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.EOrganizer.displayName = 'proto.auth.EOrganizer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.CountryList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.CountryList.repeatedFields_, null);
};
goog.inherits(proto.auth.CountryList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.CountryList.displayName = 'proto.auth.CountryList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Country = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Country, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Country.displayName = 'proto.auth.Country';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.CityList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.CityList.repeatedFields_, null);
};
goog.inherits(proto.auth.CityList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.CityList.displayName = 'proto.auth.CityList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.City = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.City, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.City.displayName = 'proto.auth.City';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SimpleVenueList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.SimpleVenueList.repeatedFields_, null);
};
goog.inherits(proto.auth.SimpleVenueList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SimpleVenueList.displayName = 'proto.auth.SimpleVenueList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.VenueList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.VenueList.repeatedFields_, null);
};
goog.inherits(proto.auth.VenueList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.VenueList.displayName = 'proto.auth.VenueList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SimpleVenue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.SimpleVenue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SimpleVenue.displayName = 'proto.auth.SimpleVenue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Venue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Venue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Venue.displayName = 'proto.auth.Venue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Image.displayName = 'proto.auth.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SimpleSeatingPlanList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.SimpleSeatingPlanList.repeatedFields_, null);
};
goog.inherits(proto.auth.SimpleSeatingPlanList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SimpleSeatingPlanList.displayName = 'proto.auth.SimpleSeatingPlanList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SeatingPlanList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.SeatingPlanList.repeatedFields_, null);
};
goog.inherits(proto.auth.SeatingPlanList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SeatingPlanList.displayName = 'proto.auth.SeatingPlanList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SimpleSeatingPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.SimpleSeatingPlan.repeatedFields_, null);
};
goog.inherits(proto.auth.SimpleSeatingPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SimpleSeatingPlan.displayName = 'proto.auth.SimpleSeatingPlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SeatingPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.SeatingPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SeatingPlan.displayName = 'proto.auth.SeatingPlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Point.displayName = 'proto.auth.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SeatData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.SeatData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SeatData.displayName = 'proto.auth.SeatData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.GetSeatingPlanFullData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.GetSeatingPlanFullData.repeatedFields_, null);
};
goog.inherits(proto.auth.GetSeatingPlanFullData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.GetSeatingPlanFullData.displayName = 'proto.auth.GetSeatingPlanFullData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Category = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Category, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Category.displayName = 'proto.auth.Category';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.CategoryLimit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.CategoryLimit.repeatedFields_, null);
};
goog.inherits(proto.auth.CategoryLimit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.CategoryLimit.displayName = 'proto.auth.CategoryLimit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SimpleActionList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.SimpleActionList.repeatedFields_, null);
};
goog.inherits(proto.auth.SimpleActionList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SimpleActionList.displayName = 'proto.auth.SimpleActionList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.ActionList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.ActionList.repeatedFields_, null);
};
goog.inherits(proto.auth.ActionList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.ActionList.displayName = 'proto.auth.ActionList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SimpleAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.SimpleAction.repeatedFields_, null);
};
goog.inherits(proto.auth.SimpleAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SimpleAction.displayName = 'proto.auth.SimpleAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Action.displayName = 'proto.auth.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.ActionEventList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.ActionEventList.repeatedFields_, null);
};
goog.inherits(proto.auth.ActionEventList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.ActionEventList.displayName = 'proto.auth.ActionEventList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.ActionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.ActionEvent.repeatedFields_, null);
};
goog.inherits(proto.auth.ActionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.ActionEvent.displayName = 'proto.auth.ActionEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.EventSeatState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.EventSeatState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.EventSeatState.displayName = 'proto.auth.EventSeatState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.SeatLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.SeatLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.SeatLocation.displayName = 'proto.auth.SeatLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.EventSeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.EventSeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.EventSeat.displayName = 'proto.auth.EventSeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.ActionEventData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.ActionEventData.repeatedFields_, null);
};
goog.inherits(proto.auth.ActionEventData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.ActionEventData.displayName = 'proto.auth.ActionEventData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.CategoryPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.CategoryPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.CategoryPrice.displayName = 'proto.auth.CategoryPrice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.TariffPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.TariffPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.TariffPlan.displayName = 'proto.auth.TariffPlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.GatewayEventList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.GatewayEventList.repeatedFields_, null);
};
goog.inherits(proto.auth.GatewayEventList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.GatewayEventList.displayName = 'proto.auth.GatewayEventList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.GatewayEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.GatewayEvent.repeatedFields_, null);
};
goog.inherits(proto.auth.GatewayEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.GatewayEvent.displayName = 'proto.auth.GatewayEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.LoginUser.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.LoginUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.LoginUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.LoginUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authorityid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    surname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    authorityname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    usertype: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.LoginUser}
 */
proto.auth.LoginUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.LoginUser;
  return proto.auth.LoginUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.LoginUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.LoginUser}
 */
proto.auth.LoginUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAuthorityid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSurname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorityname(value);
      break;
    case 7:
      var value = /** @type {!proto.auth.UserType} */ (reader.readEnum());
      msg.setUsertype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.LoginUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.LoginUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.LoginUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.LoginUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAuthorityid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSurname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuthorityname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUsertype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.LoginUser.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.LoginUser} returns this
 */
proto.auth.LoginUser.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 authorityId = 2;
 * @return {number}
 */
proto.auth.LoginUser.prototype.getAuthorityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.LoginUser} returns this
 */
proto.auth.LoginUser.prototype.setAuthorityid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.auth.LoginUser.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.LoginUser} returns this
 */
proto.auth.LoginUser.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.auth.LoginUser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.LoginUser} returns this
 */
proto.auth.LoginUser.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string surname = 5;
 * @return {string}
 */
proto.auth.LoginUser.prototype.getSurname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.LoginUser} returns this
 */
proto.auth.LoginUser.prototype.setSurname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string authorityName = 6;
 * @return {string}
 */
proto.auth.LoginUser.prototype.getAuthorityname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.LoginUser} returns this
 */
proto.auth.LoginUser.prototype.setAuthorityname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional UserType userType = 7;
 * @return {!proto.auth.UserType}
 */
proto.auth.LoginUser.prototype.getUsertype = function() {
  return /** @type {!proto.auth.UserType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.auth.UserType} value
 * @return {!proto.auth.LoginUser} returns this
 */
proto.auth.LoginUser.prototype.setUsertype = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.KindList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.KindList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.KindList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.KindList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.KindList.toObject = function(includeInstance, msg) {
  var f, obj = {
    kindlistList: jspb.Message.toObjectList(msg.getKindlistList(),
    proto.auth.Kind.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.KindList}
 */
proto.auth.KindList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.KindList;
  return proto.auth.KindList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.KindList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.KindList}
 */
proto.auth.KindList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.Kind;
      reader.readMessage(value,proto.auth.Kind.deserializeBinaryFromReader);
      msg.addKindlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.KindList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.KindList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.KindList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.KindList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKindlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.Kind.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Kind kindList = 1;
 * @return {!Array<!proto.auth.Kind>}
 */
proto.auth.KindList.prototype.getKindlistList = function() {
  return /** @type{!Array<!proto.auth.Kind>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Kind, 1));
};


/**
 * @param {!Array<!proto.auth.Kind>} value
 * @return {!proto.auth.KindList} returns this
*/
proto.auth.KindList.prototype.setKindlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.Kind=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Kind}
 */
proto.auth.KindList.prototype.addKindlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.Kind, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.KindList} returns this
 */
proto.auth.KindList.prototype.clearKindlistList = function() {
  return this.setKindlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Kind.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Kind.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Kind} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Kind.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Kind}
 */
proto.auth.Kind.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Kind;
  return proto.auth.Kind.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Kind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Kind}
 */
proto.auth.Kind.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Kind.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Kind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Kind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Kind.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.Kind.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Kind} returns this
 */
proto.auth.Kind.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.Kind.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Kind} returns this
 */
proto.auth.Kind.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.VenueTypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.VenueTypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.VenueTypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.VenueTypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.VenueTypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    venuetypeList: jspb.Message.toObjectList(msg.getVenuetypeList(),
    proto.auth.VenueType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.VenueTypeList}
 */
proto.auth.VenueTypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.VenueTypeList;
  return proto.auth.VenueTypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.VenueTypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.VenueTypeList}
 */
proto.auth.VenueTypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.VenueType;
      reader.readMessage(value,proto.auth.VenueType.deserializeBinaryFromReader);
      msg.addVenuetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.VenueTypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.VenueTypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.VenueTypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.VenueTypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVenuetypeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.VenueType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VenueType venueType = 1;
 * @return {!Array<!proto.auth.VenueType>}
 */
proto.auth.VenueTypeList.prototype.getVenuetypeList = function() {
  return /** @type{!Array<!proto.auth.VenueType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.VenueType, 1));
};


/**
 * @param {!Array<!proto.auth.VenueType>} value
 * @return {!proto.auth.VenueTypeList} returns this
*/
proto.auth.VenueTypeList.prototype.setVenuetypeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.VenueType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.VenueType}
 */
proto.auth.VenueTypeList.prototype.addVenuetype = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.VenueType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.VenueTypeList} returns this
 */
proto.auth.VenueTypeList.prototype.clearVenuetypeList = function() {
  return this.setVenuetypeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.VenueType.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.VenueType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.VenueType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.VenueType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.VenueType}
 */
proto.auth.VenueType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.VenueType;
  return proto.auth.VenueType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.VenueType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.VenueType}
 */
proto.auth.VenueType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.VenueType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.VenueType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.VenueType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.VenueType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.VenueType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.VenueType} returns this
 */
proto.auth.VenueType.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.VenueType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.VenueType} returns this
 */
proto.auth.VenueType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.GatewayList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.GatewayList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.GatewayList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.GatewayList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GatewayList.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewaylistList: jspb.Message.toObjectList(msg.getGatewaylistList(),
    proto.auth.Gateway.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.GatewayList}
 */
proto.auth.GatewayList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.GatewayList;
  return proto.auth.GatewayList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.GatewayList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.GatewayList}
 */
proto.auth.GatewayList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.Gateway;
      reader.readMessage(value,proto.auth.Gateway.deserializeBinaryFromReader);
      msg.addGatewaylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.GatewayList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.GatewayList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.GatewayList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GatewayList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewaylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.Gateway.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Gateway gatewayList = 1;
 * @return {!Array<!proto.auth.Gateway>}
 */
proto.auth.GatewayList.prototype.getGatewaylistList = function() {
  return /** @type{!Array<!proto.auth.Gateway>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Gateway, 1));
};


/**
 * @param {!Array<!proto.auth.Gateway>} value
 * @return {!proto.auth.GatewayList} returns this
*/
proto.auth.GatewayList.prototype.setGatewaylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.Gateway=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Gateway}
 */
proto.auth.GatewayList.prototype.addGatewaylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.Gateway, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.GatewayList} returns this
 */
proto.auth.GatewayList.prototype.clearGatewaylistList = function() {
  return this.setGatewaylistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Gateway.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Gateway.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Gateway} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Gateway.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    systemid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    systemname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    organizerid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    organizername: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Gateway}
 */
proto.auth.Gateway.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Gateway;
  return proto.auth.Gateway.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Gateway} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Gateway}
 */
proto.auth.Gateway.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemname(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrganizerid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Gateway.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Gateway.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Gateway} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Gateway.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSystemid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSystemname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.Gateway.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Gateway} returns this
 */
proto.auth.Gateway.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 systemId = 2;
 * @return {number}
 */
proto.auth.Gateway.prototype.getSystemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Gateway} returns this
 */
proto.auth.Gateway.prototype.setSystemid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.auth.Gateway.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Gateway} returns this
 */
proto.auth.Gateway.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string systemName = 4;
 * @return {string}
 */
proto.auth.Gateway.prototype.getSystemname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Gateway} returns this
 */
proto.auth.Gateway.prototype.setSystemname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 organizerId = 5;
 * @return {number}
 */
proto.auth.Gateway.prototype.getOrganizerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Gateway} returns this
 */
proto.auth.Gateway.prototype.setOrganizerid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.auth.Gateway} returns this
 */
proto.auth.Gateway.prototype.clearOrganizerid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Gateway.prototype.hasOrganizerid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string organizerName = 6;
 * @return {string}
 */
proto.auth.Gateway.prototype.getOrganizername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Gateway} returns this
 */
proto.auth.Gateway.prototype.setOrganizername = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.auth.Gateway} returns this
 */
proto.auth.Gateway.prototype.clearOrganizername = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Gateway.prototype.hasOrganizername = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.BarcodeFormatList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.BarcodeFormatList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.BarcodeFormatList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.BarcodeFormatList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.BarcodeFormatList.toObject = function(includeInstance, msg) {
  var f, obj = {
    barcodeformatList: jspb.Message.toObjectList(msg.getBarcodeformatList(),
    proto.auth.BarcodeFormat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.BarcodeFormatList}
 */
proto.auth.BarcodeFormatList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.BarcodeFormatList;
  return proto.auth.BarcodeFormatList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.BarcodeFormatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.BarcodeFormatList}
 */
proto.auth.BarcodeFormatList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.BarcodeFormat;
      reader.readMessage(value,proto.auth.BarcodeFormat.deserializeBinaryFromReader);
      msg.addBarcodeformat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.BarcodeFormatList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.BarcodeFormatList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.BarcodeFormatList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.BarcodeFormatList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBarcodeformatList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.BarcodeFormat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BarcodeFormat barcodeFormat = 1;
 * @return {!Array<!proto.auth.BarcodeFormat>}
 */
proto.auth.BarcodeFormatList.prototype.getBarcodeformatList = function() {
  return /** @type{!Array<!proto.auth.BarcodeFormat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.BarcodeFormat, 1));
};


/**
 * @param {!Array<!proto.auth.BarcodeFormat>} value
 * @return {!proto.auth.BarcodeFormatList} returns this
*/
proto.auth.BarcodeFormatList.prototype.setBarcodeformatList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.BarcodeFormat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.BarcodeFormat}
 */
proto.auth.BarcodeFormatList.prototype.addBarcodeformat = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.BarcodeFormat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.BarcodeFormatList} returns this
 */
proto.auth.BarcodeFormatList.prototype.clearBarcodeformatList = function() {
  return this.setBarcodeformatList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.BarcodeFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.BarcodeFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.BarcodeFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.BarcodeFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.BarcodeFormat}
 */
proto.auth.BarcodeFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.BarcodeFormat;
  return proto.auth.BarcodeFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.BarcodeFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.BarcodeFormat}
 */
proto.auth.BarcodeFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.BarcodeFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.BarcodeFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.BarcodeFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.BarcodeFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.BarcodeFormat.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.BarcodeFormat} returns this
 */
proto.auth.BarcodeFormat.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.BarcodeFormat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.BarcodeFormat} returns this
 */
proto.auth.BarcodeFormat.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.QuotaFormatList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.QuotaFormatList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.QuotaFormatList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.QuotaFormatList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.QuotaFormatList.toObject = function(includeInstance, msg) {
  var f, obj = {
    quotaformatList: jspb.Message.toObjectList(msg.getQuotaformatList(),
    proto.auth.QuotaFormat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.QuotaFormatList}
 */
proto.auth.QuotaFormatList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.QuotaFormatList;
  return proto.auth.QuotaFormatList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.QuotaFormatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.QuotaFormatList}
 */
proto.auth.QuotaFormatList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.QuotaFormat;
      reader.readMessage(value,proto.auth.QuotaFormat.deserializeBinaryFromReader);
      msg.addQuotaformat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.QuotaFormatList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.QuotaFormatList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.QuotaFormatList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.QuotaFormatList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuotaformatList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.QuotaFormat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QuotaFormat quotaFormat = 1;
 * @return {!Array<!proto.auth.QuotaFormat>}
 */
proto.auth.QuotaFormatList.prototype.getQuotaformatList = function() {
  return /** @type{!Array<!proto.auth.QuotaFormat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.QuotaFormat, 1));
};


/**
 * @param {!Array<!proto.auth.QuotaFormat>} value
 * @return {!proto.auth.QuotaFormatList} returns this
*/
proto.auth.QuotaFormatList.prototype.setQuotaformatList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.QuotaFormat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.QuotaFormat}
 */
proto.auth.QuotaFormatList.prototype.addQuotaformat = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.QuotaFormat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.QuotaFormatList} returns this
 */
proto.auth.QuotaFormatList.prototype.clearQuotaformatList = function() {
  return this.setQuotaformatList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.QuotaFormat.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.QuotaFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.QuotaFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.QuotaFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.QuotaFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    desc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filefilterdesc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    filefilterextensionsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.QuotaFormat}
 */
proto.auth.QuotaFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.QuotaFormat;
  return proto.auth.QuotaFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.QuotaFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.QuotaFormat}
 */
proto.auth.QuotaFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilefilterdesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addFilefilterextensions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.QuotaFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.QuotaFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.QuotaFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.QuotaFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilefilterdesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFilefilterextensionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.QuotaFormat.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.QuotaFormat} returns this
 */
proto.auth.QuotaFormat.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.auth.QuotaFormat.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.QuotaFormat} returns this
 */
proto.auth.QuotaFormat.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fileFilterDesc = 3;
 * @return {string}
 */
proto.auth.QuotaFormat.prototype.getFilefilterdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.QuotaFormat} returns this
 */
proto.auth.QuotaFormat.prototype.setFilefilterdesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string fileFilterExtensions = 4;
 * @return {!Array<string>}
 */
proto.auth.QuotaFormat.prototype.getFilefilterextensionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.auth.QuotaFormat} returns this
 */
proto.auth.QuotaFormat.prototype.setFilefilterextensionsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.auth.QuotaFormat} returns this
 */
proto.auth.QuotaFormat.prototype.addFilefilterextensions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.QuotaFormat} returns this
 */
proto.auth.QuotaFormat.prototype.clearFilefilterextensionsList = function() {
  return this.setFilefilterextensionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.BookletTypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.BookletTypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.BookletTypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.BookletTypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.BookletTypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    booklettypelistList: jspb.Message.toObjectList(msg.getBooklettypelistList(),
    proto.auth.BookletType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.BookletTypeList}
 */
proto.auth.BookletTypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.BookletTypeList;
  return proto.auth.BookletTypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.BookletTypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.BookletTypeList}
 */
proto.auth.BookletTypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.BookletType;
      reader.readMessage(value,proto.auth.BookletType.deserializeBinaryFromReader);
      msg.addBooklettypelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.BookletTypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.BookletTypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.BookletTypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.BookletTypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBooklettypelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.BookletType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BookletType bookletTypeList = 1;
 * @return {!Array<!proto.auth.BookletType>}
 */
proto.auth.BookletTypeList.prototype.getBooklettypelistList = function() {
  return /** @type{!Array<!proto.auth.BookletType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.BookletType, 1));
};


/**
 * @param {!Array<!proto.auth.BookletType>} value
 * @return {!proto.auth.BookletTypeList} returns this
*/
proto.auth.BookletTypeList.prototype.setBooklettypelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.BookletType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.BookletType}
 */
proto.auth.BookletTypeList.prototype.addBooklettypelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.BookletType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.BookletTypeList} returns this
 */
proto.auth.BookletTypeList.prototype.clearBooklettypelistList = function() {
  return this.setBooklettypelistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.BookletType.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.BookletType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.BookletType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.BookletType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    desc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filefilterdesc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    extension: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.BookletType}
 */
proto.auth.BookletType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.BookletType;
  return proto.auth.BookletType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.BookletType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.BookletType}
 */
proto.auth.BookletType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilefilterdesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtension$(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.BookletType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.BookletType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.BookletType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.BookletType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilefilterdesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExtension$();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.BookletType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.BookletType} returns this
 */
proto.auth.BookletType.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.auth.BookletType.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.BookletType} returns this
 */
proto.auth.BookletType.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fileFilterDesc = 3;
 * @return {string}
 */
proto.auth.BookletType.prototype.getFilefilterdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.BookletType} returns this
 */
proto.auth.BookletType.prototype.setFilefilterdesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string extension = 4;
 * @return {string}
 */
proto.auth.BookletType.prototype.getExtension$ = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.BookletType} returns this
 */
proto.auth.BookletType.prototype.setExtension$ = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.GenreList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.GenreList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.GenreList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.GenreList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GenreList.toObject = function(includeInstance, msg) {
  var f, obj = {
    genreList: jspb.Message.toObjectList(msg.getGenreList(),
    proto.auth.Genre.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.GenreList}
 */
proto.auth.GenreList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.GenreList;
  return proto.auth.GenreList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.GenreList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.GenreList}
 */
proto.auth.GenreList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.Genre;
      reader.readMessage(value,proto.auth.Genre.deserializeBinaryFromReader);
      msg.addGenre(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.GenreList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.GenreList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.GenreList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GenreList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenreList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.Genre.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Genre genre = 1;
 * @return {!Array<!proto.auth.Genre>}
 */
proto.auth.GenreList.prototype.getGenreList = function() {
  return /** @type{!Array<!proto.auth.Genre>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Genre, 1));
};


/**
 * @param {!Array<!proto.auth.Genre>} value
 * @return {!proto.auth.GenreList} returns this
*/
proto.auth.GenreList.prototype.setGenreList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.Genre=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Genre}
 */
proto.auth.GenreList.prototype.addGenre = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.Genre, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.GenreList} returns this
 */
proto.auth.GenreList.prototype.clearGenreList = function() {
  return this.setGenreList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Genre.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Genre.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Genre} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Genre.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Genre}
 */
proto.auth.Genre.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Genre;
  return proto.auth.Genre.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Genre} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Genre}
 */
proto.auth.Genre.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Genre.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Genre.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Genre} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Genre.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.Genre.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Genre} returns this
 */
proto.auth.Genre.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.Genre.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Genre} returns this
 */
proto.auth.Genre.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.ZoneIdList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.ZoneIdList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.ZoneIdList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.ZoneIdList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ZoneIdList.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoneidList: jspb.Message.toObjectList(msg.getZoneidList(),
    proto.auth.ZoneId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.ZoneIdList}
 */
proto.auth.ZoneIdList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.ZoneIdList;
  return proto.auth.ZoneIdList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.ZoneIdList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.ZoneIdList}
 */
proto.auth.ZoneIdList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.ZoneId;
      reader.readMessage(value,proto.auth.ZoneId.deserializeBinaryFromReader);
      msg.addZoneid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.ZoneIdList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.ZoneIdList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.ZoneIdList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ZoneIdList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZoneidList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.ZoneId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ZoneId zoneId = 1;
 * @return {!Array<!proto.auth.ZoneId>}
 */
proto.auth.ZoneIdList.prototype.getZoneidList = function() {
  return /** @type{!Array<!proto.auth.ZoneId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.ZoneId, 1));
};


/**
 * @param {!Array<!proto.auth.ZoneId>} value
 * @return {!proto.auth.ZoneIdList} returns this
*/
proto.auth.ZoneIdList.prototype.setZoneidList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.ZoneId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.ZoneId}
 */
proto.auth.ZoneIdList.prototype.addZoneid = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.ZoneId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ZoneIdList} returns this
 */
proto.auth.ZoneIdList.prototype.clearZoneidList = function() {
  return this.setZoneidList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.ZoneId.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.ZoneId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.ZoneId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ZoneId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    standardoffsetstring: jspb.Message.getFieldWithDefault(msg, 2, ""),
    standardoffsetseconds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.ZoneId}
 */
proto.auth.ZoneId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.ZoneId;
  return proto.auth.ZoneId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.ZoneId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.ZoneId}
 */
proto.auth.ZoneId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStandardoffsetstring(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStandardoffsetseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.ZoneId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.ZoneId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.ZoneId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ZoneId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStandardoffsetstring();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStandardoffsetseconds();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.auth.ZoneId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ZoneId} returns this
 */
proto.auth.ZoneId.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string standardOffsetString = 2;
 * @return {string}
 */
proto.auth.ZoneId.prototype.getStandardoffsetstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ZoneId} returns this
 */
proto.auth.ZoneId.prototype.setStandardoffsetstring = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 standardOffsetSeconds = 3;
 * @return {number}
 */
proto.auth.ZoneId.prototype.getStandardoffsetseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ZoneId} returns this
 */
proto.auth.ZoneId.prototype.setStandardoffsetseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.CurrencyList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.CurrencyList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.CurrencyList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.CurrencyList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CurrencyList.toObject = function(includeInstance, msg) {
  var f, obj = {
    currencyList: jspb.Message.toObjectList(msg.getCurrencyList(),
    proto.auth.Currency.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.CurrencyList}
 */
proto.auth.CurrencyList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.CurrencyList;
  return proto.auth.CurrencyList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.CurrencyList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.CurrencyList}
 */
proto.auth.CurrencyList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.Currency;
      reader.readMessage(value,proto.auth.Currency.deserializeBinaryFromReader);
      msg.addCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.CurrencyList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.CurrencyList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.CurrencyList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CurrencyList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrencyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.Currency.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Currency currency = 1;
 * @return {!Array<!proto.auth.Currency>}
 */
proto.auth.CurrencyList.prototype.getCurrencyList = function() {
  return /** @type{!Array<!proto.auth.Currency>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Currency, 1));
};


/**
 * @param {!Array<!proto.auth.Currency>} value
 * @return {!proto.auth.CurrencyList} returns this
*/
proto.auth.CurrencyList.prototype.setCurrencyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.Currency=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Currency}
 */
proto.auth.CurrencyList.prototype.addCurrency = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.Currency, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.CurrencyList} returns this
 */
proto.auth.CurrencyList.prototype.clearCurrencyList = function() {
  return this.setCurrencyList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Currency.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Currency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Currency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Currency.toObject = function(includeInstance, msg) {
  var f, obj = {
    currencycode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numericcode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    displayname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Currency}
 */
proto.auth.Currency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Currency;
  return proto.auth.Currency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Currency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Currency}
 */
proto.auth.Currency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencycode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumericcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Currency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Currency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Currency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Currency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrencycode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumericcode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string currencyCode = 1;
 * @return {string}
 */
proto.auth.Currency.prototype.getCurrencycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Currency} returns this
 */
proto.auth.Currency.prototype.setCurrencycode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 numericCode = 2;
 * @return {number}
 */
proto.auth.Currency.prototype.getNumericcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Currency} returns this
 */
proto.auth.Currency.prototype.setNumericcode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string displayName = 3;
 * @return {string}
 */
proto.auth.Currency.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Currency} returns this
 */
proto.auth.Currency.prototype.setDisplayname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.EOrganizerList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.EOrganizerList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.EOrganizerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.EOrganizerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.EOrganizerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizerList: jspb.Message.toObjectList(msg.getOrganizerList(),
    proto.auth.EOrganizer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.EOrganizerList}
 */
proto.auth.EOrganizerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.EOrganizerList;
  return proto.auth.EOrganizerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.EOrganizerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.EOrganizerList}
 */
proto.auth.EOrganizerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.EOrganizer;
      reader.readMessage(value,proto.auth.EOrganizer.deserializeBinaryFromReader);
      msg.addOrganizer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.EOrganizerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.EOrganizerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.EOrganizerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.EOrganizerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.EOrganizer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EOrganizer organizer = 1;
 * @return {!Array<!proto.auth.EOrganizer>}
 */
proto.auth.EOrganizerList.prototype.getOrganizerList = function() {
  return /** @type{!Array<!proto.auth.EOrganizer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.EOrganizer, 1));
};


/**
 * @param {!Array<!proto.auth.EOrganizer>} value
 * @return {!proto.auth.EOrganizerList} returns this
*/
proto.auth.EOrganizerList.prototype.setOrganizerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.EOrganizer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.EOrganizer}
 */
proto.auth.EOrganizerList.prototype.addOrganizer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.EOrganizer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.EOrganizerList} returns this
 */
proto.auth.EOrganizerList.prototype.clearOrganizerList = function() {
  return this.setOrganizerList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.EOrganizer.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.EOrganizer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.EOrganizer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.EOrganizer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.EOrganizer}
 */
proto.auth.EOrganizer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.EOrganizer;
  return proto.auth.EOrganizer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.EOrganizer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.EOrganizer}
 */
proto.auth.EOrganizer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.EOrganizer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.EOrganizer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.EOrganizer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.EOrganizer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.EOrganizer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.EOrganizer} returns this
 */
proto.auth.EOrganizer.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.EOrganizer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.EOrganizer} returns this
 */
proto.auth.EOrganizer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.CountryList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.CountryList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.CountryList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.CountryList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CountryList.toObject = function(includeInstance, msg) {
  var f, obj = {
    countryList: jspb.Message.toObjectList(msg.getCountryList(),
    proto.auth.Country.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.CountryList}
 */
proto.auth.CountryList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.CountryList;
  return proto.auth.CountryList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.CountryList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.CountryList}
 */
proto.auth.CountryList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.Country;
      reader.readMessage(value,proto.auth.Country.deserializeBinaryFromReader);
      msg.addCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.CountryList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.CountryList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.CountryList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CountryList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.Country.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Country country = 1;
 * @return {!Array<!proto.auth.Country>}
 */
proto.auth.CountryList.prototype.getCountryList = function() {
  return /** @type{!Array<!proto.auth.Country>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Country, 1));
};


/**
 * @param {!Array<!proto.auth.Country>} value
 * @return {!proto.auth.CountryList} returns this
*/
proto.auth.CountryList.prototype.setCountryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.Country=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Country}
 */
proto.auth.CountryList.prototype.addCountry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.Country, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.CountryList} returns this
 */
proto.auth.CountryList.prototype.clearCountryList = function() {
  return this.setCountryList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Country.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Country.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Country} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Country.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Country}
 */
proto.auth.Country.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Country;
  return proto.auth.Country.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Country} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Country}
 */
proto.auth.Country.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Country.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Country.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Country} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Country.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.Country.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Country} returns this
 */
proto.auth.Country.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.Country.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Country} returns this
 */
proto.auth.Country.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.CityList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.CityList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.CityList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.CityList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CityList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cityList: jspb.Message.toObjectList(msg.getCityList(),
    proto.auth.City.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.CityList}
 */
proto.auth.CityList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.CityList;
  return proto.auth.CityList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.CityList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.CityList}
 */
proto.auth.CityList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.City;
      reader.readMessage(value,proto.auth.City.deserializeBinaryFromReader);
      msg.addCity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.CityList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.CityList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.CityList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CityList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.City.serializeBinaryToWriter
    );
  }
};


/**
 * repeated City city = 1;
 * @return {!Array<!proto.auth.City>}
 */
proto.auth.CityList.prototype.getCityList = function() {
  return /** @type{!Array<!proto.auth.City>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.City, 1));
};


/**
 * @param {!Array<!proto.auth.City>} value
 * @return {!proto.auth.CityList} returns this
*/
proto.auth.CityList.prototype.setCityList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.City=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.City}
 */
proto.auth.CityList.prototype.addCity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.City, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.CityList} returns this
 */
proto.auth.CityList.prototype.clearCityList = function() {
  return this.setCityList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.City.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.City.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.City} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.City.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    countryid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    zoneid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.City}
 */
proto.auth.City.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.City;
  return proto.auth.City.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.City} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.City}
 */
proto.auth.City.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCountryid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setZoneid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.City.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.City.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.City} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.City.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCountryid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getZoneid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.City.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.City} returns this
 */
proto.auth.City.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 countryId = 2;
 * @return {number}
 */
proto.auth.City.prototype.getCountryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.City} returns this
 */
proto.auth.City.prototype.setCountryid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.auth.City.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.City} returns this
 */
proto.auth.City.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string zoneId = 4;
 * @return {string}
 */
proto.auth.City.prototype.getZoneid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.City} returns this
 */
proto.auth.City.prototype.setZoneid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.SimpleVenueList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SimpleVenueList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SimpleVenueList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SimpleVenueList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleVenueList.toObject = function(includeInstance, msg) {
  var f, obj = {
    simplevenuelistList: jspb.Message.toObjectList(msg.getSimplevenuelistList(),
    proto.auth.SimpleVenue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SimpleVenueList}
 */
proto.auth.SimpleVenueList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SimpleVenueList;
  return proto.auth.SimpleVenueList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SimpleVenueList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SimpleVenueList}
 */
proto.auth.SimpleVenueList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.SimpleVenue;
      reader.readMessage(value,proto.auth.SimpleVenue.deserializeBinaryFromReader);
      msg.addSimplevenuelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SimpleVenueList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SimpleVenueList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SimpleVenueList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleVenueList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimplevenuelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.SimpleVenue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimpleVenue simpleVenueList = 1;
 * @return {!Array<!proto.auth.SimpleVenue>}
 */
proto.auth.SimpleVenueList.prototype.getSimplevenuelistList = function() {
  return /** @type{!Array<!proto.auth.SimpleVenue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.SimpleVenue, 1));
};


/**
 * @param {!Array<!proto.auth.SimpleVenue>} value
 * @return {!proto.auth.SimpleVenueList} returns this
*/
proto.auth.SimpleVenueList.prototype.setSimplevenuelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.SimpleVenue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.SimpleVenue}
 */
proto.auth.SimpleVenueList.prototype.addSimplevenuelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.SimpleVenue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SimpleVenueList} returns this
 */
proto.auth.SimpleVenueList.prototype.clearSimplevenuelistList = function() {
  return this.setSimplevenuelistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.VenueList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.VenueList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.VenueList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.VenueList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.VenueList.toObject = function(includeInstance, msg) {
  var f, obj = {
    venuelistList: jspb.Message.toObjectList(msg.getVenuelistList(),
    proto.auth.VenueList.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.VenueList}
 */
proto.auth.VenueList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.VenueList;
  return proto.auth.VenueList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.VenueList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.VenueList}
 */
proto.auth.VenueList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.VenueList;
      reader.readMessage(value,proto.auth.VenueList.deserializeBinaryFromReader);
      msg.addVenuelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.VenueList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.VenueList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.VenueList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.VenueList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVenuelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.VenueList.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VenueList venueList = 1;
 * @return {!Array<!proto.auth.VenueList>}
 */
proto.auth.VenueList.prototype.getVenuelistList = function() {
  return /** @type{!Array<!proto.auth.VenueList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.VenueList, 1));
};


/**
 * @param {!Array<!proto.auth.VenueList>} value
 * @return {!proto.auth.VenueList} returns this
*/
proto.auth.VenueList.prototype.setVenuelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.VenueList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.VenueList}
 */
proto.auth.VenueList.prototype.addVenuelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.VenueList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.VenueList} returns this
 */
proto.auth.VenueList.prototype.clearVenuelistList = function() {
  return this.setVenuelistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SimpleVenue.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SimpleVenue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SimpleVenue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleVenue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cityid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cityname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    venuetype: (f = msg.getVenuetype()) && proto.auth.VenueType.toObject(includeInstance, f),
    address: jspb.Message.getFieldWithDefault(msg, 7, ""),
    geolat: jspb.Message.getFieldWithDefault(msg, 8, ""),
    geolon: jspb.Message.getFieldWithDefault(msg, 9, ""),
    description: jspb.Message.getFieldWithDefault(msg, 10, ""),
    namehex: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SimpleVenue}
 */
proto.auth.SimpleVenue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SimpleVenue;
  return proto.auth.SimpleVenue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SimpleVenue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SimpleVenue}
 */
proto.auth.SimpleVenue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCityid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCityname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = new proto.auth.VenueType;
      reader.readMessage(value,proto.auth.VenueType.deserializeBinaryFromReader);
      msg.setVenuetype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeolat(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeolon(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamehex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SimpleVenue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SimpleVenue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SimpleVenue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleVenue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCityid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCityname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVenuetype();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.auth.VenueType.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGeolat();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGeolon();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getNamehex();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.SimpleVenue.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 cityId = 2;
 * @return {number}
 */
proto.auth.SimpleVenue.prototype.getCityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setCityid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string cityName = 3;
 * @return {string}
 */
proto.auth.SimpleVenue.prototype.getCityname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setCityname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string currency = 4;
 * @return {string}
 */
proto.auth.SimpleVenue.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.auth.SimpleVenue.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional VenueType venueType = 6;
 * @return {?proto.auth.VenueType}
 */
proto.auth.SimpleVenue.prototype.getVenuetype = function() {
  return /** @type{?proto.auth.VenueType} */ (
    jspb.Message.getWrapperField(this, proto.auth.VenueType, 6));
};


/**
 * @param {?proto.auth.VenueType|undefined} value
 * @return {!proto.auth.SimpleVenue} returns this
*/
proto.auth.SimpleVenue.prototype.setVenuetype = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.clearVenuetype = function() {
  return this.setVenuetype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.SimpleVenue.prototype.hasVenuetype = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string address = 7;
 * @return {string}
 */
proto.auth.SimpleVenue.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string geoLat = 8;
 * @return {string}
 */
proto.auth.SimpleVenue.prototype.getGeolat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setGeolat = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string geoLon = 9;
 * @return {string}
 */
proto.auth.SimpleVenue.prototype.getGeolon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setGeolon = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string description = 10;
 * @return {string}
 */
proto.auth.SimpleVenue.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string nameHex = 11;
 * @return {string}
 */
proto.auth.SimpleVenue.prototype.getNamehex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleVenue} returns this
 */
proto.auth.SimpleVenue.prototype.setNamehex = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Venue.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Venue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Venue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Venue.toObject = function(includeInstance, msg) {
  var f, obj = {
    simplevenue: (f = msg.getSimplevenue()) && proto.auth.SimpleVenue.toObject(includeInstance, f),
    bigimage: (f = msg.getBigimage()) && proto.auth.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Venue}
 */
proto.auth.Venue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Venue;
  return proto.auth.Venue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Venue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Venue}
 */
proto.auth.Venue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.SimpleVenue;
      reader.readMessage(value,proto.auth.SimpleVenue.deserializeBinaryFromReader);
      msg.setSimplevenue(value);
      break;
    case 11:
      var value = new proto.auth.Image;
      reader.readMessage(value,proto.auth.Image.deserializeBinaryFromReader);
      msg.setBigimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Venue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Venue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Venue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Venue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimplevenue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.auth.SimpleVenue.serializeBinaryToWriter
    );
  }
  f = message.getBigimage();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.auth.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleVenue simpleVenue = 1;
 * @return {?proto.auth.SimpleVenue}
 */
proto.auth.Venue.prototype.getSimplevenue = function() {
  return /** @type{?proto.auth.SimpleVenue} */ (
    jspb.Message.getWrapperField(this, proto.auth.SimpleVenue, 1));
};


/**
 * @param {?proto.auth.SimpleVenue|undefined} value
 * @return {!proto.auth.Venue} returns this
*/
proto.auth.Venue.prototype.setSimplevenue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Venue} returns this
 */
proto.auth.Venue.prototype.clearSimplevenue = function() {
  return this.setSimplevenue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Venue.prototype.hasSimplevenue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Image bigImage = 11;
 * @return {?proto.auth.Image}
 */
proto.auth.Venue.prototype.getBigimage = function() {
  return /** @type{?proto.auth.Image} */ (
    jspb.Message.getWrapperField(this, proto.auth.Image, 11));
};


/**
 * @param {?proto.auth.Image|undefined} value
 * @return {!proto.auth.Venue} returns this
*/
proto.auth.Venue.prototype.setBigimage = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Venue} returns this
 */
proto.auth.Venue.prototype.clearBigimage = function() {
  return this.setBigimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Venue.prototype.hasBigimage = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    img: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Image}
 */
proto.auth.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Image;
  return proto.auth.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Image}
 */
proto.auth.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImg(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string img = 1;
 * @return {string}
 */
proto.auth.Image.prototype.getImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Image} returns this
 */
proto.auth.Image.prototype.setImg = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.auth.Image.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Image} returns this
 */
proto.auth.Image.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.auth.Image.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Image} returns this
 */
proto.auth.Image.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.SimpleSeatingPlanList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SimpleSeatingPlanList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SimpleSeatingPlanList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SimpleSeatingPlanList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleSeatingPlanList.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatingplanlistList: jspb.Message.toObjectList(msg.getSeatingplanlistList(),
    proto.auth.SimpleSeatingPlan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SimpleSeatingPlanList}
 */
proto.auth.SimpleSeatingPlanList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SimpleSeatingPlanList;
  return proto.auth.SimpleSeatingPlanList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SimpleSeatingPlanList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SimpleSeatingPlanList}
 */
proto.auth.SimpleSeatingPlanList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.SimpleSeatingPlan;
      reader.readMessage(value,proto.auth.SimpleSeatingPlan.deserializeBinaryFromReader);
      msg.addSeatingplanlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SimpleSeatingPlanList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SimpleSeatingPlanList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SimpleSeatingPlanList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleSeatingPlanList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatingplanlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.SimpleSeatingPlan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimpleSeatingPlan seatingPlanList = 1;
 * @return {!Array<!proto.auth.SimpleSeatingPlan>}
 */
proto.auth.SimpleSeatingPlanList.prototype.getSeatingplanlistList = function() {
  return /** @type{!Array<!proto.auth.SimpleSeatingPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.SimpleSeatingPlan, 1));
};


/**
 * @param {!Array<!proto.auth.SimpleSeatingPlan>} value
 * @return {!proto.auth.SimpleSeatingPlanList} returns this
*/
proto.auth.SimpleSeatingPlanList.prototype.setSeatingplanlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.SimpleSeatingPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.SimpleSeatingPlan}
 */
proto.auth.SimpleSeatingPlanList.prototype.addSeatingplanlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.SimpleSeatingPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SimpleSeatingPlanList} returns this
 */
proto.auth.SimpleSeatingPlanList.prototype.clearSeatingplanlistList = function() {
  return this.setSeatingplanlistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.SeatingPlanList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SeatingPlanList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SeatingPlanList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SeatingPlanList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SeatingPlanList.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatingplanlistList: jspb.Message.toObjectList(msg.getSeatingplanlistList(),
    proto.auth.SeatingPlan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SeatingPlanList}
 */
proto.auth.SeatingPlanList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SeatingPlanList;
  return proto.auth.SeatingPlanList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SeatingPlanList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SeatingPlanList}
 */
proto.auth.SeatingPlanList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.SeatingPlan;
      reader.readMessage(value,proto.auth.SeatingPlan.deserializeBinaryFromReader);
      msg.addSeatingplanlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SeatingPlanList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SeatingPlanList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SeatingPlanList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SeatingPlanList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatingplanlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.SeatingPlan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatingPlan seatingPlanList = 1;
 * @return {!Array<!proto.auth.SeatingPlan>}
 */
proto.auth.SeatingPlanList.prototype.getSeatingplanlistList = function() {
  return /** @type{!Array<!proto.auth.SeatingPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.SeatingPlan, 1));
};


/**
 * @param {!Array<!proto.auth.SeatingPlan>} value
 * @return {!proto.auth.SeatingPlanList} returns this
*/
proto.auth.SeatingPlanList.prototype.setSeatingplanlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.SeatingPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.SeatingPlan}
 */
proto.auth.SeatingPlanList.prototype.addSeatingplanlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.SeatingPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SeatingPlanList} returns this
 */
proto.auth.SeatingPlanList.prototype.clearSeatingplanlistList = function() {
  return this.setSeatingplanlistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.SimpleSeatingPlan.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SimpleSeatingPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SimpleSeatingPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SimpleSeatingPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleSeatingPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    venueid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    venuename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 4, ""),
    placement: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    categorylistList: jspb.Message.toObjectList(msg.getCategorylistList(),
    proto.auth.Category.toObject, includeInstance),
    categorylimitlistList: jspb.Message.toObjectList(msg.getCategorylimitlistList(),
    proto.auth.CategoryLimit.toObject, includeInstance),
    splexists: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    owner: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SimpleSeatingPlan}
 */
proto.auth.SimpleSeatingPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SimpleSeatingPlan;
  return proto.auth.SimpleSeatingPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SimpleSeatingPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SimpleSeatingPlan}
 */
proto.auth.SimpleSeatingPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVenueid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenuename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlacement(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = new proto.auth.Category;
      reader.readMessage(value,proto.auth.Category.deserializeBinaryFromReader);
      msg.addCategorylist(value);
      break;
    case 8:
      var value = new proto.auth.CategoryLimit;
      reader.readMessage(value,proto.auth.CategoryLimit.deserializeBinaryFromReader);
      msg.addCategorylimitlist(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSplexists(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SimpleSeatingPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SimpleSeatingPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SimpleSeatingPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleSeatingPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVenueid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getVenuename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlacement();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCategorylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.auth.Category.serializeBinaryToWriter
    );
  }
  f = message.getCategorylimitlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.auth.CategoryLimit.serializeBinaryToWriter
    );
  }
  f = message.getSplexists();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getOwner();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.SimpleSeatingPlan.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 venueId = 2;
 * @return {number}
 */
proto.auth.SimpleSeatingPlan.prototype.getVenueid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.setVenueid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string venueName = 3;
 * @return {string}
 */
proto.auth.SimpleSeatingPlan.prototype.getVenuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.setVenuename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string currency = 4;
 * @return {string}
 */
proto.auth.SimpleSeatingPlan.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool placement = 5;
 * @return {boolean}
 */
proto.auth.SimpleSeatingPlan.prototype.getPlacement = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.setPlacement = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.auth.SimpleSeatingPlan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Category categoryList = 7;
 * @return {!Array<!proto.auth.Category>}
 */
proto.auth.SimpleSeatingPlan.prototype.getCategorylistList = function() {
  return /** @type{!Array<!proto.auth.Category>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Category, 7));
};


/**
 * @param {!Array<!proto.auth.Category>} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
*/
proto.auth.SimpleSeatingPlan.prototype.setCategorylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.auth.Category=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Category}
 */
proto.auth.SimpleSeatingPlan.prototype.addCategorylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.auth.Category, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.clearCategorylistList = function() {
  return this.setCategorylistList([]);
};


/**
 * repeated CategoryLimit categoryLimitList = 8;
 * @return {!Array<!proto.auth.CategoryLimit>}
 */
proto.auth.SimpleSeatingPlan.prototype.getCategorylimitlistList = function() {
  return /** @type{!Array<!proto.auth.CategoryLimit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.CategoryLimit, 8));
};


/**
 * @param {!Array<!proto.auth.CategoryLimit>} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
*/
proto.auth.SimpleSeatingPlan.prototype.setCategorylimitlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.auth.CategoryLimit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.CategoryLimit}
 */
proto.auth.SimpleSeatingPlan.prototype.addCategorylimitlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.auth.CategoryLimit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.clearCategorylimitlistList = function() {
  return this.setCategorylimitlistList([]);
};


/**
 * optional bool splExists = 10;
 * @return {boolean}
 */
proto.auth.SimpleSeatingPlan.prototype.getSplexists = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.setSplexists = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool owner = 11;
 * @return {boolean}
 */
proto.auth.SimpleSeatingPlan.prototype.getOwner = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.SimpleSeatingPlan} returns this
 */
proto.auth.SimpleSeatingPlan.prototype.setOwner = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SeatingPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SeatingPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SeatingPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SeatingPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    simpleseatingplan: (f = msg.getSimpleseatingplan()) && proto.auth.SimpleSeatingPlan.toObject(includeInstance, f),
    svgzip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    png: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SeatingPlan}
 */
proto.auth.SeatingPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SeatingPlan;
  return proto.auth.SeatingPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SeatingPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SeatingPlan}
 */
proto.auth.SeatingPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.SimpleSeatingPlan;
      reader.readMessage(value,proto.auth.SimpleSeatingPlan.deserializeBinaryFromReader);
      msg.setSimpleseatingplan(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSvgzip(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SeatingPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SeatingPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SeatingPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SeatingPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimpleseatingplan();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.auth.SimpleSeatingPlan.serializeBinaryToWriter
    );
  }
  f = message.getSvgzip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPng();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional SimpleSeatingPlan simpleSeatingPlan = 1;
 * @return {?proto.auth.SimpleSeatingPlan}
 */
proto.auth.SeatingPlan.prototype.getSimpleseatingplan = function() {
  return /** @type{?proto.auth.SimpleSeatingPlan} */ (
    jspb.Message.getWrapperField(this, proto.auth.SimpleSeatingPlan, 1));
};


/**
 * @param {?proto.auth.SimpleSeatingPlan|undefined} value
 * @return {!proto.auth.SeatingPlan} returns this
*/
proto.auth.SeatingPlan.prototype.setSimpleseatingplan = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.SeatingPlan} returns this
 */
proto.auth.SeatingPlan.prototype.clearSimpleseatingplan = function() {
  return this.setSimpleseatingplan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.SeatingPlan.prototype.hasSimpleseatingplan = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string svgZip = 2;
 * @return {string}
 */
proto.auth.SeatingPlan.prototype.getSvgzip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SeatingPlan} returns this
 */
proto.auth.SeatingPlan.prototype.setSvgzip = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string png = 3;
 * @return {string}
 */
proto.auth.SeatingPlan.prototype.getPng = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SeatingPlan} returns this
 */
proto.auth.SeatingPlan.prototype.setPng = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Point}
 */
proto.auth.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Point;
  return proto.auth.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Point}
 */
proto.auth.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.auth.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Point} returns this
 */
proto.auth.Point.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.auth.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Point} returns this
 */
proto.auth.Point.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SeatData.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SeatData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SeatData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SeatData.toObject = function(includeInstance, msg) {
  var f, obj = {
    coodrinates: (f = msg.getCoodrinates()) && proto.auth.Point.toObject(includeInstance, f),
    seatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sector: jspb.Message.getFieldWithDefault(msg, 3, ""),
    row: jspb.Message.getFieldWithDefault(msg, 4, ""),
    number: jspb.Message.getFieldWithDefault(msg, 5, ""),
    categoryid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SeatData}
 */
proto.auth.SeatData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SeatData;
  return proto.auth.SeatData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SeatData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SeatData}
 */
proto.auth.SeatData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.Point;
      reader.readMessage(value,proto.auth.Point.deserializeBinaryFromReader);
      msg.setCoodrinates(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeatid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSector(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRow(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCategoryid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SeatData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SeatData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SeatData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SeatData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoodrinates();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.auth.Point.serializeBinaryToWriter
    );
  }
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSector();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRow();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCategoryid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional Point coodrinates = 1;
 * @return {?proto.auth.Point}
 */
proto.auth.SeatData.prototype.getCoodrinates = function() {
  return /** @type{?proto.auth.Point} */ (
    jspb.Message.getWrapperField(this, proto.auth.Point, 1));
};


/**
 * @param {?proto.auth.Point|undefined} value
 * @return {!proto.auth.SeatData} returns this
*/
proto.auth.SeatData.prototype.setCoodrinates = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.SeatData} returns this
 */
proto.auth.SeatData.prototype.clearCoodrinates = function() {
  return this.setCoodrinates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.SeatData.prototype.hasCoodrinates = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 seatId = 2;
 * @return {number}
 */
proto.auth.SeatData.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SeatData} returns this
 */
proto.auth.SeatData.prototype.setSeatid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string sector = 3;
 * @return {string}
 */
proto.auth.SeatData.prototype.getSector = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SeatData} returns this
 */
proto.auth.SeatData.prototype.setSector = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string row = 4;
 * @return {string}
 */
proto.auth.SeatData.prototype.getRow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SeatData} returns this
 */
proto.auth.SeatData.prototype.setRow = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string number = 5;
 * @return {string}
 */
proto.auth.SeatData.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SeatData} returns this
 */
proto.auth.SeatData.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 categoryId = 6;
 * @return {number}
 */
proto.auth.SeatData.prototype.getCategoryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SeatData} returns this
 */
proto.auth.SeatData.prototype.setCategoryid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.GetSeatingPlanFullData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.GetSeatingPlanFullData.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.GetSeatingPlanFullData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.GetSeatingPlanFullData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GetSeatingPlanFullData.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatingplan: (f = msg.getSeatingplan()) && proto.auth.SeatingPlan.toObject(includeInstance, f),
    seatdatalistList: jspb.Message.toObjectList(msg.getSeatdatalistList(),
    proto.auth.SeatData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.GetSeatingPlanFullData}
 */
proto.auth.GetSeatingPlanFullData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.GetSeatingPlanFullData;
  return proto.auth.GetSeatingPlanFullData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.GetSeatingPlanFullData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.GetSeatingPlanFullData}
 */
proto.auth.GetSeatingPlanFullData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.SeatingPlan;
      reader.readMessage(value,proto.auth.SeatingPlan.deserializeBinaryFromReader);
      msg.setSeatingplan(value);
      break;
    case 2:
      var value = new proto.auth.SeatData;
      reader.readMessage(value,proto.auth.SeatData.deserializeBinaryFromReader);
      msg.addSeatdatalist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.GetSeatingPlanFullData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.GetSeatingPlanFullData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.GetSeatingPlanFullData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GetSeatingPlanFullData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatingplan();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.auth.SeatingPlan.serializeBinaryToWriter
    );
  }
  f = message.getSeatdatalistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.auth.SeatData.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeatingPlan seatingPlan = 1;
 * @return {?proto.auth.SeatingPlan}
 */
proto.auth.GetSeatingPlanFullData.prototype.getSeatingplan = function() {
  return /** @type{?proto.auth.SeatingPlan} */ (
    jspb.Message.getWrapperField(this, proto.auth.SeatingPlan, 1));
};


/**
 * @param {?proto.auth.SeatingPlan|undefined} value
 * @return {!proto.auth.GetSeatingPlanFullData} returns this
*/
proto.auth.GetSeatingPlanFullData.prototype.setSeatingplan = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GetSeatingPlanFullData} returns this
 */
proto.auth.GetSeatingPlanFullData.prototype.clearSeatingplan = function() {
  return this.setSeatingplan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GetSeatingPlanFullData.prototype.hasSeatingplan = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SeatData seatDataList = 2;
 * @return {!Array<!proto.auth.SeatData>}
 */
proto.auth.GetSeatingPlanFullData.prototype.getSeatdatalistList = function() {
  return /** @type{!Array<!proto.auth.SeatData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.SeatData, 2));
};


/**
 * @param {!Array<!proto.auth.SeatData>} value
 * @return {!proto.auth.GetSeatingPlanFullData} returns this
*/
proto.auth.GetSeatingPlanFullData.prototype.setSeatdatalistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.auth.SeatData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.SeatData}
 */
proto.auth.GetSeatingPlanFullData.prototype.addSeatdatalist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.auth.SeatData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.GetSeatingPlanFullData} returns this
 */
proto.auth.GetSeatingPlanFullData.prototype.clearSeatdatalistList = function() {
  return this.setSeatdatalistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Category.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Category.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Category} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Category.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    placement: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seatsnumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    initprice: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Category}
 */
proto.auth.Category.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Category;
  return proto.auth.Category.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Category} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Category}
 */
proto.auth.Category.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlacement(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeatsnumber(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInitprice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Category.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Category.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Category} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Category.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPlacement();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeatsnumber();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.Category.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Category} returns this
 */
proto.auth.Category.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool placement = 2;
 * @return {boolean}
 */
proto.auth.Category.prototype.getPlacement = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.Category} returns this
 */
proto.auth.Category.prototype.setPlacement = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.auth.Category.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.Category} returns this
 */
proto.auth.Category.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 seatsNumber = 4;
 * @return {number}
 */
proto.auth.Category.prototype.getSeatsnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Category} returns this
 */
proto.auth.Category.prototype.setSeatsnumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double initPrice = 5;
 * @return {number}
 */
proto.auth.Category.prototype.getInitprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.auth.Category} returns this
 */
proto.auth.Category.prototype.setInitprice = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.auth.Category} returns this
 */
proto.auth.Category.prototype.clearInitprice = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Category.prototype.hasInitprice = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.CategoryLimit.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.CategoryLimit.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.CategoryLimit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.CategoryLimit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CategoryLimit.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    categorylistList: jspb.Message.toObjectList(msg.getCategorylistList(),
    proto.auth.Category.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.CategoryLimit}
 */
proto.auth.CategoryLimit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.CategoryLimit;
  return proto.auth.CategoryLimit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.CategoryLimit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.CategoryLimit}
 */
proto.auth.CategoryLimit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.auth.Category;
      reader.readMessage(value,proto.auth.Category.deserializeBinaryFromReader);
      msg.addCategorylist(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.CategoryLimit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.CategoryLimit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.CategoryLimit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CategoryLimit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCategorylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.auth.Category.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.CategoryLimit.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.CategoryLimit} returns this
 */
proto.auth.CategoryLimit.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Category categoryList = 2;
 * @return {!Array<!proto.auth.Category>}
 */
proto.auth.CategoryLimit.prototype.getCategorylistList = function() {
  return /** @type{!Array<!proto.auth.Category>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Category, 2));
};


/**
 * @param {!Array<!proto.auth.Category>} value
 * @return {!proto.auth.CategoryLimit} returns this
*/
proto.auth.CategoryLimit.prototype.setCategorylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.auth.Category=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Category}
 */
proto.auth.CategoryLimit.prototype.addCategorylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.auth.Category, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.CategoryLimit} returns this
 */
proto.auth.CategoryLimit.prototype.clearCategorylistList = function() {
  return this.setCategorylistList([]);
};


/**
 * optional uint64 limit = 3;
 * @return {number}
 */
proto.auth.CategoryLimit.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.CategoryLimit} returns this
 */
proto.auth.CategoryLimit.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.SimpleActionList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SimpleActionList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SimpleActionList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SimpleActionList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleActionList.toObject = function(includeInstance, msg) {
  var f, obj = {
    simpleactionlistList: jspb.Message.toObjectList(msg.getSimpleactionlistList(),
    proto.auth.SimpleAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SimpleActionList}
 */
proto.auth.SimpleActionList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SimpleActionList;
  return proto.auth.SimpleActionList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SimpleActionList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SimpleActionList}
 */
proto.auth.SimpleActionList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.SimpleAction;
      reader.readMessage(value,proto.auth.SimpleAction.deserializeBinaryFromReader);
      msg.addSimpleactionlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SimpleActionList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SimpleActionList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SimpleActionList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleActionList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimpleactionlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.SimpleAction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimpleAction simpleActionList = 1;
 * @return {!Array<!proto.auth.SimpleAction>}
 */
proto.auth.SimpleActionList.prototype.getSimpleactionlistList = function() {
  return /** @type{!Array<!proto.auth.SimpleAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.SimpleAction, 1));
};


/**
 * @param {!Array<!proto.auth.SimpleAction>} value
 * @return {!proto.auth.SimpleActionList} returns this
*/
proto.auth.SimpleActionList.prototype.setSimpleactionlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.SimpleAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.SimpleAction}
 */
proto.auth.SimpleActionList.prototype.addSimpleactionlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.SimpleAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SimpleActionList} returns this
 */
proto.auth.SimpleActionList.prototype.clearSimpleactionlistList = function() {
  return this.setSimpleactionlistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.ActionList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.ActionList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.ActionList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.ActionList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ActionList.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionlistList: jspb.Message.toObjectList(msg.getActionlistList(),
    proto.auth.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.ActionList}
 */
proto.auth.ActionList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.ActionList;
  return proto.auth.ActionList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.ActionList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.ActionList}
 */
proto.auth.ActionList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.Action;
      reader.readMessage(value,proto.auth.Action.deserializeBinaryFromReader);
      msg.addActionlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.ActionList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.ActionList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.ActionList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ActionList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.Action.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actionList = 1;
 * @return {!Array<!proto.auth.Action>}
 */
proto.auth.ActionList.prototype.getActionlistList = function() {
  return /** @type{!Array<!proto.auth.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Action, 1));
};


/**
 * @param {!Array<!proto.auth.Action>} value
 * @return {!proto.auth.ActionList} returns this
*/
proto.auth.ActionList.prototype.setActionlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Action}
 */
proto.auth.ActionList.prototype.addActionlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ActionList} returns this
 */
proto.auth.ActionList.prototype.clearActionlistList = function() {
  return this.setActionlistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.SimpleAction.repeatedFields_ = [15,21,22];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SimpleAction.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SimpleAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SimpleAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    organizerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    organizername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    kind: (f = msg.getKind()) && proto.auth.Kind.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    fullname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 7, 0),
    postername: jspb.Message.getFieldWithDefault(msg, 8, ""),
    posterdesc: jspb.Message.getFieldWithDefault(msg, 9, ""),
    booklettype: (f = msg.getBooklettype()) && proto.auth.BookletType.toObject(includeInstance, f),
    rating: jspb.Message.getFieldWithDefault(msg, 13, 0),
    age: jspb.Message.getFieldWithDefault(msg, 14, 0),
    genresetList: jspb.Message.toObjectList(msg.getGenresetList(),
    proto.auth.Genre.toObject, includeInstance),
    legalowner: jspb.Message.getFieldWithDefault(msg, 16, ""),
    legalownerinn: jspb.Message.getFieldWithDefault(msg, 17, ""),
    legalownerphone: jspb.Message.getFieldWithDefault(msg, 18, ""),
    minchargepercent: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    kdp: jspb.Message.getFieldWithDefault(msg, 20, 0),
    cityidsetList: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f,
    venueidsetList: (f = jspb.Message.getRepeatedField(msg, 22)) == null ? undefined : f,
    actual: jspb.Message.getBooleanFieldWithDefault(msg, 23, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SimpleAction}
 */
proto.auth.SimpleAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SimpleAction;
  return proto.auth.SimpleAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SimpleAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SimpleAction}
 */
proto.auth.SimpleAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrganizerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizername(value);
      break;
    case 4:
      var value = new proto.auth.Kind;
      reader.readMessage(value,proto.auth.Kind.deserializeBinaryFromReader);
      msg.setKind(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDuration(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostername(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosterdesc(value);
      break;
    case 12:
      var value = new proto.auth.BookletType;
      reader.readMessage(value,proto.auth.BookletType.deserializeBinaryFromReader);
      msg.setBooklettype(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRating(value);
      break;
    case 14:
      var value = /** @type {!proto.auth.Age} */ (reader.readEnum());
      msg.setAge(value);
      break;
    case 15:
      var value = new proto.auth.Genre;
      reader.readMessage(value,proto.auth.Genre.deserializeBinaryFromReader);
      msg.addGenreset(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLegalowner(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setLegalownerinn(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setLegalownerphone(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinchargepercent(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setKdp(value);
      break;
    case 21:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCityidset(values[i]);
      }
      break;
    case 22:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVenueidset(values[i]);
      }
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActual(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SimpleAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SimpleAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SimpleAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SimpleAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOrganizerid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOrganizername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKind();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.auth.Kind.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getPostername();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPosterdesc();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBooklettype();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.auth.BookletType.serializeBinaryToWriter
    );
  }
  f = message.getRating();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getAge();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getGenresetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.auth.Genre.serializeBinaryToWriter
    );
  }
  f = message.getLegalowner();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getLegalownerinn();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getLegalownerphone();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getMinchargepercent();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getCityidsetList();
  if (f.length > 0) {
    writer.writePackedUint64(
      21,
      f
    );
  }
  f = message.getVenueidsetList();
  if (f.length > 0) {
    writer.writePackedUint64(
      22,
      f
    );
  }
  f = message.getActual();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.SimpleAction.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 organizerId = 2;
 * @return {number}
 */
proto.auth.SimpleAction.prototype.getOrganizerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setOrganizerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string organizerName = 3;
 * @return {string}
 */
proto.auth.SimpleAction.prototype.getOrganizername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setOrganizername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Kind kind = 4;
 * @return {?proto.auth.Kind}
 */
proto.auth.SimpleAction.prototype.getKind = function() {
  return /** @type{?proto.auth.Kind} */ (
    jspb.Message.getWrapperField(this, proto.auth.Kind, 4));
};


/**
 * @param {?proto.auth.Kind|undefined} value
 * @return {!proto.auth.SimpleAction} returns this
*/
proto.auth.SimpleAction.prototype.setKind = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.clearKind = function() {
  return this.setKind(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.SimpleAction.prototype.hasKind = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.auth.SimpleAction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string fullName = 6;
 * @return {string}
 */
proto.auth.SimpleAction.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setFullname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 duration = 7;
 * @return {number}
 */
proto.auth.SimpleAction.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string posterName = 8;
 * @return {string}
 */
proto.auth.SimpleAction.prototype.getPostername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setPostername = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string posterDesc = 9;
 * @return {string}
 */
proto.auth.SimpleAction.prototype.getPosterdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setPosterdesc = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional BookletType bookletType = 12;
 * @return {?proto.auth.BookletType}
 */
proto.auth.SimpleAction.prototype.getBooklettype = function() {
  return /** @type{?proto.auth.BookletType} */ (
    jspb.Message.getWrapperField(this, proto.auth.BookletType, 12));
};


/**
 * @param {?proto.auth.BookletType|undefined} value
 * @return {!proto.auth.SimpleAction} returns this
*/
proto.auth.SimpleAction.prototype.setBooklettype = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.clearBooklettype = function() {
  return this.setBooklettype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.SimpleAction.prototype.hasBooklettype = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint64 rating = 13;
 * @return {number}
 */
proto.auth.SimpleAction.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setRating = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional Age age = 14;
 * @return {!proto.auth.Age}
 */
proto.auth.SimpleAction.prototype.getAge = function() {
  return /** @type {!proto.auth.Age} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.auth.Age} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setAge = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * repeated Genre genreSet = 15;
 * @return {!Array<!proto.auth.Genre>}
 */
proto.auth.SimpleAction.prototype.getGenresetList = function() {
  return /** @type{!Array<!proto.auth.Genre>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.Genre, 15));
};


/**
 * @param {!Array<!proto.auth.Genre>} value
 * @return {!proto.auth.SimpleAction} returns this
*/
proto.auth.SimpleAction.prototype.setGenresetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.auth.Genre=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.Genre}
 */
proto.auth.SimpleAction.prototype.addGenreset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.auth.Genre, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.clearGenresetList = function() {
  return this.setGenresetList([]);
};


/**
 * optional string legalOwner = 16;
 * @return {string}
 */
proto.auth.SimpleAction.prototype.getLegalowner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setLegalowner = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string legalOwnerInn = 17;
 * @return {string}
 */
proto.auth.SimpleAction.prototype.getLegalownerinn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setLegalownerinn = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string legalOwnerPhone = 18;
 * @return {string}
 */
proto.auth.SimpleAction.prototype.getLegalownerphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setLegalownerphone = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional double minChargePercent = 19;
 * @return {number}
 */
proto.auth.SimpleAction.prototype.getMinchargepercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setMinchargepercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional uint64 kdp = 20;
 * @return {number}
 */
proto.auth.SimpleAction.prototype.getKdp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setKdp = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.clearKdp = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.SimpleAction.prototype.hasKdp = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * repeated uint64 cityIdSet = 21;
 * @return {!Array<number>}
 */
proto.auth.SimpleAction.prototype.getCityidsetList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setCityidsetList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.addCityidset = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.clearCityidsetList = function() {
  return this.setCityidsetList([]);
};


/**
 * repeated uint64 venueIdSet = 22;
 * @return {!Array<number>}
 */
proto.auth.SimpleAction.prototype.getVenueidsetList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 22));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setVenueidsetList = function(value) {
  return jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.addVenueidset = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.clearVenueidsetList = function() {
  return this.setVenueidsetList([]);
};


/**
 * optional bool actual = 23;
 * @return {boolean}
 */
proto.auth.SimpleAction.prototype.getActual = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.SimpleAction} returns this
 */
proto.auth.SimpleAction.prototype.setActual = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    simpleaction: (f = msg.getSimpleaction()) && proto.auth.SimpleAction.toObject(includeInstance, f),
    smallimage: (f = msg.getSmallimage()) && proto.auth.Image.toObject(includeInstance, f),
    bigimage: (f = msg.getBigimage()) && proto.auth.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Action}
 */
proto.auth.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Action;
  return proto.auth.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Action}
 */
proto.auth.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.SimpleAction;
      reader.readMessage(value,proto.auth.SimpleAction.deserializeBinaryFromReader);
      msg.setSimpleaction(value);
      break;
    case 10:
      var value = new proto.auth.Image;
      reader.readMessage(value,proto.auth.Image.deserializeBinaryFromReader);
      msg.setSmallimage(value);
      break;
    case 11:
      var value = new proto.auth.Image;
      reader.readMessage(value,proto.auth.Image.deserializeBinaryFromReader);
      msg.setBigimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimpleaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.auth.SimpleAction.serializeBinaryToWriter
    );
  }
  f = message.getSmallimage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.auth.Image.serializeBinaryToWriter
    );
  }
  f = message.getBigimage();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.auth.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleAction simpleAction = 1;
 * @return {?proto.auth.SimpleAction}
 */
proto.auth.Action.prototype.getSimpleaction = function() {
  return /** @type{?proto.auth.SimpleAction} */ (
    jspb.Message.getWrapperField(this, proto.auth.SimpleAction, 1));
};


/**
 * @param {?proto.auth.SimpleAction|undefined} value
 * @return {!proto.auth.Action} returns this
*/
proto.auth.Action.prototype.setSimpleaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Action} returns this
 */
proto.auth.Action.prototype.clearSimpleaction = function() {
  return this.setSimpleaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Action.prototype.hasSimpleaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Image smallImage = 10;
 * @return {?proto.auth.Image}
 */
proto.auth.Action.prototype.getSmallimage = function() {
  return /** @type{?proto.auth.Image} */ (
    jspb.Message.getWrapperField(this, proto.auth.Image, 10));
};


/**
 * @param {?proto.auth.Image|undefined} value
 * @return {!proto.auth.Action} returns this
*/
proto.auth.Action.prototype.setSmallimage = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Action} returns this
 */
proto.auth.Action.prototype.clearSmallimage = function() {
  return this.setSmallimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Action.prototype.hasSmallimage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Image bigImage = 11;
 * @return {?proto.auth.Image}
 */
proto.auth.Action.prototype.getBigimage = function() {
  return /** @type{?proto.auth.Image} */ (
    jspb.Message.getWrapperField(this, proto.auth.Image, 11));
};


/**
 * @param {?proto.auth.Image|undefined} value
 * @return {!proto.auth.Action} returns this
*/
proto.auth.Action.prototype.setBigimage = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Action} returns this
 */
proto.auth.Action.prototype.clearBigimage = function() {
  return this.setBigimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Action.prototype.hasBigimage = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.ActionEventList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.ActionEventList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.ActionEventList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.ActionEventList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ActionEventList.toObject = function(includeInstance, msg) {
  var f, obj = {
    actioneventlistList: jspb.Message.toObjectList(msg.getActioneventlistList(),
    proto.auth.ActionEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.ActionEventList}
 */
proto.auth.ActionEventList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.ActionEventList;
  return proto.auth.ActionEventList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.ActionEventList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.ActionEventList}
 */
proto.auth.ActionEventList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.ActionEvent;
      reader.readMessage(value,proto.auth.ActionEvent.deserializeBinaryFromReader);
      msg.addActioneventlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.ActionEventList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.ActionEventList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.ActionEventList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ActionEventList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActioneventlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.ActionEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ActionEvent actionEventList = 1;
 * @return {!Array<!proto.auth.ActionEvent>}
 */
proto.auth.ActionEventList.prototype.getActioneventlistList = function() {
  return /** @type{!Array<!proto.auth.ActionEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.ActionEvent, 1));
};


/**
 * @param {!Array<!proto.auth.ActionEvent>} value
 * @return {!proto.auth.ActionEventList} returns this
*/
proto.auth.ActionEventList.prototype.setActioneventlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.ActionEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.ActionEvent}
 */
proto.auth.ActionEventList.prototype.addActioneventlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.ActionEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ActionEventList} returns this
 */
proto.auth.ActionEventList.prototype.clearActioneventlistList = function() {
  return this.setActioneventlistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.ActionEvent.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.ActionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.ActionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.ActionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ActionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    planid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    planname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    actionid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    actionname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    quota: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    categorypricelistList: jspb.Message.toObjectList(msg.getCategorypricelistList(),
    proto.auth.CategoryPrice.toObject, includeInstance),
    tariffplanlistList: jspb.Message.toObjectList(msg.getTariffplanlistList(),
    proto.auth.TariffPlan.toObject, includeInstance),
    showtime: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sellstarttime: jspb.Message.getFieldWithDefault(msg, 11, ""),
    sellendtime: jspb.Message.getFieldWithDefault(msg, 12, ""),
    etickets: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    fullnamerequired: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    phonerequired: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    fanidrequired: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    ticketrefundallowed: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    ticketreissueallowed: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    maxreservetime: (f = msg.getMaxreservetime()) && struct_pb.NullableUInt64.toObject(includeInstance, f),
    maxtickets: (f = msg.getMaxtickets()) && struct_pb.NullableUInt64.toObject(includeInstance, f),
    vat: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    sellenabled: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    placementplan: jspb.Message.getBooleanFieldWithDefault(msg, 23, false),
    gatewayevent: (f = msg.getGatewayevent()) && proto.auth.GatewayEvent.toObject(includeInstance, f),
    archival: jspb.Message.getBooleanFieldWithDefault(msg, 25, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.ActionEvent}
 */
proto.auth.ActionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.ActionEvent;
  return proto.auth.ActionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.ActionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.ActionEvent}
 */
proto.auth.ActionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlanid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActionid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQuota(value);
      break;
    case 8:
      var value = new proto.auth.CategoryPrice;
      reader.readMessage(value,proto.auth.CategoryPrice.deserializeBinaryFromReader);
      msg.addCategorypricelist(value);
      break;
    case 9:
      var value = new proto.auth.TariffPlan;
      reader.readMessage(value,proto.auth.TariffPlan.deserializeBinaryFromReader);
      msg.addTariffplanlist(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setShowtime(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSellstarttime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSellendtime(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEtickets(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFullnamerequired(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPhonerequired(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFanidrequired(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTicketrefundallowed(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTicketreissueallowed(value);
      break;
    case 19:
      var value = new struct_pb.NullableUInt64;
      reader.readMessage(value,struct_pb.NullableUInt64.deserializeBinaryFromReader);
      msg.setMaxreservetime(value);
      break;
    case 20:
      var value = new struct_pb.NullableUInt64;
      reader.readMessage(value,struct_pb.NullableUInt64.deserializeBinaryFromReader);
      msg.setMaxtickets(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVat(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSellenabled(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlacementplan(value);
      break;
    case 24:
      var value = new proto.auth.GatewayEvent;
      reader.readMessage(value,proto.auth.GatewayEvent.deserializeBinaryFromReader);
      msg.setGatewayevent(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setArchival(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.ActionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.ActionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.ActionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ActionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPlanid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPlanname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActionid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getActionname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getQuota();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getCategorypricelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.auth.CategoryPrice.serializeBinaryToWriter
    );
  }
  f = message.getTariffplanlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.auth.TariffPlan.serializeBinaryToWriter
    );
  }
  f = message.getShowtime();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSellstarttime();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSellendtime();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getEtickets();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getFullnamerequired();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getPhonerequired();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getFanidrequired();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getTicketrefundallowed();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getTicketreissueallowed();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getMaxreservetime();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      struct_pb.NullableUInt64.serializeBinaryToWriter
    );
  }
  f = message.getMaxtickets();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      struct_pb.NullableUInt64.serializeBinaryToWriter
    );
  }
  f = message.getVat();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getSellenabled();
  if (f) {
    writer.writeBool(
      22,
      f
    );
  }
  f = message.getPlacementplan();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = message.getGatewayevent();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.auth.GatewayEvent.serializeBinaryToWriter
    );
  }
  f = message.getArchival();
  if (f) {
    writer.writeBool(
      25,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.ActionEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 planId = 2;
 * @return {number}
 */
proto.auth.ActionEvent.prototype.getPlanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setPlanid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string planName = 3;
 * @return {string}
 */
proto.auth.ActionEvent.prototype.getPlanname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setPlanname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 actionId = 4;
 * @return {number}
 */
proto.auth.ActionEvent.prototype.getActionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setActionid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string actionName = 5;
 * @return {string}
 */
proto.auth.ActionEvent.prototype.getActionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setActionname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.auth.ActionEvent.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool quota = 7;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getQuota = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setQuota = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated CategoryPrice categoryPriceList = 8;
 * @return {!Array<!proto.auth.CategoryPrice>}
 */
proto.auth.ActionEvent.prototype.getCategorypricelistList = function() {
  return /** @type{!Array<!proto.auth.CategoryPrice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.CategoryPrice, 8));
};


/**
 * @param {!Array<!proto.auth.CategoryPrice>} value
 * @return {!proto.auth.ActionEvent} returns this
*/
proto.auth.ActionEvent.prototype.setCategorypricelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.auth.CategoryPrice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.CategoryPrice}
 */
proto.auth.ActionEvent.prototype.addCategorypricelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.auth.CategoryPrice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.clearCategorypricelistList = function() {
  return this.setCategorypricelistList([]);
};


/**
 * repeated TariffPlan tariffPlanList = 9;
 * @return {!Array<!proto.auth.TariffPlan>}
 */
proto.auth.ActionEvent.prototype.getTariffplanlistList = function() {
  return /** @type{!Array<!proto.auth.TariffPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.TariffPlan, 9));
};


/**
 * @param {!Array<!proto.auth.TariffPlan>} value
 * @return {!proto.auth.ActionEvent} returns this
*/
proto.auth.ActionEvent.prototype.setTariffplanlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.auth.TariffPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.TariffPlan}
 */
proto.auth.ActionEvent.prototype.addTariffplanlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.auth.TariffPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.clearTariffplanlistList = function() {
  return this.setTariffplanlistList([]);
};


/**
 * optional string showTime = 10;
 * @return {string}
 */
proto.auth.ActionEvent.prototype.getShowtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setShowtime = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string sellStartTime = 11;
 * @return {string}
 */
proto.auth.ActionEvent.prototype.getSellstarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setSellstarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string sellEndTime = 12;
 * @return {string}
 */
proto.auth.ActionEvent.prototype.getSellendtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setSellendtime = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool eTickets = 13;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getEtickets = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setEtickets = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool fullNameRequired = 14;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getFullnamerequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setFullnamerequired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool phoneRequired = 15;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getPhonerequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setPhonerequired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool fanIdRequired = 16;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getFanidrequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setFanidrequired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool ticketRefundAllowed = 17;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getTicketrefundallowed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setTicketrefundallowed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional bool ticketReissueAllowed = 18;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getTicketreissueallowed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setTicketreissueallowed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional NullableUInt64 maxReserveTime = 19;
 * @return {?proto.auth.NullableUInt64}
 */
proto.auth.ActionEvent.prototype.getMaxreservetime = function() {
  return /** @type{?proto.auth.NullableUInt64} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableUInt64, 19));
};


/**
 * @param {?proto.auth.NullableUInt64|undefined} value
 * @return {!proto.auth.ActionEvent} returns this
*/
proto.auth.ActionEvent.prototype.setMaxreservetime = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.clearMaxreservetime = function() {
  return this.setMaxreservetime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.hasMaxreservetime = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional NullableUInt64 maxTickets = 20;
 * @return {?proto.auth.NullableUInt64}
 */
proto.auth.ActionEvent.prototype.getMaxtickets = function() {
  return /** @type{?proto.auth.NullableUInt64} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableUInt64, 20));
};


/**
 * @param {?proto.auth.NullableUInt64|undefined} value
 * @return {!proto.auth.ActionEvent} returns this
*/
proto.auth.ActionEvent.prototype.setMaxtickets = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.clearMaxtickets = function() {
  return this.setMaxtickets(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.hasMaxtickets = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double vat = 21;
 * @return {number}
 */
proto.auth.ActionEvent.prototype.getVat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setVat = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional bool sellEnabled = 22;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getSellenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setSellenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 22, value);
};


/**
 * optional bool placementPlan = 23;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getPlacementplan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setPlacementplan = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};


/**
 * optional GatewayEvent gatewayEvent = 24;
 * @return {?proto.auth.GatewayEvent}
 */
proto.auth.ActionEvent.prototype.getGatewayevent = function() {
  return /** @type{?proto.auth.GatewayEvent} */ (
    jspb.Message.getWrapperField(this, proto.auth.GatewayEvent, 24));
};


/**
 * @param {?proto.auth.GatewayEvent|undefined} value
 * @return {!proto.auth.ActionEvent} returns this
*/
proto.auth.ActionEvent.prototype.setGatewayevent = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.clearGatewayevent = function() {
  return this.setGatewayevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.hasGatewayevent = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional bool archival = 25;
 * @return {boolean}
 */
proto.auth.ActionEvent.prototype.getArchival = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEvent} returns this
 */
proto.auth.ActionEvent.prototype.setArchival = function(value) {
  return jspb.Message.setProto3BooleanField(this, 25, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.EventSeatState.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.EventSeatState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.EventSeatState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.EventSeatState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.EventSeatState}
 */
proto.auth.EventSeatState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.EventSeatState;
  return proto.auth.EventSeatState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.EventSeatState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.EventSeatState}
 */
proto.auth.EventSeatState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.EventSeatState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.EventSeatState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.EventSeatState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.EventSeatState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.EventSeatState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.EventSeatState} returns this
 */
proto.auth.EventSeatState.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.auth.EventSeatState.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.EventSeatState} returns this
 */
proto.auth.EventSeatState.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.auth.EventSeatState.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.EventSeatState} returns this
 */
proto.auth.EventSeatState.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.SeatLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.SeatLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.SeatLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SeatLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    sector: jspb.Message.getFieldWithDefault(msg, 1, ""),
    row: jspb.Message.getFieldWithDefault(msg, 2, ""),
    number: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.SeatLocation}
 */
proto.auth.SeatLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.SeatLocation;
  return proto.auth.SeatLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.SeatLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.SeatLocation}
 */
proto.auth.SeatLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSector(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRow(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.SeatLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.SeatLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.SeatLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.SeatLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSector();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRow();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string sector = 1;
 * @return {string}
 */
proto.auth.SeatLocation.prototype.getSector = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SeatLocation} returns this
 */
proto.auth.SeatLocation.prototype.setSector = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string row = 2;
 * @return {string}
 */
proto.auth.SeatLocation.prototype.getRow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SeatLocation} returns this
 */
proto.auth.SeatLocation.prototype.setRow = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string number = 3;
 * @return {string}
 */
proto.auth.SeatLocation.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.SeatLocation} returns this
 */
proto.auth.SeatLocation.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.EventSeat.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.EventSeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.EventSeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.EventSeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    categoryprice: (f = msg.getCategoryprice()) && proto.auth.CategoryPrice.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.auth.EventSeatState.toObject(includeInstance, f),
    seatlocation: (f = msg.getSeatlocation()) && proto.auth.SeatLocation.toObject(includeInstance, f),
    barcode: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.EventSeat}
 */
proto.auth.EventSeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.EventSeat;
  return proto.auth.EventSeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.EventSeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.EventSeat}
 */
proto.auth.EventSeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.auth.CategoryPrice;
      reader.readMessage(value,proto.auth.CategoryPrice.deserializeBinaryFromReader);
      msg.setCategoryprice(value);
      break;
    case 3:
      var value = new proto.auth.EventSeatState;
      reader.readMessage(value,proto.auth.EventSeatState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 4:
      var value = new proto.auth.SeatLocation;
      reader.readMessage(value,proto.auth.SeatLocation.deserializeBinaryFromReader);
      msg.setSeatlocation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.EventSeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.EventSeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.EventSeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.EventSeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCategoryprice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.auth.CategoryPrice.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.auth.EventSeatState.serializeBinaryToWriter
    );
  }
  f = message.getSeatlocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.auth.SeatLocation.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.EventSeat.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.EventSeat} returns this
 */
proto.auth.EventSeat.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CategoryPrice categoryPrice = 2;
 * @return {?proto.auth.CategoryPrice}
 */
proto.auth.EventSeat.prototype.getCategoryprice = function() {
  return /** @type{?proto.auth.CategoryPrice} */ (
    jspb.Message.getWrapperField(this, proto.auth.CategoryPrice, 2));
};


/**
 * @param {?proto.auth.CategoryPrice|undefined} value
 * @return {!proto.auth.EventSeat} returns this
*/
proto.auth.EventSeat.prototype.setCategoryprice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.EventSeat} returns this
 */
proto.auth.EventSeat.prototype.clearCategoryprice = function() {
  return this.setCategoryprice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.EventSeat.prototype.hasCategoryprice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventSeatState state = 3;
 * @return {?proto.auth.EventSeatState}
 */
proto.auth.EventSeat.prototype.getState = function() {
  return /** @type{?proto.auth.EventSeatState} */ (
    jspb.Message.getWrapperField(this, proto.auth.EventSeatState, 3));
};


/**
 * @param {?proto.auth.EventSeatState|undefined} value
 * @return {!proto.auth.EventSeat} returns this
*/
proto.auth.EventSeat.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.EventSeat} returns this
 */
proto.auth.EventSeat.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.EventSeat.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SeatLocation seatLocation = 4;
 * @return {?proto.auth.SeatLocation}
 */
proto.auth.EventSeat.prototype.getSeatlocation = function() {
  return /** @type{?proto.auth.SeatLocation} */ (
    jspb.Message.getWrapperField(this, proto.auth.SeatLocation, 4));
};


/**
 * @param {?proto.auth.SeatLocation|undefined} value
 * @return {!proto.auth.EventSeat} returns this
*/
proto.auth.EventSeat.prototype.setSeatlocation = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.EventSeat} returns this
 */
proto.auth.EventSeat.prototype.clearSeatlocation = function() {
  return this.setSeatlocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.EventSeat.prototype.hasSeatlocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string barcode = 5;
 * @return {string}
 */
proto.auth.EventSeat.prototype.getBarcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.EventSeat} returns this
 */
proto.auth.EventSeat.prototype.setBarcode = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.auth.EventSeat} returns this
 */
proto.auth.EventSeat.prototype.clearBarcode = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.EventSeat.prototype.hasBarcode = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.ActionEventData.repeatedFields_ = [7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.ActionEventData.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.ActionEventData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.ActionEventData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ActionEventData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    svgdata: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mismatchedprice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mismatchedname: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mismatchedseat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    splexists: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    etsnotavailidsetList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    tariffplanlistList: jspb.Message.toObjectList(msg.getTariffplanlistList(),
    proto.auth.TariffPlan.toObject, includeInstance),
    categorypricelistList: jspb.Message.toObjectList(msg.getCategorypricelistList(),
    proto.auth.CategoryPrice.toObject, includeInstance),
    eventseatlistList: jspb.Message.toObjectList(msg.getEventseatlistList(),
    proto.auth.EventSeat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.ActionEventData}
 */
proto.auth.ActionEventData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.ActionEventData;
  return proto.auth.ActionEventData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.ActionEventData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.ActionEventData}
 */
proto.auth.ActionEventData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSvgdata(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMismatchedprice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMismatchedname(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMismatchedseat(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSplexists(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEtsnotavailidset(values[i]);
      }
      break;
    case 8:
      var value = new proto.auth.TariffPlan;
      reader.readMessage(value,proto.auth.TariffPlan.deserializeBinaryFromReader);
      msg.addTariffplanlist(value);
      break;
    case 9:
      var value = new proto.auth.CategoryPrice;
      reader.readMessage(value,proto.auth.CategoryPrice.deserializeBinaryFromReader);
      msg.addCategorypricelist(value);
      break;
    case 10:
      var value = new proto.auth.EventSeat;
      reader.readMessage(value,proto.auth.EventSeat.deserializeBinaryFromReader);
      msg.addEventseatlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.ActionEventData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.ActionEventData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.ActionEventData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.ActionEventData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMismatchedprice();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMismatchedname();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMismatchedseat();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSplexists();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getEtsnotavailidsetList();
  if (f.length > 0) {
    writer.writePackedUint64(
      7,
      f
    );
  }
  f = message.getTariffplanlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.auth.TariffPlan.serializeBinaryToWriter
    );
  }
  f = message.getCategorypricelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.auth.CategoryPrice.serializeBinaryToWriter
    );
  }
  f = message.getEventseatlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.auth.EventSeat.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.ActionEventData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string svgData = 2;
 * @return {string}
 */
proto.auth.ActionEventData.prototype.getSvgdata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.setSvgdata = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.clearSvgdata = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.ActionEventData.prototype.hasSvgdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 mismatchedPrice = 3;
 * @return {number}
 */
proto.auth.ActionEventData.prototype.getMismatchedprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.setMismatchedprice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 mismatchedName = 4;
 * @return {number}
 */
proto.auth.ActionEventData.prototype.getMismatchedname = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.setMismatchedname = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 mismatchedSeat = 5;
 * @return {number}
 */
proto.auth.ActionEventData.prototype.getMismatchedseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.setMismatchedseat = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool splExists = 6;
 * @return {boolean}
 */
proto.auth.ActionEventData.prototype.getSplexists = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.setSplexists = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated uint64 etsNotAvailIdSet = 7;
 * @return {!Array<number>}
 */
proto.auth.ActionEventData.prototype.getEtsnotavailidsetList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.setEtsnotavailidsetList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.addEtsnotavailidset = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.clearEtsnotavailidsetList = function() {
  return this.setEtsnotavailidsetList([]);
};


/**
 * repeated TariffPlan tariffPlanList = 8;
 * @return {!Array<!proto.auth.TariffPlan>}
 */
proto.auth.ActionEventData.prototype.getTariffplanlistList = function() {
  return /** @type{!Array<!proto.auth.TariffPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.TariffPlan, 8));
};


/**
 * @param {!Array<!proto.auth.TariffPlan>} value
 * @return {!proto.auth.ActionEventData} returns this
*/
proto.auth.ActionEventData.prototype.setTariffplanlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.auth.TariffPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.TariffPlan}
 */
proto.auth.ActionEventData.prototype.addTariffplanlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.auth.TariffPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.clearTariffplanlistList = function() {
  return this.setTariffplanlistList([]);
};


/**
 * repeated CategoryPrice categoryPriceList = 9;
 * @return {!Array<!proto.auth.CategoryPrice>}
 */
proto.auth.ActionEventData.prototype.getCategorypricelistList = function() {
  return /** @type{!Array<!proto.auth.CategoryPrice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.CategoryPrice, 9));
};


/**
 * @param {!Array<!proto.auth.CategoryPrice>} value
 * @return {!proto.auth.ActionEventData} returns this
*/
proto.auth.ActionEventData.prototype.setCategorypricelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.auth.CategoryPrice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.CategoryPrice}
 */
proto.auth.ActionEventData.prototype.addCategorypricelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.auth.CategoryPrice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.clearCategorypricelistList = function() {
  return this.setCategorypricelistList([]);
};


/**
 * repeated EventSeat eventSeatList = 10;
 * @return {!Array<!proto.auth.EventSeat>}
 */
proto.auth.ActionEventData.prototype.getEventseatlistList = function() {
  return /** @type{!Array<!proto.auth.EventSeat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.EventSeat, 10));
};


/**
 * @param {!Array<!proto.auth.EventSeat>} value
 * @return {!proto.auth.ActionEventData} returns this
*/
proto.auth.ActionEventData.prototype.setEventseatlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.auth.EventSeat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.EventSeat}
 */
proto.auth.ActionEventData.prototype.addEventseatlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.auth.EventSeat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.ActionEventData} returns this
 */
proto.auth.ActionEventData.prototype.clearEventseatlistList = function() {
  return this.setEventseatlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.CategoryPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.CategoryPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.CategoryPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CategoryPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    placement: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    availability: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.CategoryPrice}
 */
proto.auth.CategoryPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.CategoryPrice;
  return proto.auth.CategoryPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.CategoryPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.CategoryPrice}
 */
proto.auth.CategoryPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlacement(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvailability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.CategoryPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.CategoryPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.CategoryPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.CategoryPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPlacement();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.CategoryPrice.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.CategoryPrice} returns this
 */
proto.auth.CategoryPrice.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool placement = 2;
 * @return {boolean}
 */
proto.auth.CategoryPrice.prototype.getPlacement = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.auth.CategoryPrice} returns this
 */
proto.auth.CategoryPrice.prototype.setPlacement = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.auth.CategoryPrice.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.CategoryPrice} returns this
 */
proto.auth.CategoryPrice.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.auth.CategoryPrice.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.auth.CategoryPrice} returns this
 */
proto.auth.CategoryPrice.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint64 availability = 5;
 * @return {number}
 */
proto.auth.CategoryPrice.prototype.getAvailability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.CategoryPrice} returns this
 */
proto.auth.CategoryPrice.prototype.setAvailability = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.TariffPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.TariffPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.TariffPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.TariffPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tariffmapMap: (f = msg.getTariffmapMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.TariffPlan}
 */
proto.auth.TariffPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.TariffPlan;
  return proto.auth.TariffPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.TariffPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.TariffPlan}
 */
proto.auth.TariffPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = msg.getTariffmapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readDouble, null, 0, 0.0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.TariffPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.TariffPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.TariffPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.TariffPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTariffmapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeDouble);
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.auth.TariffPlan.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.TariffPlan} returns this
 */
proto.auth.TariffPlan.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.TariffPlan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.TariffPlan} returns this
 */
proto.auth.TariffPlan.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<uint64, double> tariffMap = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.auth.TariffPlan.prototype.getTariffmapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.auth.TariffPlan} returns this
 */
proto.auth.TariffPlan.prototype.clearTariffmapMap = function() {
  this.getTariffmapMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.GatewayEventList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.GatewayEventList.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.GatewayEventList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.GatewayEventList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GatewayEventList.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayeventlistList: jspb.Message.toObjectList(msg.getGatewayeventlistList(),
    proto.auth.GatewayEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.GatewayEventList}
 */
proto.auth.GatewayEventList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.GatewayEventList;
  return proto.auth.GatewayEventList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.GatewayEventList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.GatewayEventList}
 */
proto.auth.GatewayEventList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.GatewayEvent;
      reader.readMessage(value,proto.auth.GatewayEvent.deserializeBinaryFromReader);
      msg.addGatewayeventlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.GatewayEventList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.GatewayEventList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.GatewayEventList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GatewayEventList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayeventlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.auth.GatewayEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GatewayEvent gatewayEventList = 1;
 * @return {!Array<!proto.auth.GatewayEvent>}
 */
proto.auth.GatewayEventList.prototype.getGatewayeventlistList = function() {
  return /** @type{!Array<!proto.auth.GatewayEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.auth.GatewayEvent, 1));
};


/**
 * @param {!Array<!proto.auth.GatewayEvent>} value
 * @return {!proto.auth.GatewayEventList} returns this
*/
proto.auth.GatewayEventList.prototype.setGatewayeventlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.GatewayEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.GatewayEvent}
 */
proto.auth.GatewayEventList.prototype.addGatewayeventlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.GatewayEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.GatewayEventList} returns this
 */
proto.auth.GatewayEventList.prototype.clearGatewayeventlistList = function() {
  return this.setGatewayeventlistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.GatewayEvent.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.GatewayEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.GatewayEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.GatewayEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GatewayEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    gateway: (f = msg.getGateway()) && proto.auth.Gateway.toObject(includeInstance, f),
    eventid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    showtime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sellendtime: (f = msg.getSellendtime()) && struct_pb.NullableString.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    actionid: (f = msg.getActionid()) && struct_pb.NullableString.toObject(includeInstance, f),
    actionname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    venueid: (f = msg.getVenueid()) && struct_pb.NullableString.toObject(includeInstance, f),
    venuename: jspb.Message.getFieldWithDefault(msg, 10, ""),
    planid: (f = msg.getPlanid()) && struct_pb.NullableString.toObject(includeInstance, f),
    planname: (f = msg.getPlanname()) && struct_pb.NullableString.toObject(includeInstance, f),
    dataList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    incompatibilityreason: (f = msg.getIncompatibilityreason()) && struct_pb.NullableString.toObject(includeInstance, f),
    fullnamerequired: (f = msg.getFullnamerequired()) && struct_pb.NullableBool.toObject(includeInstance, f),
    phonerequired: (f = msg.getPhonerequired()) && struct_pb.NullableBool.toObject(includeInstance, f),
    fanidrequired: (f = msg.getFanidrequired()) && struct_pb.NullableBool.toObject(includeInstance, f),
    ticketrefundallowed: (f = msg.getTicketrefundallowed()) && struct_pb.NullableBool.toObject(includeInstance, f),
    ticketreissueallowed: (f = msg.getTicketreissueallowed()) && struct_pb.NullableBool.toObject(includeInstance, f),
    maxtickets: (f = msg.getMaxtickets()) && struct_pb.NullableUInt64.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.GatewayEvent}
 */
proto.auth.GatewayEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.GatewayEvent;
  return proto.auth.GatewayEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.GatewayEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.GatewayEvent}
 */
proto.auth.GatewayEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.Gateway;
      reader.readMessage(value,proto.auth.Gateway.deserializeBinaryFromReader);
      msg.setGateway(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventuid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setShowtime(value);
      break;
    case 5:
      var value = new struct_pb.NullableString;
      reader.readMessage(value,struct_pb.NullableString.deserializeBinaryFromReader);
      msg.setSellendtime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = new struct_pb.NullableString;
      reader.readMessage(value,struct_pb.NullableString.deserializeBinaryFromReader);
      msg.setActionid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionname(value);
      break;
    case 9:
      var value = new struct_pb.NullableString;
      reader.readMessage(value,struct_pb.NullableString.deserializeBinaryFromReader);
      msg.setVenueid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenuename(value);
      break;
    case 11:
      var value = new struct_pb.NullableString;
      reader.readMessage(value,struct_pb.NullableString.deserializeBinaryFromReader);
      msg.setPlanid(value);
      break;
    case 12:
      var value = new struct_pb.NullableString;
      reader.readMessage(value,struct_pb.NullableString.deserializeBinaryFromReader);
      msg.setPlanname(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addData(value);
      break;
    case 14:
      var value = new struct_pb.NullableString;
      reader.readMessage(value,struct_pb.NullableString.deserializeBinaryFromReader);
      msg.setIncompatibilityreason(value);
      break;
    case 15:
      var value = new struct_pb.NullableBool;
      reader.readMessage(value,struct_pb.NullableBool.deserializeBinaryFromReader);
      msg.setFullnamerequired(value);
      break;
    case 16:
      var value = new struct_pb.NullableBool;
      reader.readMessage(value,struct_pb.NullableBool.deserializeBinaryFromReader);
      msg.setPhonerequired(value);
      break;
    case 17:
      var value = new struct_pb.NullableBool;
      reader.readMessage(value,struct_pb.NullableBool.deserializeBinaryFromReader);
      msg.setFanidrequired(value);
      break;
    case 18:
      var value = new struct_pb.NullableBool;
      reader.readMessage(value,struct_pb.NullableBool.deserializeBinaryFromReader);
      msg.setTicketrefundallowed(value);
      break;
    case 19:
      var value = new struct_pb.NullableBool;
      reader.readMessage(value,struct_pb.NullableBool.deserializeBinaryFromReader);
      msg.setTicketreissueallowed(value);
      break;
    case 20:
      var value = new struct_pb.NullableUInt64;
      reader.readMessage(value,struct_pb.NullableUInt64.deserializeBinaryFromReader);
      msg.setMaxtickets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.GatewayEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.GatewayEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.GatewayEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.GatewayEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGateway();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.auth.Gateway.serializeBinaryToWriter
    );
  }
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShowtime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSellendtime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      struct_pb.NullableString.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getActionid();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      struct_pb.NullableString.serializeBinaryToWriter
    );
  }
  f = message.getActionname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getVenueid();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      struct_pb.NullableString.serializeBinaryToWriter
    );
  }
  f = message.getVenuename();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPlanid();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      struct_pb.NullableString.serializeBinaryToWriter
    );
  }
  f = message.getPlanname();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      struct_pb.NullableString.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getIncompatibilityreason();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      struct_pb.NullableString.serializeBinaryToWriter
    );
  }
  f = message.getFullnamerequired();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      struct_pb.NullableBool.serializeBinaryToWriter
    );
  }
  f = message.getPhonerequired();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      struct_pb.NullableBool.serializeBinaryToWriter
    );
  }
  f = message.getFanidrequired();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      struct_pb.NullableBool.serializeBinaryToWriter
    );
  }
  f = message.getTicketrefundallowed();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      struct_pb.NullableBool.serializeBinaryToWriter
    );
  }
  f = message.getTicketreissueallowed();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      struct_pb.NullableBool.serializeBinaryToWriter
    );
  }
  f = message.getMaxtickets();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      struct_pb.NullableUInt64.serializeBinaryToWriter
    );
  }
};


/**
 * optional Gateway gateway = 1;
 * @return {?proto.auth.Gateway}
 */
proto.auth.GatewayEvent.prototype.getGateway = function() {
  return /** @type{?proto.auth.Gateway} */ (
    jspb.Message.getWrapperField(this, proto.auth.Gateway, 1));
};


/**
 * @param {?proto.auth.Gateway|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setGateway = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearGateway = function() {
  return this.setGateway(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasGateway = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string eventId = 2;
 * @return {string}
 */
proto.auth.GatewayEvent.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.setEventid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string eventUid = 3;
 * @return {string}
 */
proto.auth.GatewayEvent.prototype.getEventuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.setEventuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string showTime = 4;
 * @return {string}
 */
proto.auth.GatewayEvent.prototype.getShowtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.setShowtime = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional NullableString sellEndTime = 5;
 * @return {?proto.auth.NullableString}
 */
proto.auth.GatewayEvent.prototype.getSellendtime = function() {
  return /** @type{?proto.auth.NullableString} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableString, 5));
};


/**
 * @param {?proto.auth.NullableString|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setSellendtime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearSellendtime = function() {
  return this.setSellendtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasSellendtime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.auth.GatewayEvent.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional NullableString actionId = 7;
 * @return {?proto.auth.NullableString}
 */
proto.auth.GatewayEvent.prototype.getActionid = function() {
  return /** @type{?proto.auth.NullableString} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableString, 7));
};


/**
 * @param {?proto.auth.NullableString|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setActionid = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearActionid = function() {
  return this.setActionid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasActionid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string actionName = 8;
 * @return {string}
 */
proto.auth.GatewayEvent.prototype.getActionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.setActionname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional NullableString venueId = 9;
 * @return {?proto.auth.NullableString}
 */
proto.auth.GatewayEvent.prototype.getVenueid = function() {
  return /** @type{?proto.auth.NullableString} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableString, 9));
};


/**
 * @param {?proto.auth.NullableString|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setVenueid = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearVenueid = function() {
  return this.setVenueid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasVenueid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string venueName = 10;
 * @return {string}
 */
proto.auth.GatewayEvent.prototype.getVenuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.setVenuename = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional NullableString planId = 11;
 * @return {?proto.auth.NullableString}
 */
proto.auth.GatewayEvent.prototype.getPlanid = function() {
  return /** @type{?proto.auth.NullableString} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableString, 11));
};


/**
 * @param {?proto.auth.NullableString|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setPlanid = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearPlanid = function() {
  return this.setPlanid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasPlanid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional NullableString planName = 12;
 * @return {?proto.auth.NullableString}
 */
proto.auth.GatewayEvent.prototype.getPlanname = function() {
  return /** @type{?proto.auth.NullableString} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableString, 12));
};


/**
 * @param {?proto.auth.NullableString|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setPlanname = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearPlanname = function() {
  return this.setPlanname(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasPlanname = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated string data = 13;
 * @return {!Array<string>}
 */
proto.auth.GatewayEvent.prototype.getDataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional NullableString incompatibilityReason = 14;
 * @return {?proto.auth.NullableString}
 */
proto.auth.GatewayEvent.prototype.getIncompatibilityreason = function() {
  return /** @type{?proto.auth.NullableString} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableString, 14));
};


/**
 * @param {?proto.auth.NullableString|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setIncompatibilityreason = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearIncompatibilityreason = function() {
  return this.setIncompatibilityreason(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasIncompatibilityreason = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional NullableBool fullNameRequired = 15;
 * @return {?proto.auth.NullableBool}
 */
proto.auth.GatewayEvent.prototype.getFullnamerequired = function() {
  return /** @type{?proto.auth.NullableBool} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableBool, 15));
};


/**
 * @param {?proto.auth.NullableBool|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setFullnamerequired = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearFullnamerequired = function() {
  return this.setFullnamerequired(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasFullnamerequired = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional NullableBool phoneRequired = 16;
 * @return {?proto.auth.NullableBool}
 */
proto.auth.GatewayEvent.prototype.getPhonerequired = function() {
  return /** @type{?proto.auth.NullableBool} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableBool, 16));
};


/**
 * @param {?proto.auth.NullableBool|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setPhonerequired = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearPhonerequired = function() {
  return this.setPhonerequired(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasPhonerequired = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional NullableBool fanIdRequired = 17;
 * @return {?proto.auth.NullableBool}
 */
proto.auth.GatewayEvent.prototype.getFanidrequired = function() {
  return /** @type{?proto.auth.NullableBool} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableBool, 17));
};


/**
 * @param {?proto.auth.NullableBool|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setFanidrequired = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearFanidrequired = function() {
  return this.setFanidrequired(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasFanidrequired = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional NullableBool ticketRefundAllowed = 18;
 * @return {?proto.auth.NullableBool}
 */
proto.auth.GatewayEvent.prototype.getTicketrefundallowed = function() {
  return /** @type{?proto.auth.NullableBool} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableBool, 18));
};


/**
 * @param {?proto.auth.NullableBool|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setTicketrefundallowed = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearTicketrefundallowed = function() {
  return this.setTicketrefundallowed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasTicketrefundallowed = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional NullableBool ticketReissueAllowed = 19;
 * @return {?proto.auth.NullableBool}
 */
proto.auth.GatewayEvent.prototype.getTicketreissueallowed = function() {
  return /** @type{?proto.auth.NullableBool} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableBool, 19));
};


/**
 * @param {?proto.auth.NullableBool|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setTicketreissueallowed = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearTicketreissueallowed = function() {
  return this.setTicketreissueallowed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasTicketreissueallowed = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional NullableUInt64 maxTickets = 20;
 * @return {?proto.auth.NullableUInt64}
 */
proto.auth.GatewayEvent.prototype.getMaxtickets = function() {
  return /** @type{?proto.auth.NullableUInt64} */ (
    jspb.Message.getWrapperField(this, struct_pb.NullableUInt64, 20));
};


/**
 * @param {?proto.auth.NullableUInt64|undefined} value
 * @return {!proto.auth.GatewayEvent} returns this
*/
proto.auth.GatewayEvent.prototype.setMaxtickets = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.GatewayEvent} returns this
 */
proto.auth.GatewayEvent.prototype.clearMaxtickets = function() {
  return this.setMaxtickets(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.GatewayEvent.prototype.hasMaxtickets = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * @enum {number}
 */
proto.auth.UserType = {
  OPERATOR: 0,
  AGENT: 1,
  ORGANIZER: 2
};

/**
 * @enum {number}
 */
proto.auth.Age = {
  C_0: 0,
  C_6: 1,
  C_12: 2,
  C_16: 3,
  C_18: 4
};

goog.object.extend(exports, proto.auth);
