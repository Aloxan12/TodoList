// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "data_types_requests.proto" (package "auth", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BookletType } from "./data_types";
import { GatewayEvent } from "./data_types";
import { ActionEventData } from "./data_types";
import { SimpleVenue } from "./data_types";
import { Image } from "./data_types";
import { NullValue } from "./google/protobuf/struct";
import { Venue } from "./data_types";
import { ActionEvent } from "./data_types";
import { Action } from "./data_types";
import { Kind } from "./data_types";
import { NullableBool } from "./struct";
import { SeatingPlan } from "./data_types";
import { SeatData } from "./data_types";
import { CategoryLimit } from "./data_types";
import { Category } from "./data_types";
import { NullableString } from "./struct";
import { NullableUInt64 } from "./struct";
import { City } from "./data_types";
import { Country } from "./data_types";
import { AuthorizedRequest } from "./auth_requests";
// Countries

/**
 * @generated from protobuf message auth.AddCountryRequest
 */
export interface AddCountryRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Добавляемая страна
     *
     * @generated from protobuf field: string countryName = 2;
     */
    countryName: string;
    /**
     * Код валюты ISO 4217
     *
     * @generated from protobuf field: string currencyCode = 3;
     */
    currencyCode: string;
}
/**
 * @generated from protobuf message auth.SaveCountryRequest
 */
export interface SaveCountryRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Сохраняемая страна
     *
     * @generated from protobuf field: auth.Country country = 2;
     */
    country?: Country;
}
/**
 * @generated from protobuf message auth.DeleteCountryRequest
 */
export interface DeleteCountryRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
}
// Cities

/**
 * @generated from protobuf message auth.GetCityByCountryRequest
 */
export interface GetCityByCountryRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 countryId = 2;
     */
    countryId: bigint;
}
/**
 * @generated from protobuf message auth.AddCityRequest
 */
export interface AddCityRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Cтрана добавляемого города
     *
     * @generated from protobuf field: uint64 countryId = 2;
     */
    countryId: bigint;
    /**
     * Название добавляемого города
     *
     * @generated from protobuf field: string cityName = 3;
     */
    cityName: string;
    /**
     * Код тайм-зоны
     *
     * @generated from protobuf field: string zoneId = 4;
     */
    zoneId: string;
}
/**
 * @generated from protobuf message auth.SaveCityRequest
 */
export interface SaveCityRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Сохраняемый город
     *
     * @generated from protobuf field: auth.City city = 2;
     */
    city?: City;
}
/**
 * @generated from protobuf message auth.DeleteCityRequest
 */
export interface DeleteCityRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
}
/**
 * @generated from protobuf message auth.GetVenueByCityRequest
 */
export interface GetVenueByCityRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 cityId = 2;
     */
    cityId: bigint;
}
/**
 * @generated from protobuf message auth.GetVenueFilteredRequest
 */
export interface GetVenueFilteredRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: auth.NullableUInt64 cityId = 2;
     */
    cityId?: NullableUInt64;
    /**
     * @generated from protobuf field: auth.NullableString name = 3;
     */
    name?: NullableString;
    /**
     * TODO add nullable, if null then by name
     *
     * @generated from protobuf field: auth.VenuesOrder order = 4;
     */
    order: VenuesOrder;
    /**
     * Elements to send
     *
     * @generated from protobuf field: uint64 limit = 5;
     */
    limit: bigint;
}
/**
 * @generated from protobuf message auth.GetVenueByIdRequest
 */
export interface GetVenueByIdRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 venueId = 2;
     */
    venueId: bigint;
}
/**
 * @generated from protobuf message auth.DeleteVenueRequest
 */
export interface DeleteVenueRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
}
/**
 * @generated from protobuf message auth.AddPlan1Request
 */
export interface AddPlan1Request {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Venue id
     *
     * @generated from protobuf field: uint64 venueId = 2;
     */
    venueId: bigint;
    /**
     * Plan name
     *
     * @generated from protobuf field: string planName = 3;
     */
    planName: string;
    /**
     * Category list
     *
     * @generated from protobuf field: repeated auth.Category categories = 4;
     */
    categories: Category[];
    /**
     * Category limit list
     *
     * @generated from protobuf field: repeated auth.CategoryLimit categoryLimits = 5;
     */
    categoryLimits: CategoryLimit[];
}
/**
 * @generated from protobuf message auth.AddPlan3Request
 */
export interface AddPlan3Request {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 venueId = 2;
     */
    venueId: bigint;
    /**
     * @generated from protobuf field: string planName = 3;
     */
    planName: string;
    /**
     * @generated from protobuf field: repeated auth.Category categories = 4;
     */
    categories: Category[];
    /**
     * @generated from protobuf field: repeated auth.CategoryLimit categoryLimits = 5;
     */
    categoryLimits: CategoryLimit[];
    /**
     * @generated from protobuf field: string svgFileData = 6;
     */
    svgFileData: string; // TODO add nplsplData
}
/**
 * @generated from protobuf message auth.CheckPlanRequest
 */
export interface CheckPlanRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * SVG scheme string
     *
     * @generated from protobuf field: string svgFileData = 2;
     */
    svgFileData: string;
}
/**
 * @generated from protobuf message auth.CheckPlanResponse
 */
export interface CheckPlanResponse {
    /**
     * SVG scheme bytes
     *
     * @generated from protobuf field: string responseTextData = 1;
     */
    responseTextData: string;
    /**
     * Optimized SVG
     *
     * @generated from protobuf field: string optimizedSvgData = 2;
     */
    optimizedSvgData: string;
    /**
     * данные мест
     *
     * @generated from protobuf field: repeated auth.SeatData seatDataList = 3;
     */
    seatDataList: SeatData[];
    /**
     * Category list
     *
     * @generated from protobuf field: repeated auth.Category categories = 4;
     */
    categories: Category[];
    /**
     * данные мест
     *
     * @generated from protobuf field: repeated auth.SeatData notRecognizedSeats = 5;
     */
    notRecognizedSeats: SeatData[];
}
/**
 * @generated from protobuf message auth.AddPlan2Request
 */
export interface AddPlan2Request {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Venue id
     *
     * @generated from protobuf field: uint64 venueId = 2;
     */
    venueId: bigint;
    /**
     * Plan name
     *
     * @generated from protobuf field: string planName = 3;
     */
    planName: string;
    /**
     * SVG scheme bytes
     *
     * @generated from protobuf field: string svgFileData = 4;
     */
    svgFileData: string;
}
/**
 * @generated from protobuf message auth.SavePlanRequest
 */
export interface SavePlanRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Seating plan to update
     *
     * @generated from protobuf field: auth.SeatingPlan seatingPlan = 2;
     */
    seatingPlan?: SeatingPlan;
}
// Actions

/**
 * @generated from protobuf message auth.GetActionFilteredRequest
 */
export interface GetActionFilteredRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * только актуальные
     *
     * @generated from protobuf field: auth.NullableBool actual = 2;
     */
    actual?: NullableBool;
    /**
     * только без сеансов
     *
     * @generated from protobuf field: auth.NullableBool withoutActionEventData = 3;
     */
    withoutActionEventData?: NullableBool;
    /**
     * город
     *
     * @generated from protobuf field: auth.NullableUInt64 cityId = 4;
     */
    cityId?: NullableUInt64;
    /**
     * место проведения
     *
     * @generated from protobuf field: auth.NullableUInt64 venueId = 5;
     */
    venueId?: NullableUInt64;
    /**
     * @generated from protobuf field: auth.NullableString name = 6;
     */
    name?: NullableString;
    /**
     * @generated from protobuf field: auth.NullableString kindId = 7;
     */
    kindId?: NullableString;
}
/**
 * @generated from protobuf message auth.GetActionByIdRequest
 */
export interface GetActionByIdRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 actionId = 10;
     */
    actionId: bigint;
}
/**
 * @generated from protobuf message auth.DeleteActionRequest
 */
export interface DeleteActionRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 actionId = 2;
     */
    actionId: bigint;
}
/**
 * @generated from protobuf message auth.AddActionRequest
 */
export interface AddActionRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * id компании-организатора представления
     *
     * @generated from protobuf field: uint64 companyOrganizerId = 2;
     */
    companyOrganizerId: bigint;
    /**
     * Раздел, в который будет добавлено представление
     *
     * @generated from protobuf field: auth.Kind kind = 3;
     */
    kind?: Kind;
    /**
     * Название представления
     *
     * @generated from protobuf field: string actionName = 4;
     */
    actionName: string;
}
/**
 * @generated from protobuf message auth.SaveActionRequest
 */
export interface SaveActionRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Сохраняемое представление, сохраняются изменения всех полей, кроме id,
     * organizerId, kind, bookletType, cityIdSet, venueIdSet, actual. Поле rating
     * сохраняется только для пользователя с ролью OPERATOR
     *
     * @generated from protobuf field: auth.Action data = 2;
     */
    data?: Action;
}
// ActionEvents

/**
 * @generated from protobuf message auth.GetActionEventFilteredRequest
 */
export interface GetActionEventFilteredRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 actionId = 2;
     */
    actionId: bigint;
}
/**
 * @generated from protobuf message auth.AddActionEventRequest
 */
export interface AddActionEventRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Список добавляемых сеансов. В объекте ActionEvent игнорируются поля id,
     * planName, actionName, tariffPlanList, placementPlan, archival. В поле
     * gatewayEvent в случае сеанса с ВБС передается объект GatewayEvent,
     * полученный в результате запроса GET_GATEWAY_EVENT_LIST. В случае сеанса без
     * ВБС передается GatewayEvent по умолчанию. В объекте CategoryPrice
     * используются только поля id и price, причем в качестве id передается id из
     * соответствующего Category.
     *
     * @generated from protobuf field: repeated auth.ActionEvent data = 2;
     */
    data: ActionEvent[];
}
/**
 * @generated from protobuf message auth.SaveActionEventRequest
 */
export interface SaveActionEventRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * Сохраняемый сеанс, сохраняются изменения всех полей, кроме id, planId,
     * planName, actionId, actionName, currency, quota, placementPlan,
     * gatewayEvent, archival. В объекте CategoryPrice сохраняются только поля
     * name и price. В объекте TariffPlan сохраняются только поля name и tariffMap
     *
     * @generated from protobuf field: auth.ActionEvent data = 2;
     */
    data?: ActionEvent;
}
/**
 * @generated from protobuf message auth.DeleteActionEventRequest
 */
export interface DeleteActionEventRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
}
// Gateways

/**
 * @generated from protobuf message auth.GetGatewayEventListRequest
 */
export interface GetGatewayEventListRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * id подключения
     *
     * @generated from protobuf field: int32 data = 2;
     */
    data: number;
}
// Seating plans

/**
 * @generated from protobuf message auth.GetSeatingPlanByIdRequest
 */
export interface GetSeatingPlanByIdRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 seatingPlanId = 2;
     */
    seatingPlanId: bigint;
}
/**
 * @generated from protobuf message auth.GetSeatingPlanListRequest
 */
export interface GetSeatingPlanListRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest authorizedRequest = 1;
     */
    authorizedRequest?: AuthorizedRequest;
    /**
     * @generated from protobuf field: auth.NullableUInt64 venueId = 2;
     */
    venueId?: NullableUInt64;
}
/**
 * @generated from protobuf message auth.DeleteSeatingPlanRequest
 */
export interface DeleteSeatingPlanRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
}
/**
 * Venue
 *
 * @generated from protobuf message auth.AddVenueRequest
 */
export interface AddVenueRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 cityId = 2;
     */
    cityId: bigint;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message auth.AddVenueResponse
 */
export interface AddVenueResponse {
    /**
     * @generated from protobuf field: auth.Venue venue = 1;
     */
    venue?: Venue;
}
/**
 * @generated from protobuf message auth.NullableImage
 */
export interface NullableImage {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "null";
        /**
         * @generated from protobuf field: google.protobuf.NullValue null = 1;
         */
        null: NullValue;
    } | {
        oneofKind: "image";
        /**
         * @generated from protobuf field: auth.Image image = 2;
         */
        image: Image;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message auth.SaveVenueRequest
 */
export interface SaveVenueRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: auth.SimpleVenue simpleVenue = 2;
     */
    simpleVenue?: SimpleVenue;
    /**
     * @generated from protobuf field: auth.Image bigImage = 3;
     */
    bigImage?: Image;
}
/**
 * @generated from protobuf message auth.SaveVenueResponse
 */
export interface SaveVenueResponse {
    /**
     * @generated from protobuf field: auth.Venue venue = 1;
     */
    venue?: Venue;
}
/**
 * @generated from protobuf message auth.ActionEventSyncRequest
 */
export interface ActionEventSyncRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
}
/**
 * @generated from protobuf message auth.ActionEventSyncResponse
 */
export interface ActionEventSyncResponse {
    /**
     * @generated from protobuf field: auth.ActionEventData actionEventData = 1;
     */
    actionEventData?: ActionEventData;
    /**
     * @generated from protobuf field: bool priceChanged = 2;
     */
    priceChanged: boolean;
    /**
     * @generated from protobuf field: string report = 3;
     */
    report: string;
}
/**
 * @generated from protobuf message auth.GetSyncReportRequest
 */
export interface GetSyncReportRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 actionId = 2;
     */
    actionId: bigint;
    /**
     * @generated from protobuf field: uint64 planId = 3;
     */
    planId: bigint;
    /**
     * @generated from protobuf field: auth.GatewayEvent gatewayEvent = 4;
     */
    gatewayEvent?: GatewayEvent;
}
/**
 * @generated from protobuf message auth.GetSyncReportResponse
 */
export interface GetSyncReportResponse {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message auth.GetGatewayEventInfoRequest
 */
export interface GetGatewayEventInfoRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: auth.GatewayEvent gatewayEvent = 2;
     */
    gatewayEvent?: GatewayEvent;
}
/**
 * @generated from protobuf message auth.GetGatewayEventInfoResponse
 */
export interface GetGatewayEventInfoResponse {
    /**
     * @generated from protobuf field: string report = 1;
     */
    report: string;
}
/**
 * @generated from protobuf message auth.SetActionBookletRequest
 */
export interface SetActionBookletRequest {
    /**
     * @generated from protobuf field: auth.AuthorizedRequest auth = 1;
     */
    auth?: AuthorizedRequest;
    /**
     * @generated from protobuf field: uint64 actionId = 2;
     */
    actionId: bigint;
    /**
     * @generated from protobuf field: auth.BookletType type = 3;
     */
    type?: BookletType;
    /**
     * @generated from protobuf field: string data = 4;
     */
    data: string;
}
/**
 * @generated from protobuf message auth.SetActionBookletResponse
 */
export interface SetActionBookletResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
// Venues

/**
 * @generated from protobuf enum auth.VenuesOrder
 */
export enum VenuesOrder {
    /**
     * @generated from protobuf enum value: nameAsc = 0;
     */
    nameAsc = 0,
    /**
     * @generated from protobuf enum value: nameDesc = 1;
     */
    nameDesc = 1,
    /**
     * @generated from protobuf enum value: sizeAsc = 2;
     */
    sizeAsc = 2,
    /**
     * @generated from protobuf enum value: sizeDesc = 3;
     */
    sizeDesc = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class AddCountryRequest$Type extends MessageType<AddCountryRequest> {
    constructor() {
        super("auth.AddCountryRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "countryName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "currencyCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddCountryRequest>): AddCountryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.countryName = "";
        message.currencyCode = "";
        if (value !== undefined)
            reflectionMergePartial<AddCountryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCountryRequest): AddCountryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* string countryName */ 2:
                    message.countryName = reader.string();
                    break;
                case /* string currencyCode */ 3:
                    message.currencyCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCountryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string countryName = 2; */
        if (message.countryName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.countryName);
        /* string currencyCode = 3; */
        if (message.currencyCode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currencyCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddCountryRequest
 */
export const AddCountryRequest = new AddCountryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveCountryRequest$Type extends MessageType<SaveCountryRequest> {
    constructor() {
        super("auth.SaveCountryRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "country", kind: "message", T: () => Country }
        ]);
    }
    create(value?: PartialMessage<SaveCountryRequest>): SaveCountryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SaveCountryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveCountryRequest): SaveCountryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* auth.Country country */ 2:
                    message.country = Country.internalBinaryRead(reader, reader.uint32(), options, message.country);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveCountryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.Country country = 2; */
        if (message.country)
            Country.internalBinaryWrite(message.country, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SaveCountryRequest
 */
export const SaveCountryRequest = new SaveCountryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCountryRequest$Type extends MessageType<DeleteCountryRequest> {
    constructor() {
        super("auth.DeleteCountryRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCountryRequest>): DeleteCountryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteCountryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCountryRequest): DeleteCountryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCountryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.DeleteCountryRequest
 */
export const DeleteCountryRequest = new DeleteCountryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCityByCountryRequest$Type extends MessageType<GetCityByCountryRequest> {
    constructor() {
        super("auth.GetCityByCountryRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "countryId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetCityByCountryRequest>): GetCityByCountryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.countryId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetCityByCountryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCityByCountryRequest): GetCityByCountryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 countryId */ 2:
                    message.countryId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCityByCountryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 countryId = 2; */
        if (message.countryId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.countryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetCityByCountryRequest
 */
export const GetCityByCountryRequest = new GetCityByCountryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCityRequest$Type extends MessageType<AddCityRequest> {
    constructor() {
        super("auth.AddCityRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "countryId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cityName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "zoneId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddCityRequest>): AddCityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.countryId = 0n;
        message.cityName = "";
        message.zoneId = "";
        if (value !== undefined)
            reflectionMergePartial<AddCityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCityRequest): AddCityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 countryId */ 2:
                    message.countryId = reader.uint64().toBigInt();
                    break;
                case /* string cityName */ 3:
                    message.cityName = reader.string();
                    break;
                case /* string zoneId */ 4:
                    message.zoneId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 countryId = 2; */
        if (message.countryId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.countryId);
        /* string cityName = 3; */
        if (message.cityName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cityName);
        /* string zoneId = 4; */
        if (message.zoneId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.zoneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddCityRequest
 */
export const AddCityRequest = new AddCityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveCityRequest$Type extends MessageType<SaveCityRequest> {
    constructor() {
        super("auth.SaveCityRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "city", kind: "message", T: () => City }
        ]);
    }
    create(value?: PartialMessage<SaveCityRequest>): SaveCityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SaveCityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveCityRequest): SaveCityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* auth.City city */ 2:
                    message.city = City.internalBinaryRead(reader, reader.uint32(), options, message.city);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveCityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.City city = 2; */
        if (message.city)
            City.internalBinaryWrite(message.city, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SaveCityRequest
 */
export const SaveCityRequest = new SaveCityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCityRequest$Type extends MessageType<DeleteCityRequest> {
    constructor() {
        super("auth.DeleteCityRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCityRequest>): DeleteCityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteCityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCityRequest): DeleteCityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.DeleteCityRequest
 */
export const DeleteCityRequest = new DeleteCityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetVenueByCityRequest$Type extends MessageType<GetVenueByCityRequest> {
    constructor() {
        super("auth.GetVenueByCityRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "cityId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetVenueByCityRequest>): GetVenueByCityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cityId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetVenueByCityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVenueByCityRequest): GetVenueByCityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 cityId */ 2:
                    message.cityId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVenueByCityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 cityId = 2; */
        if (message.cityId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetVenueByCityRequest
 */
export const GetVenueByCityRequest = new GetVenueByCityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetVenueFilteredRequest$Type extends MessageType<GetVenueFilteredRequest> {
    constructor() {
        super("auth.GetVenueFilteredRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "cityId", kind: "message", T: () => NullableUInt64 },
            { no: 3, name: "name", kind: "message", T: () => NullableString },
            { no: 4, name: "order", kind: "enum", T: () => ["auth.VenuesOrder", VenuesOrder] },
            { no: 5, name: "limit", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetVenueFilteredRequest>): GetVenueFilteredRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.order = 0;
        message.limit = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetVenueFilteredRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVenueFilteredRequest): GetVenueFilteredRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* auth.NullableUInt64 cityId */ 2:
                    message.cityId = NullableUInt64.internalBinaryRead(reader, reader.uint32(), options, message.cityId);
                    break;
                case /* auth.NullableString name */ 3:
                    message.name = NullableString.internalBinaryRead(reader, reader.uint32(), options, message.name);
                    break;
                case /* auth.VenuesOrder order */ 4:
                    message.order = reader.int32();
                    break;
                case /* uint64 limit */ 5:
                    message.limit = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVenueFilteredRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableUInt64 cityId = 2; */
        if (message.cityId)
            NullableUInt64.internalBinaryWrite(message.cityId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableString name = 3; */
        if (message.name)
            NullableString.internalBinaryWrite(message.name, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* auth.VenuesOrder order = 4; */
        if (message.order !== 0)
            writer.tag(4, WireType.Varint).int32(message.order);
        /* uint64 limit = 5; */
        if (message.limit !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetVenueFilteredRequest
 */
export const GetVenueFilteredRequest = new GetVenueFilteredRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetVenueByIdRequest$Type extends MessageType<GetVenueByIdRequest> {
    constructor() {
        super("auth.GetVenueByIdRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "venueId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetVenueByIdRequest>): GetVenueByIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.venueId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetVenueByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVenueByIdRequest): GetVenueByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 venueId */ 2:
                    message.venueId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVenueByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 venueId = 2; */
        if (message.venueId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.venueId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetVenueByIdRequest
 */
export const GetVenueByIdRequest = new GetVenueByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteVenueRequest$Type extends MessageType<DeleteVenueRequest> {
    constructor() {
        super("auth.DeleteVenueRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteVenueRequest>): DeleteVenueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteVenueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteVenueRequest): DeleteVenueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteVenueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.DeleteVenueRequest
 */
export const DeleteVenueRequest = new DeleteVenueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddPlan1Request$Type extends MessageType<AddPlan1Request> {
    constructor() {
        super("auth.AddPlan1Request", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "venueId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "planName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "categories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category },
            { no: 5, name: "categoryLimits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CategoryLimit }
        ]);
    }
    create(value?: PartialMessage<AddPlan1Request>): AddPlan1Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.venueId = 0n;
        message.planName = "";
        message.categories = [];
        message.categoryLimits = [];
        if (value !== undefined)
            reflectionMergePartial<AddPlan1Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPlan1Request): AddPlan1Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 venueId */ 2:
                    message.venueId = reader.uint64().toBigInt();
                    break;
                case /* string planName */ 3:
                    message.planName = reader.string();
                    break;
                case /* repeated auth.Category categories */ 4:
                    message.categories.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated auth.CategoryLimit categoryLimits */ 5:
                    message.categoryLimits.push(CategoryLimit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPlan1Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 venueId = 2; */
        if (message.venueId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.venueId);
        /* string planName = 3; */
        if (message.planName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.planName);
        /* repeated auth.Category categories = 4; */
        for (let i = 0; i < message.categories.length; i++)
            Category.internalBinaryWrite(message.categories[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated auth.CategoryLimit categoryLimits = 5; */
        for (let i = 0; i < message.categoryLimits.length; i++)
            CategoryLimit.internalBinaryWrite(message.categoryLimits[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddPlan1Request
 */
export const AddPlan1Request = new AddPlan1Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddPlan3Request$Type extends MessageType<AddPlan3Request> {
    constructor() {
        super("auth.AddPlan3Request", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "venueId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "planName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "categories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category },
            { no: 5, name: "categoryLimits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CategoryLimit },
            { no: 6, name: "svgFileData", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddPlan3Request>): AddPlan3Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.venueId = 0n;
        message.planName = "";
        message.categories = [];
        message.categoryLimits = [];
        message.svgFileData = "";
        if (value !== undefined)
            reflectionMergePartial<AddPlan3Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPlan3Request): AddPlan3Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 venueId */ 2:
                    message.venueId = reader.uint64().toBigInt();
                    break;
                case /* string planName */ 3:
                    message.planName = reader.string();
                    break;
                case /* repeated auth.Category categories */ 4:
                    message.categories.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated auth.CategoryLimit categoryLimits */ 5:
                    message.categoryLimits.push(CategoryLimit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string svgFileData */ 6:
                    message.svgFileData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPlan3Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 venueId = 2; */
        if (message.venueId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.venueId);
        /* string planName = 3; */
        if (message.planName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.planName);
        /* repeated auth.Category categories = 4; */
        for (let i = 0; i < message.categories.length; i++)
            Category.internalBinaryWrite(message.categories[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated auth.CategoryLimit categoryLimits = 5; */
        for (let i = 0; i < message.categoryLimits.length; i++)
            CategoryLimit.internalBinaryWrite(message.categoryLimits[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string svgFileData = 6; */
        if (message.svgFileData !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.svgFileData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddPlan3Request
 */
export const AddPlan3Request = new AddPlan3Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckPlanRequest$Type extends MessageType<CheckPlanRequest> {
    constructor() {
        super("auth.CheckPlanRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "svgFileData", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckPlanRequest>): CheckPlanRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.svgFileData = "";
        if (value !== undefined)
            reflectionMergePartial<CheckPlanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckPlanRequest): CheckPlanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* string svgFileData */ 2:
                    message.svgFileData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckPlanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string svgFileData = 2; */
        if (message.svgFileData !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.svgFileData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.CheckPlanRequest
 */
export const CheckPlanRequest = new CheckPlanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckPlanResponse$Type extends MessageType<CheckPlanResponse> {
    constructor() {
        super("auth.CheckPlanResponse", [
            { no: 1, name: "responseTextData", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "optimizedSvgData", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "seatDataList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SeatData },
            { no: 4, name: "categories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category },
            { no: 5, name: "notRecognizedSeats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SeatData }
        ]);
    }
    create(value?: PartialMessage<CheckPlanResponse>): CheckPlanResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.responseTextData = "";
        message.optimizedSvgData = "";
        message.seatDataList = [];
        message.categories = [];
        message.notRecognizedSeats = [];
        if (value !== undefined)
            reflectionMergePartial<CheckPlanResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckPlanResponse): CheckPlanResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string responseTextData */ 1:
                    message.responseTextData = reader.string();
                    break;
                case /* string optimizedSvgData */ 2:
                    message.optimizedSvgData = reader.string();
                    break;
                case /* repeated auth.SeatData seatDataList */ 3:
                    message.seatDataList.push(SeatData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated auth.Category categories */ 4:
                    message.categories.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated auth.SeatData notRecognizedSeats */ 5:
                    message.notRecognizedSeats.push(SeatData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckPlanResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string responseTextData = 1; */
        if (message.responseTextData !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.responseTextData);
        /* string optimizedSvgData = 2; */
        if (message.optimizedSvgData !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.optimizedSvgData);
        /* repeated auth.SeatData seatDataList = 3; */
        for (let i = 0; i < message.seatDataList.length; i++)
            SeatData.internalBinaryWrite(message.seatDataList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated auth.Category categories = 4; */
        for (let i = 0; i < message.categories.length; i++)
            Category.internalBinaryWrite(message.categories[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated auth.SeatData notRecognizedSeats = 5; */
        for (let i = 0; i < message.notRecognizedSeats.length; i++)
            SeatData.internalBinaryWrite(message.notRecognizedSeats[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.CheckPlanResponse
 */
export const CheckPlanResponse = new CheckPlanResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddPlan2Request$Type extends MessageType<AddPlan2Request> {
    constructor() {
        super("auth.AddPlan2Request", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "venueId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "planName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "svgFileData", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddPlan2Request>): AddPlan2Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.venueId = 0n;
        message.planName = "";
        message.svgFileData = "";
        if (value !== undefined)
            reflectionMergePartial<AddPlan2Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPlan2Request): AddPlan2Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 venueId */ 2:
                    message.venueId = reader.uint64().toBigInt();
                    break;
                case /* string planName */ 3:
                    message.planName = reader.string();
                    break;
                case /* string svgFileData */ 4:
                    message.svgFileData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPlan2Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 venueId = 2; */
        if (message.venueId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.venueId);
        /* string planName = 3; */
        if (message.planName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.planName);
        /* string svgFileData = 4; */
        if (message.svgFileData !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.svgFileData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddPlan2Request
 */
export const AddPlan2Request = new AddPlan2Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SavePlanRequest$Type extends MessageType<SavePlanRequest> {
    constructor() {
        super("auth.SavePlanRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "seatingPlan", kind: "message", T: () => SeatingPlan }
        ]);
    }
    create(value?: PartialMessage<SavePlanRequest>): SavePlanRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SavePlanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavePlanRequest): SavePlanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* auth.SeatingPlan seatingPlan */ 2:
                    message.seatingPlan = SeatingPlan.internalBinaryRead(reader, reader.uint32(), options, message.seatingPlan);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SavePlanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.SeatingPlan seatingPlan = 2; */
        if (message.seatingPlan)
            SeatingPlan.internalBinaryWrite(message.seatingPlan, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SavePlanRequest
 */
export const SavePlanRequest = new SavePlanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActionFilteredRequest$Type extends MessageType<GetActionFilteredRequest> {
    constructor() {
        super("auth.GetActionFilteredRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "actual", kind: "message", T: () => NullableBool },
            { no: 3, name: "withoutActionEventData", kind: "message", T: () => NullableBool },
            { no: 4, name: "cityId", kind: "message", T: () => NullableUInt64 },
            { no: 5, name: "venueId", kind: "message", T: () => NullableUInt64 },
            { no: 6, name: "name", kind: "message", T: () => NullableString },
            { no: 7, name: "kindId", kind: "message", T: () => NullableString }
        ]);
    }
    create(value?: PartialMessage<GetActionFilteredRequest>): GetActionFilteredRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetActionFilteredRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActionFilteredRequest): GetActionFilteredRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* auth.NullableBool actual */ 2:
                    message.actual = NullableBool.internalBinaryRead(reader, reader.uint32(), options, message.actual);
                    break;
                case /* auth.NullableBool withoutActionEventData */ 3:
                    message.withoutActionEventData = NullableBool.internalBinaryRead(reader, reader.uint32(), options, message.withoutActionEventData);
                    break;
                case /* auth.NullableUInt64 cityId */ 4:
                    message.cityId = NullableUInt64.internalBinaryRead(reader, reader.uint32(), options, message.cityId);
                    break;
                case /* auth.NullableUInt64 venueId */ 5:
                    message.venueId = NullableUInt64.internalBinaryRead(reader, reader.uint32(), options, message.venueId);
                    break;
                case /* auth.NullableString name */ 6:
                    message.name = NullableString.internalBinaryRead(reader, reader.uint32(), options, message.name);
                    break;
                case /* auth.NullableString kindId */ 7:
                    message.kindId = NullableString.internalBinaryRead(reader, reader.uint32(), options, message.kindId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActionFilteredRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableBool actual = 2; */
        if (message.actual)
            NullableBool.internalBinaryWrite(message.actual, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableBool withoutActionEventData = 3; */
        if (message.withoutActionEventData)
            NullableBool.internalBinaryWrite(message.withoutActionEventData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableUInt64 cityId = 4; */
        if (message.cityId)
            NullableUInt64.internalBinaryWrite(message.cityId, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableUInt64 venueId = 5; */
        if (message.venueId)
            NullableUInt64.internalBinaryWrite(message.venueId, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableString name = 6; */
        if (message.name)
            NullableString.internalBinaryWrite(message.name, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableString kindId = 7; */
        if (message.kindId)
            NullableString.internalBinaryWrite(message.kindId, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetActionFilteredRequest
 */
export const GetActionFilteredRequest = new GetActionFilteredRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActionByIdRequest$Type extends MessageType<GetActionByIdRequest> {
    constructor() {
        super("auth.GetActionByIdRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 10, name: "actionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetActionByIdRequest>): GetActionByIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.actionId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetActionByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActionByIdRequest): GetActionByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 actionId */ 10:
                    message.actionId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActionByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 actionId = 10; */
        if (message.actionId !== 0n)
            writer.tag(10, WireType.Varint).uint64(message.actionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetActionByIdRequest
 */
export const GetActionByIdRequest = new GetActionByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteActionRequest$Type extends MessageType<DeleteActionRequest> {
    constructor() {
        super("auth.DeleteActionRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "actionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteActionRequest>): DeleteActionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.actionId = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteActionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteActionRequest): DeleteActionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 actionId */ 2:
                    message.actionId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteActionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 actionId = 2; */
        if (message.actionId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.actionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.DeleteActionRequest
 */
export const DeleteActionRequest = new DeleteActionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddActionRequest$Type extends MessageType<AddActionRequest> {
    constructor() {
        super("auth.AddActionRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "companyOrganizerId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "kind", kind: "message", T: () => Kind },
            { no: 4, name: "actionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddActionRequest>): AddActionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyOrganizerId = 0n;
        message.actionName = "";
        if (value !== undefined)
            reflectionMergePartial<AddActionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddActionRequest): AddActionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 companyOrganizerId */ 2:
                    message.companyOrganizerId = reader.uint64().toBigInt();
                    break;
                case /* auth.Kind kind */ 3:
                    message.kind = Kind.internalBinaryRead(reader, reader.uint32(), options, message.kind);
                    break;
                case /* string actionName */ 4:
                    message.actionName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddActionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 companyOrganizerId = 2; */
        if (message.companyOrganizerId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.companyOrganizerId);
        /* auth.Kind kind = 3; */
        if (message.kind)
            Kind.internalBinaryWrite(message.kind, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string actionName = 4; */
        if (message.actionName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.actionName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddActionRequest
 */
export const AddActionRequest = new AddActionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveActionRequest$Type extends MessageType<SaveActionRequest> {
    constructor() {
        super("auth.SaveActionRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "data", kind: "message", T: () => Action }
        ]);
    }
    create(value?: PartialMessage<SaveActionRequest>): SaveActionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SaveActionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveActionRequest): SaveActionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* auth.Action data */ 2:
                    message.data = Action.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveActionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.Action data = 2; */
        if (message.data)
            Action.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SaveActionRequest
 */
export const SaveActionRequest = new SaveActionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActionEventFilteredRequest$Type extends MessageType<GetActionEventFilteredRequest> {
    constructor() {
        super("auth.GetActionEventFilteredRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "actionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetActionEventFilteredRequest>): GetActionEventFilteredRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.actionId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetActionEventFilteredRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActionEventFilteredRequest): GetActionEventFilteredRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 actionId */ 2:
                    message.actionId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActionEventFilteredRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 actionId = 2; */
        if (message.actionId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.actionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetActionEventFilteredRequest
 */
export const GetActionEventFilteredRequest = new GetActionEventFilteredRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddActionEventRequest$Type extends MessageType<AddActionEventRequest> {
    constructor() {
        super("auth.AddActionEventRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionEvent }
        ]);
    }
    create(value?: PartialMessage<AddActionEventRequest>): AddActionEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<AddActionEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddActionEventRequest): AddActionEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* repeated auth.ActionEvent data */ 2:
                    message.data.push(ActionEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddActionEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated auth.ActionEvent data = 2; */
        for (let i = 0; i < message.data.length; i++)
            ActionEvent.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddActionEventRequest
 */
export const AddActionEventRequest = new AddActionEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveActionEventRequest$Type extends MessageType<SaveActionEventRequest> {
    constructor() {
        super("auth.SaveActionEventRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "data", kind: "message", T: () => ActionEvent }
        ]);
    }
    create(value?: PartialMessage<SaveActionEventRequest>): SaveActionEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SaveActionEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveActionEventRequest): SaveActionEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* auth.ActionEvent data */ 2:
                    message.data = ActionEvent.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveActionEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.ActionEvent data = 2; */
        if (message.data)
            ActionEvent.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SaveActionEventRequest
 */
export const SaveActionEventRequest = new SaveActionEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteActionEventRequest$Type extends MessageType<DeleteActionEventRequest> {
    constructor() {
        super("auth.DeleteActionEventRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteActionEventRequest>): DeleteActionEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteActionEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteActionEventRequest): DeleteActionEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteActionEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.DeleteActionEventRequest
 */
export const DeleteActionEventRequest = new DeleteActionEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGatewayEventListRequest$Type extends MessageType<GetGatewayEventListRequest> {
    constructor() {
        super("auth.GetGatewayEventListRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "data", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetGatewayEventListRequest>): GetGatewayEventListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = 0;
        if (value !== undefined)
            reflectionMergePartial<GetGatewayEventListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGatewayEventListRequest): GetGatewayEventListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* int32 data */ 2:
                    message.data = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGatewayEventListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 data = 2; */
        if (message.data !== 0)
            writer.tag(2, WireType.Varint).int32(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetGatewayEventListRequest
 */
export const GetGatewayEventListRequest = new GetGatewayEventListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSeatingPlanByIdRequest$Type extends MessageType<GetSeatingPlanByIdRequest> {
    constructor() {
        super("auth.GetSeatingPlanByIdRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "seatingPlanId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetSeatingPlanByIdRequest>): GetSeatingPlanByIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seatingPlanId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetSeatingPlanByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSeatingPlanByIdRequest): GetSeatingPlanByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* uint64 seatingPlanId */ 2:
                    message.seatingPlanId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSeatingPlanByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 seatingPlanId = 2; */
        if (message.seatingPlanId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.seatingPlanId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetSeatingPlanByIdRequest
 */
export const GetSeatingPlanByIdRequest = new GetSeatingPlanByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSeatingPlanListRequest$Type extends MessageType<GetSeatingPlanListRequest> {
    constructor() {
        super("auth.GetSeatingPlanListRequest", [
            { no: 1, name: "authorizedRequest", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "venueId", kind: "message", T: () => NullableUInt64 }
        ]);
    }
    create(value?: PartialMessage<GetSeatingPlanListRequest>): GetSeatingPlanListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSeatingPlanListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSeatingPlanListRequest): GetSeatingPlanListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest authorizedRequest */ 1:
                    message.authorizedRequest = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.authorizedRequest);
                    break;
                case /* auth.NullableUInt64 venueId */ 2:
                    message.venueId = NullableUInt64.internalBinaryRead(reader, reader.uint32(), options, message.venueId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSeatingPlanListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest authorizedRequest = 1; */
        if (message.authorizedRequest)
            AuthorizedRequest.internalBinaryWrite(message.authorizedRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.NullableUInt64 venueId = 2; */
        if (message.venueId)
            NullableUInt64.internalBinaryWrite(message.venueId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetSeatingPlanListRequest
 */
export const GetSeatingPlanListRequest = new GetSeatingPlanListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSeatingPlanRequest$Type extends MessageType<DeleteSeatingPlanRequest> {
    constructor() {
        super("auth.DeleteSeatingPlanRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteSeatingPlanRequest>): DeleteSeatingPlanRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteSeatingPlanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSeatingPlanRequest): DeleteSeatingPlanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSeatingPlanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.DeleteSeatingPlanRequest
 */
export const DeleteSeatingPlanRequest = new DeleteSeatingPlanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddVenueRequest$Type extends MessageType<AddVenueRequest> {
    constructor() {
        super("auth.AddVenueRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "cityId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddVenueRequest>): AddVenueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cityId = 0n;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<AddVenueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddVenueRequest): AddVenueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 cityId */ 2:
                    message.cityId = reader.uint64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddVenueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 cityId = 2; */
        if (message.cityId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.cityId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddVenueRequest
 */
export const AddVenueRequest = new AddVenueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddVenueResponse$Type extends MessageType<AddVenueResponse> {
    constructor() {
        super("auth.AddVenueResponse", [
            { no: 1, name: "venue", kind: "message", T: () => Venue }
        ]);
    }
    create(value?: PartialMessage<AddVenueResponse>): AddVenueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddVenueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddVenueResponse): AddVenueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.Venue venue */ 1:
                    message.venue = Venue.internalBinaryRead(reader, reader.uint32(), options, message.venue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddVenueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.Venue venue = 1; */
        if (message.venue)
            Venue.internalBinaryWrite(message.venue, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AddVenueResponse
 */
export const AddVenueResponse = new AddVenueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NullableImage$Type extends MessageType<NullableImage> {
    constructor() {
        super("auth.NullableImage", [
            { no: 1, name: "null", kind: "enum", oneof: "kind", T: () => ["google.protobuf.NullValue", NullValue] },
            { no: 2, name: "image", kind: "message", oneof: "kind", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<NullableImage>): NullableImage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.kind = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<NullableImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NullableImage): NullableImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.NullValue null */ 1:
                    message.kind = {
                        oneofKind: "null",
                        null: reader.int32()
                    };
                    break;
                case /* auth.Image image */ 2:
                    message.kind = {
                        oneofKind: "image",
                        image: Image.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).image)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NullableImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.NullValue null = 1; */
        if (message.kind.oneofKind === "null")
            writer.tag(1, WireType.Varint).int32(message.kind.null);
        /* auth.Image image = 2; */
        if (message.kind.oneofKind === "image")
            Image.internalBinaryWrite(message.kind.image, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.NullableImage
 */
export const NullableImage = new NullableImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveVenueRequest$Type extends MessageType<SaveVenueRequest> {
    constructor() {
        super("auth.SaveVenueRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "simpleVenue", kind: "message", T: () => SimpleVenue },
            { no: 3, name: "bigImage", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<SaveVenueRequest>): SaveVenueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SaveVenueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveVenueRequest): SaveVenueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* auth.SimpleVenue simpleVenue */ 2:
                    message.simpleVenue = SimpleVenue.internalBinaryRead(reader, reader.uint32(), options, message.simpleVenue);
                    break;
                case /* auth.Image bigImage */ 3:
                    message.bigImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.bigImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveVenueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.SimpleVenue simpleVenue = 2; */
        if (message.simpleVenue)
            SimpleVenue.internalBinaryWrite(message.simpleVenue, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* auth.Image bigImage = 3; */
        if (message.bigImage)
            Image.internalBinaryWrite(message.bigImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SaveVenueRequest
 */
export const SaveVenueRequest = new SaveVenueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveVenueResponse$Type extends MessageType<SaveVenueResponse> {
    constructor() {
        super("auth.SaveVenueResponse", [
            { no: 1, name: "venue", kind: "message", T: () => Venue }
        ]);
    }
    create(value?: PartialMessage<SaveVenueResponse>): SaveVenueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SaveVenueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveVenueResponse): SaveVenueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.Venue venue */ 1:
                    message.venue = Venue.internalBinaryRead(reader, reader.uint32(), options, message.venue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveVenueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.Venue venue = 1; */
        if (message.venue)
            Venue.internalBinaryWrite(message.venue, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SaveVenueResponse
 */
export const SaveVenueResponse = new SaveVenueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionEventSyncRequest$Type extends MessageType<ActionEventSyncRequest> {
    constructor() {
        super("auth.ActionEventSyncRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ActionEventSyncRequest>): ActionEventSyncRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<ActionEventSyncRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionEventSyncRequest): ActionEventSyncRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionEventSyncRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.ActionEventSyncRequest
 */
export const ActionEventSyncRequest = new ActionEventSyncRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionEventSyncResponse$Type extends MessageType<ActionEventSyncResponse> {
    constructor() {
        super("auth.ActionEventSyncResponse", [
            { no: 1, name: "actionEventData", kind: "message", T: () => ActionEventData },
            { no: 2, name: "priceChanged", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "report", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ActionEventSyncResponse>): ActionEventSyncResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.priceChanged = false;
        message.report = "";
        if (value !== undefined)
            reflectionMergePartial<ActionEventSyncResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionEventSyncResponse): ActionEventSyncResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.ActionEventData actionEventData */ 1:
                    message.actionEventData = ActionEventData.internalBinaryRead(reader, reader.uint32(), options, message.actionEventData);
                    break;
                case /* bool priceChanged */ 2:
                    message.priceChanged = reader.bool();
                    break;
                case /* string report */ 3:
                    message.report = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionEventSyncResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.ActionEventData actionEventData = 1; */
        if (message.actionEventData)
            ActionEventData.internalBinaryWrite(message.actionEventData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool priceChanged = 2; */
        if (message.priceChanged !== false)
            writer.tag(2, WireType.Varint).bool(message.priceChanged);
        /* string report = 3; */
        if (message.report !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.report);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.ActionEventSyncResponse
 */
export const ActionEventSyncResponse = new ActionEventSyncResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSyncReportRequest$Type extends MessageType<GetSyncReportRequest> {
    constructor() {
        super("auth.GetSyncReportRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "actionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "planId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "gatewayEvent", kind: "message", T: () => GatewayEvent }
        ]);
    }
    create(value?: PartialMessage<GetSyncReportRequest>): GetSyncReportRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.actionId = 0n;
        message.planId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetSyncReportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSyncReportRequest): GetSyncReportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 actionId */ 2:
                    message.actionId = reader.uint64().toBigInt();
                    break;
                case /* uint64 planId */ 3:
                    message.planId = reader.uint64().toBigInt();
                    break;
                case /* auth.GatewayEvent gatewayEvent */ 4:
                    message.gatewayEvent = GatewayEvent.internalBinaryRead(reader, reader.uint32(), options, message.gatewayEvent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSyncReportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 actionId = 2; */
        if (message.actionId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.actionId);
        /* uint64 planId = 3; */
        if (message.planId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.planId);
        /* auth.GatewayEvent gatewayEvent = 4; */
        if (message.gatewayEvent)
            GatewayEvent.internalBinaryWrite(message.gatewayEvent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetSyncReportRequest
 */
export const GetSyncReportRequest = new GetSyncReportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSyncReportResponse$Type extends MessageType<GetSyncReportResponse> {
    constructor() {
        super("auth.GetSyncReportResponse", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSyncReportResponse>): GetSyncReportResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<GetSyncReportResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSyncReportResponse): GetSyncReportResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSyncReportResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetSyncReportResponse
 */
export const GetSyncReportResponse = new GetSyncReportResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGatewayEventInfoRequest$Type extends MessageType<GetGatewayEventInfoRequest> {
    constructor() {
        super("auth.GetGatewayEventInfoRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "gatewayEvent", kind: "message", T: () => GatewayEvent }
        ]);
    }
    create(value?: PartialMessage<GetGatewayEventInfoRequest>): GetGatewayEventInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGatewayEventInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGatewayEventInfoRequest): GetGatewayEventInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* auth.GatewayEvent gatewayEvent */ 2:
                    message.gatewayEvent = GatewayEvent.internalBinaryRead(reader, reader.uint32(), options, message.gatewayEvent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGatewayEventInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.GatewayEvent gatewayEvent = 2; */
        if (message.gatewayEvent)
            GatewayEvent.internalBinaryWrite(message.gatewayEvent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetGatewayEventInfoRequest
 */
export const GetGatewayEventInfoRequest = new GetGatewayEventInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGatewayEventInfoResponse$Type extends MessageType<GetGatewayEventInfoResponse> {
    constructor() {
        super("auth.GetGatewayEventInfoResponse", [
            { no: 1, name: "report", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGatewayEventInfoResponse>): GetGatewayEventInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.report = "";
        if (value !== undefined)
            reflectionMergePartial<GetGatewayEventInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGatewayEventInfoResponse): GetGatewayEventInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string report */ 1:
                    message.report = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGatewayEventInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string report = 1; */
        if (message.report !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.report);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetGatewayEventInfoResponse
 */
export const GetGatewayEventInfoResponse = new GetGatewayEventInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetActionBookletRequest$Type extends MessageType<SetActionBookletRequest> {
    constructor() {
        super("auth.SetActionBookletRequest", [
            { no: 1, name: "auth", kind: "message", T: () => AuthorizedRequest },
            { no: 2, name: "actionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "type", kind: "message", T: () => BookletType },
            { no: 4, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetActionBookletRequest>): SetActionBookletRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.actionId = 0n;
        message.data = "";
        if (value !== undefined)
            reflectionMergePartial<SetActionBookletRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetActionBookletRequest): SetActionBookletRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.AuthorizedRequest auth */ 1:
                    message.auth = AuthorizedRequest.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                case /* uint64 actionId */ 2:
                    message.actionId = reader.uint64().toBigInt();
                    break;
                case /* auth.BookletType type */ 3:
                    message.type = BookletType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* string data */ 4:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetActionBookletRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.AuthorizedRequest auth = 1; */
        if (message.auth)
            AuthorizedRequest.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 actionId = 2; */
        if (message.actionId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.actionId);
        /* auth.BookletType type = 3; */
        if (message.type)
            BookletType.internalBinaryWrite(message.type, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string data = 4; */
        if (message.data !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SetActionBookletRequest
 */
export const SetActionBookletRequest = new SetActionBookletRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetActionBookletResponse$Type extends MessageType<SetActionBookletResponse> {
    constructor() {
        super("auth.SetActionBookletResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetActionBookletResponse>): SetActionBookletResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<SetActionBookletResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetActionBookletResponse): SetActionBookletResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetActionBookletResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SetActionBookletResponse
 */
export const SetActionBookletResponse = new SetActionBookletResponse$Type();
