// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "auth.proto" (package "auth", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthGrpc } from "./auth";
import type { SetActionBookletResponse } from "./data_types_requests";
import type { SetActionBookletRequest } from "./data_types_requests";
import type { GetGatewayEventInfoResponse } from "./data_types_requests";
import type { GetGatewayEventInfoRequest } from "./data_types_requests";
import type { GetSyncReportResponse } from "./data_types_requests";
import type { GetSyncReportRequest } from "./data_types_requests";
import type { ActionEventSyncResponse } from "./data_types_requests";
import type { ActionEventSyncRequest } from "./data_types_requests";
import type { SavePlanRequest } from "./data_types_requests";
import type { AddPlan3Request } from "./data_types_requests";
import type { AddPlan2Request } from "./data_types_requests";
import type { CheckPlanResponse } from "./data_types_requests";
import type { CheckPlanRequest } from "./data_types_requests";
import type { AddPlan1Request } from "./data_types_requests";
import type { SaveCityRequest } from "./data_types_requests";
import type { AddCityRequest } from "./data_types_requests";
import type { SaveCountryRequest } from "./data_types_requests";
import type { AddCountryRequest } from "./data_types_requests";
import type { SaveActionEventRequest } from "./data_types_requests";
import type { GatewayEventList } from "./data_types";
import type { GetGatewayEventListRequest } from "./data_types_requests";
import type { SaveActionRequest } from "./data_types_requests";
import type { AddActionRequest } from "./data_types_requests";
import type { ActionEvent } from "./data_types";
import type { DeleteActionEventRequest } from "./data_types_requests";
import type { AddActionEventRequest } from "./data_types_requests";
import type { ActionEventList } from "./data_types";
import type { GetActionEventFilteredRequest } from "./data_types_requests";
import type { DeleteActionRequest } from "./data_types_requests";
import type { Action } from "./data_types";
import type { GetActionByIdRequest } from "./data_types_requests";
import type { SimpleActionList } from "./data_types";
import type { GetActionFilteredRequest } from "./data_types_requests";
import type { GatewayList } from "./data_types";
import type { DeleteSeatingPlanRequest } from "./data_types_requests";
import type { GetSeatingPlanFullData } from "./data_types";
import type { SeatingPlan } from "./data_types";
import type { GetSeatingPlanByIdRequest } from "./data_types_requests";
import type { SimpleSeatingPlanList } from "./data_types";
import type { GetSeatingPlanListRequest } from "./data_types_requests";
import type { DeleteVenueRequest } from "./data_types_requests";
import type { SaveVenueResponse } from "./data_types_requests";
import type { SaveVenueRequest } from "./data_types_requests";
import type { AddVenueResponse } from "./data_types_requests";
import type { AddVenueRequest } from "./data_types_requests";
import type { Venue } from "./data_types";
import type { GetVenueByIdRequest } from "./data_types_requests";
import type { GetVenueFilteredRequest } from "./data_types_requests";
import type { SimpleVenueList } from "./data_types";
import type { GetVenueByCityRequest } from "./data_types_requests";
import type { DeleteCityRequest } from "./data_types_requests";
import type { CityList } from "./data_types";
import type { GetCityByCountryRequest } from "./data_types_requests";
import type { City } from "./data_types";
import type { DeleteCountryRequest } from "./data_types_requests";
import type { Country } from "./data_types";
import type { EOrganizerList } from "./data_types";
import type { CurrencyList } from "./data_types";
import type { ZoneIdList } from "./data_types";
import type { GenreList } from "./data_types";
import type { BookletTypeList } from "./data_types";
import type { QuotaFormatList } from "./data_types";
import type { BarcodeFormatList } from "./data_types";
import type { VenueTypeList } from "./data_types";
import type { KindList } from "./data_types";
import type { SessionInfo } from "./auth_requests";
import type { PrepareInitialDataResult } from "./auth_requests";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { AuthCheckResult } from "./auth_requests";
import type { AuthorizedRequest } from "./auth_requests";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AuthResult } from "./auth_requests";
import type { AuthRequest } from "./auth_requests";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Services
 *
 * @generated from protobuf service auth.AuthGrpc
 */
export interface IAuthGrpcClient {
    /**
     * Авторизация
     *
     * @generated from protobuf rpc: Auth(auth.AuthRequest) returns (auth.AuthResult);
     */
    auth(input: AuthRequest, options?: RpcOptions): UnaryCall<AuthRequest, AuthResult>;
    /**
     * Проверка авторизации
     *
     * @generated from protobuf rpc: AuthCheck(auth.AuthorizedRequest) returns (auth.AuthCheckResult);
     */
    authCheck(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, AuthCheckResult>;
    /**
     * Подготовка данных
     *
     * @generated from protobuf rpc: PrepareInitialData(auth.AuthorizedRequest) returns (stream auth.PrepareInitialDataResult);
     */
    prepareInitialData(input: AuthorizedRequest, options?: RpcOptions): ServerStreamingCall<AuthorizedRequest, PrepareInitialDataResult>;
    // INITIAL DATA

    /**
     * Session
     * Информация о сеансе
     *
     * @generated from protobuf rpc: GetSessionInfo(auth.AuthorizedRequest) returns (auth.SessionInfo);
     */
    getSessionInfo(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, SessionInfo>;
    /**
     * Kind
     * Список всех разделов для представлений
     *
     * @generated from protobuf rpc: GetInitialKindData(auth.AuthorizedRequest) returns (auth.KindList);
     */
    getInitialKindData(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, KindList>;
    /**
     * VenueType
     * Список всех типов мест проведений
     *
     * @generated from protobuf rpc: GetInitialVenueTypeDataList(auth.AuthorizedRequest) returns (auth.VenueTypeList);
     */
    getInitialVenueTypeDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, VenueTypeList>;
    // TODO Misc 
    // Частичный URL схемы зала конкретного сеанса. Для получения полного URL необходимо в конце добавить id сеанса.
    // Частичный URL буклета конкретного представления. Для получения полного URL необходимо в конце добавить id представления.
    // Количество представлений, находящихся в настоящее время в продаже
    // Количество сеансов, находящихся в настоящее время в продаже

    /**
     * BarcodeFormat
     * Список всех форматов штрихкодов
     *
     * @generated from protobuf rpc: GetInitialBarcodeFormatDataList(auth.AuthorizedRequest) returns (auth.BarcodeFormatList);
     */
    getInitialBarcodeFormatDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, BarcodeFormatList>;
    /**
     * QuotaFormat
     * Список всех форматов файлов квоты
     *
     * @generated from protobuf rpc: GetInitialQuotaFormatDataList(auth.AuthorizedRequest) returns (auth.QuotaFormatList);
     */
    getInitialQuotaFormatDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, QuotaFormatList>;
    /**
     * BookletType
     * Список всех форматов буклетов
     *
     * @generated from protobuf rpc: GetInitialBookletTypeDataList(auth.AuthorizedRequest) returns (auth.BookletTypeList);
     */
    getInitialBookletTypeDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, BookletTypeList>;
    /**
     * Genre
     * Список всех жанров
     *
     * @generated from protobuf rpc: GetInitialGenreDataList(auth.AuthorizedRequest) returns (auth.GenreList);
     */
    getInitialGenreDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, GenreList>;
    /**
     * ZoneId
     * Список всех часовых поясов
     *
     * @generated from protobuf rpc: GetZoneIdDataList(auth.AuthorizedRequest) returns (auth.ZoneIdList);
     */
    getZoneIdDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, ZoneIdList>;
    /**
     * Currency
     * Список всех валют
     *
     * @generated from protobuf rpc: GetInitialCurrencyDataList(auth.AuthorizedRequest) returns (auth.CurrencyList);
     */
    getInitialCurrencyDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, CurrencyList>;
    // Массив начальных данных

    /**
     * EOrganizer
     * Список всех компаний-организаторов, заполняется только для пользователя с ролью оператор
     *
     * @generated from protobuf rpc: GetInitialEOrganizerDataList(auth.AuthorizedRequest) returns (auth.EOrganizerList);
     */
    getInitialEOrganizerDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, EOrganizerList>;
    /**
     * Country
     * Список всех стран
     *
     * @generated from protobuf rpc: GetInitialCountryData(auth.AuthorizedRequest) returns (stream auth.Country);
     */
    getInitialCountryData(input: AuthorizedRequest, options?: RpcOptions): ServerStreamingCall<AuthorizedRequest, Country>;
    /**
     * @generated from protobuf rpc: DeleteCountry(auth.DeleteCountryRequest) returns (auth.Country);
     */
    deleteCountry(input: DeleteCountryRequest, options?: RpcOptions): UnaryCall<DeleteCountryRequest, Country>;
    /**
     * City
     * Список всех городов
     *
     * @generated from protobuf rpc: GetInitialCityData(auth.AuthorizedRequest) returns (stream auth.City);
     */
    getInitialCityData(input: AuthorizedRequest, options?: RpcOptions): ServerStreamingCall<AuthorizedRequest, City>;
    /**
     * @generated from protobuf rpc: GetInitialCityByCountryData(auth.GetCityByCountryRequest) returns (stream auth.City);
     */
    getInitialCityByCountryData(input: GetCityByCountryRequest, options?: RpcOptions): ServerStreamingCall<GetCityByCountryRequest, City>;
    /**
     * @generated from protobuf rpc: GetInitialCityListByCountryData(auth.GetCityByCountryRequest) returns (auth.CityList);
     */
    getInitialCityListByCountryData(input: GetCityByCountryRequest, options?: RpcOptions): UnaryCall<GetCityByCountryRequest, CityList>;
    /**
     * @generated from protobuf rpc: DeleteCity(auth.DeleteCityRequest) returns (auth.City);
     */
    deleteCity(input: DeleteCityRequest, options?: RpcOptions): UnaryCall<DeleteCityRequest, City>;
    /**
     * Venue
     * Список всех мест проведений
     *
     * @generated from protobuf rpc: GetInitialVenueByCityData(auth.GetVenueByCityRequest) returns (auth.SimpleVenueList);
     */
    getInitialVenueByCityData(input: GetVenueByCityRequest, options?: RpcOptions): UnaryCall<GetVenueByCityRequest, SimpleVenueList>;
    /**
     * @generated from protobuf rpc: GetInitialVenueDataFiltered(auth.GetVenueFilteredRequest) returns (auth.SimpleVenueList);
     */
    getInitialVenueDataFiltered(input: GetVenueFilteredRequest, options?: RpcOptions): UnaryCall<GetVenueFilteredRequest, SimpleVenueList>;
    /**
     * @generated from protobuf rpc: GetInitialVenueByIdData(auth.GetVenueByIdRequest) returns (auth.Venue);
     */
    getInitialVenueByIdData(input: GetVenueByIdRequest, options?: RpcOptions): UnaryCall<GetVenueByIdRequest, Venue>;
    /**
     * @generated from protobuf rpc: AddVenue(auth.AddVenueRequest) returns (auth.AddVenueResponse);
     */
    addVenue(input: AddVenueRequest, options?: RpcOptions): UnaryCall<AddVenueRequest, AddVenueResponse>;
    /**
     * @generated from protobuf rpc: SaveVenue(auth.SaveVenueRequest) returns (auth.SaveVenueResponse);
     */
    saveVenue(input: SaveVenueRequest, options?: RpcOptions): UnaryCall<SaveVenueRequest, SaveVenueResponse>;
    /**
     * @generated from protobuf rpc: DeleteVenue(auth.DeleteVenueRequest) returns (auth.Venue);
     */
    deleteVenue(input: DeleteVenueRequest, options?: RpcOptions): UnaryCall<DeleteVenueRequest, Venue>;
    /**
     * SeatingPlan
     * Список доступных схем залов
     *
     * @generated from protobuf rpc: GetInitialSeatingPlanDataList(auth.GetSeatingPlanListRequest) returns (auth.SimpleSeatingPlanList);
     */
    getInitialSeatingPlanDataList(input: GetSeatingPlanListRequest, options?: RpcOptions): UnaryCall<GetSeatingPlanListRequest, SimpleSeatingPlanList>;
    /**
     * @generated from protobuf rpc: GetInitialSeatingPlanByIdData(auth.GetSeatingPlanByIdRequest) returns (auth.SeatingPlan);
     */
    getInitialSeatingPlanByIdData(input: GetSeatingPlanByIdRequest, options?: RpcOptions): UnaryCall<GetSeatingPlanByIdRequest, SeatingPlan>;
    /**
     * @generated from protobuf rpc: GetSeatingPlanByIdFullData(auth.GetSeatingPlanByIdRequest) returns (auth.GetSeatingPlanFullData);
     */
    getSeatingPlanByIdFullData(input: GetSeatingPlanByIdRequest, options?: RpcOptions): UnaryCall<GetSeatingPlanByIdRequest, GetSeatingPlanFullData>;
    /**
     * @generated from protobuf rpc: DeleteSeatingPlan(auth.DeleteSeatingPlanRequest) returns (auth.SeatingPlan);
     */
    deleteSeatingPlan(input: DeleteSeatingPlanRequest, options?: RpcOptions): UnaryCall<DeleteSeatingPlanRequest, SeatingPlan>;
    /**
     * Gateway
     * Список доступных подключений к ВБС
     *
     * @generated from protobuf rpc: GetInitialSGatewayDataList(auth.AuthorizedRequest) returns (auth.GatewayList);
     */
    getInitialSGatewayDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, GatewayList>;
    /**
     * Action
     * Список актуальных представлений
     *
     * @generated from protobuf rpc: GetInitialActionDataList(auth.GetActionFilteredRequest) returns (auth.SimpleActionList);
     */
    getInitialActionDataList(input: GetActionFilteredRequest, options?: RpcOptions): UnaryCall<GetActionFilteredRequest, SimpleActionList>;
    /**
     * @generated from protobuf rpc: GetInitialActionIdData(auth.GetActionByIdRequest) returns (auth.Action);
     */
    getInitialActionIdData(input: GetActionByIdRequest, options?: RpcOptions): UnaryCall<GetActionByIdRequest, Action>;
    /**
     * @generated from protobuf rpc: DeleteAction(auth.DeleteActionRequest) returns (auth.Action);
     */
    deleteAction(input: DeleteActionRequest, options?: RpcOptions): UnaryCall<DeleteActionRequest, Action>;
    /**
     * ActionEvent
     * Список всех неархивных сеансов
     *
     * @generated from protobuf rpc: GetInitialActionEventDataList(auth.GetActionEventFilteredRequest) returns (auth.ActionEventList);
     */
    getInitialActionEventDataList(input: GetActionEventFilteredRequest, options?: RpcOptions): UnaryCall<GetActionEventFilteredRequest, ActionEventList>;
    /**
     * Добавление новых сеансов. Можно добавить несколько сеансов, однако есть ограничение, общее количество мест всех добавляемых сеансов не должно превышать 50 тысяч.
     *
     * @generated from protobuf rpc: AddActionEvent(auth.AddActionEventRequest) returns (auth.ActionEventList);
     */
    addActionEvent(input: AddActionEventRequest, options?: RpcOptions): UnaryCall<AddActionEventRequest, ActionEventList>;
    /**
     * @generated from protobuf rpc: deleteActionEvent(auth.DeleteActionEventRequest) returns (auth.ActionEvent);
     */
    deleteActionEvent(input: DeleteActionEventRequest, options?: RpcOptions): UnaryCall<DeleteActionEventRequest, ActionEvent>;
    /**
     * Добавление нового представления для организатора.
     *
     * @generated from protobuf rpc: AddAction(auth.AddActionRequest) returns (auth.Action);
     */
    addAction(input: AddActionRequest, options?: RpcOptions): UnaryCall<AddActionRequest, Action>;
    /**
     * Сохранение представления.
     *
     * @generated from protobuf rpc: SaveAction(auth.SaveActionRequest) returns (auth.Action);
     */
    saveAction(input: SaveActionRequest, options?: RpcOptions): UnaryCall<SaveActionRequest, Action>;
    /**
     * Получение доступных сеансов в подключении к ВБС. Полученные данные необходимы для создания нового сеанса, использующего данное подключение к ВБС.
     *
     * @generated from protobuf rpc: GetGatewayEventList(auth.GetGatewayEventListRequest) returns (auth.GatewayEventList);
     */
    getGatewayEventList(input: GetGatewayEventListRequest, options?: RpcOptions): UnaryCall<GetGatewayEventListRequest, GatewayEventList>;
    /**
     * Сохранение сеанса.
     *
     * @generated from protobuf rpc: SaveActionEvent(auth.SaveActionEventRequest) returns (auth.ActionEvent);
     */
    saveActionEvent(input: SaveActionEventRequest, options?: RpcOptions): UnaryCall<SaveActionEventRequest, ActionEvent>;
    /**
     * Добавление новой страны
     *
     * @generated from protobuf rpc: AddCountry(auth.AddCountryRequest) returns (auth.Country);
     */
    addCountry(input: AddCountryRequest, options?: RpcOptions): UnaryCall<AddCountryRequest, Country>;
    /**
     * Сохранение страны
     *
     * @generated from protobuf rpc: SaveCountry(auth.SaveCountryRequest) returns (auth.Country);
     */
    saveCountry(input: SaveCountryRequest, options?: RpcOptions): UnaryCall<SaveCountryRequest, Country>;
    /**
     * Добавление нового города
     *
     * @generated from protobuf rpc: AddCity(auth.AddCityRequest) returns (auth.City);
     */
    addCity(input: AddCityRequest, options?: RpcOptions): UnaryCall<AddCityRequest, City>;
    /**
     * Сохранение города
     *
     * @generated from protobuf rpc: SaveCity(auth.SaveCityRequest) returns (auth.City);
     */
    saveCity(input: SaveCityRequest, options?: RpcOptions): UnaryCall<SaveCityRequest, City>;
    /**
     * Добавление простого плана рассадки
     *
     * @generated from protobuf rpc: AddPlan1(auth.AddPlan1Request) returns (auth.SeatingPlan);
     */
    addPlan1(input: AddPlan1Request, options?: RpcOptions): UnaryCall<AddPlan1Request, SeatingPlan>;
    /**
     * Добавление плана рассадки со схемой
     *
     * @generated from protobuf rpc: CheckPlan(auth.CheckPlanRequest) returns (auth.CheckPlanResponse);
     */
    checkPlan(input: CheckPlanRequest, options?: RpcOptions): UnaryCall<CheckPlanRequest, CheckPlanResponse>;
    /**
     * @generated from protobuf rpc: AddPlan2(auth.AddPlan2Request) returns (auth.SeatingPlan);
     */
    addPlan2(input: AddPlan2Request, options?: RpcOptions): UnaryCall<AddPlan2Request, SeatingPlan>;
    /**
     * Создание комбинированной схемы
     *
     * @generated from protobuf rpc: AddPlan3(auth.AddPlan3Request) returns (auth.SeatingPlan);
     */
    addPlan3(input: AddPlan3Request, options?: RpcOptions): UnaryCall<AddPlan3Request, SeatingPlan>;
    /**
     * Сохранени плана рассадки
     *
     * @generated from protobuf rpc: SavePlan(auth.SavePlanRequest) returns (auth.SeatingPlan);
     */
    savePlan(input: SavePlanRequest, options?: RpcOptions): UnaryCall<SavePlanRequest, SeatingPlan>;
    /**
     * Работа с ВБС
     *
     * @generated from protobuf rpc: SyncEts(auth.ActionEventSyncRequest) returns (auth.ActionEventSyncResponse);
     */
    syncEts(input: ActionEventSyncRequest, options?: RpcOptions): UnaryCall<ActionEventSyncRequest, ActionEventSyncResponse>;
    /**
     * @generated from protobuf rpc: GetSyncReport(auth.GetSyncReportRequest) returns (auth.GetSyncReportResponse);
     */
    getSyncReport(input: GetSyncReportRequest, options?: RpcOptions): UnaryCall<GetSyncReportRequest, GetSyncReportResponse>;
    /**
     * @generated from protobuf rpc: GetGatewayEventInfo(auth.GetGatewayEventInfoRequest) returns (auth.GetGatewayEventInfoResponse);
     */
    getGatewayEventInfo(input: GetGatewayEventInfoRequest, options?: RpcOptions): UnaryCall<GetGatewayEventInfoRequest, GetGatewayEventInfoResponse>;
    /**
     * @generated from protobuf rpc: SetActionBooklet(auth.SetActionBookletRequest) returns (auth.SetActionBookletResponse);
     */
    setActionBooklet(input: SetActionBookletRequest, options?: RpcOptions): UnaryCall<SetActionBookletRequest, SetActionBookletResponse>;
}
/**
 * Services
 *
 * @generated from protobuf service auth.AuthGrpc
 */
export class AuthGrpcClient implements IAuthGrpcClient, ServiceInfo {
    typeName = AuthGrpc.typeName;
    methods = AuthGrpc.methods;
    options = AuthGrpc.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Авторизация
     *
     * @generated from protobuf rpc: Auth(auth.AuthRequest) returns (auth.AuthResult);
     */
    auth(input: AuthRequest, options?: RpcOptions): UnaryCall<AuthRequest, AuthResult> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthRequest, AuthResult>("unary", this._transport, method, opt, input);
    }
    /**
     * Проверка авторизации
     *
     * @generated from protobuf rpc: AuthCheck(auth.AuthorizedRequest) returns (auth.AuthCheckResult);
     */
    authCheck(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, AuthCheckResult> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, AuthCheckResult>("unary", this._transport, method, opt, input);
    }
    /**
     * Подготовка данных
     *
     * @generated from protobuf rpc: PrepareInitialData(auth.AuthorizedRequest) returns (stream auth.PrepareInitialDataResult);
     */
    prepareInitialData(input: AuthorizedRequest, options?: RpcOptions): ServerStreamingCall<AuthorizedRequest, PrepareInitialDataResult> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, PrepareInitialDataResult>("serverStreaming", this._transport, method, opt, input);
    }
    // INITIAL DATA

    /**
     * Session
     * Информация о сеансе
     *
     * @generated from protobuf rpc: GetSessionInfo(auth.AuthorizedRequest) returns (auth.SessionInfo);
     */
    getSessionInfo(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, SessionInfo> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, SessionInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * Kind
     * Список всех разделов для представлений
     *
     * @generated from protobuf rpc: GetInitialKindData(auth.AuthorizedRequest) returns (auth.KindList);
     */
    getInitialKindData(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, KindList> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, KindList>("unary", this._transport, method, opt, input);
    }
    /**
     * VenueType
     * Список всех типов мест проведений
     *
     * @generated from protobuf rpc: GetInitialVenueTypeDataList(auth.AuthorizedRequest) returns (auth.VenueTypeList);
     */
    getInitialVenueTypeDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, VenueTypeList> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, VenueTypeList>("unary", this._transport, method, opt, input);
    }
    // TODO Misc 
    // Частичный URL схемы зала конкретного сеанса. Для получения полного URL необходимо в конце добавить id сеанса.
    // Частичный URL буклета конкретного представления. Для получения полного URL необходимо в конце добавить id представления.
    // Количество представлений, находящихся в настоящее время в продаже
    // Количество сеансов, находящихся в настоящее время в продаже

    /**
     * BarcodeFormat
     * Список всех форматов штрихкодов
     *
     * @generated from protobuf rpc: GetInitialBarcodeFormatDataList(auth.AuthorizedRequest) returns (auth.BarcodeFormatList);
     */
    getInitialBarcodeFormatDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, BarcodeFormatList> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, BarcodeFormatList>("unary", this._transport, method, opt, input);
    }
    /**
     * QuotaFormat
     * Список всех форматов файлов квоты
     *
     * @generated from protobuf rpc: GetInitialQuotaFormatDataList(auth.AuthorizedRequest) returns (auth.QuotaFormatList);
     */
    getInitialQuotaFormatDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, QuotaFormatList> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, QuotaFormatList>("unary", this._transport, method, opt, input);
    }
    /**
     * BookletType
     * Список всех форматов буклетов
     *
     * @generated from protobuf rpc: GetInitialBookletTypeDataList(auth.AuthorizedRequest) returns (auth.BookletTypeList);
     */
    getInitialBookletTypeDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, BookletTypeList> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, BookletTypeList>("unary", this._transport, method, opt, input);
    }
    /**
     * Genre
     * Список всех жанров
     *
     * @generated from protobuf rpc: GetInitialGenreDataList(auth.AuthorizedRequest) returns (auth.GenreList);
     */
    getInitialGenreDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, GenreList> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, GenreList>("unary", this._transport, method, opt, input);
    }
    /**
     * ZoneId
     * Список всех часовых поясов
     *
     * @generated from protobuf rpc: GetZoneIdDataList(auth.AuthorizedRequest) returns (auth.ZoneIdList);
     */
    getZoneIdDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, ZoneIdList> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, ZoneIdList>("unary", this._transport, method, opt, input);
    }
    /**
     * Currency
     * Список всех валют
     *
     * @generated from protobuf rpc: GetInitialCurrencyDataList(auth.AuthorizedRequest) returns (auth.CurrencyList);
     */
    getInitialCurrencyDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, CurrencyList> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, CurrencyList>("unary", this._transport, method, opt, input);
    }
    // Массив начальных данных

    /**
     * EOrganizer
     * Список всех компаний-организаторов, заполняется только для пользователя с ролью оператор
     *
     * @generated from protobuf rpc: GetInitialEOrganizerDataList(auth.AuthorizedRequest) returns (auth.EOrganizerList);
     */
    getInitialEOrganizerDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, EOrganizerList> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, EOrganizerList>("unary", this._transport, method, opt, input);
    }
    /**
     * Country
     * Список всех стран
     *
     * @generated from protobuf rpc: GetInitialCountryData(auth.AuthorizedRequest) returns (stream auth.Country);
     */
    getInitialCountryData(input: AuthorizedRequest, options?: RpcOptions): ServerStreamingCall<AuthorizedRequest, Country> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, Country>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteCountry(auth.DeleteCountryRequest) returns (auth.Country);
     */
    deleteCountry(input: DeleteCountryRequest, options?: RpcOptions): UnaryCall<DeleteCountryRequest, Country> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCountryRequest, Country>("unary", this._transport, method, opt, input);
    }
    /**
     * City
     * Список всех городов
     *
     * @generated from protobuf rpc: GetInitialCityData(auth.AuthorizedRequest) returns (stream auth.City);
     */
    getInitialCityData(input: AuthorizedRequest, options?: RpcOptions): ServerStreamingCall<AuthorizedRequest, City> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, City>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInitialCityByCountryData(auth.GetCityByCountryRequest) returns (stream auth.City);
     */
    getInitialCityByCountryData(input: GetCityByCountryRequest, options?: RpcOptions): ServerStreamingCall<GetCityByCountryRequest, City> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCityByCountryRequest, City>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInitialCityListByCountryData(auth.GetCityByCountryRequest) returns (auth.CityList);
     */
    getInitialCityListByCountryData(input: GetCityByCountryRequest, options?: RpcOptions): UnaryCall<GetCityByCountryRequest, CityList> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCityByCountryRequest, CityList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteCity(auth.DeleteCityRequest) returns (auth.City);
     */
    deleteCity(input: DeleteCityRequest, options?: RpcOptions): UnaryCall<DeleteCityRequest, City> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCityRequest, City>("unary", this._transport, method, opt, input);
    }
    /**
     * Venue
     * Список всех мест проведений
     *
     * @generated from protobuf rpc: GetInitialVenueByCityData(auth.GetVenueByCityRequest) returns (auth.SimpleVenueList);
     */
    getInitialVenueByCityData(input: GetVenueByCityRequest, options?: RpcOptions): UnaryCall<GetVenueByCityRequest, SimpleVenueList> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetVenueByCityRequest, SimpleVenueList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInitialVenueDataFiltered(auth.GetVenueFilteredRequest) returns (auth.SimpleVenueList);
     */
    getInitialVenueDataFiltered(input: GetVenueFilteredRequest, options?: RpcOptions): UnaryCall<GetVenueFilteredRequest, SimpleVenueList> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetVenueFilteredRequest, SimpleVenueList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInitialVenueByIdData(auth.GetVenueByIdRequest) returns (auth.Venue);
     */
    getInitialVenueByIdData(input: GetVenueByIdRequest, options?: RpcOptions): UnaryCall<GetVenueByIdRequest, Venue> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetVenueByIdRequest, Venue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddVenue(auth.AddVenueRequest) returns (auth.AddVenueResponse);
     */
    addVenue(input: AddVenueRequest, options?: RpcOptions): UnaryCall<AddVenueRequest, AddVenueResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddVenueRequest, AddVenueResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SaveVenue(auth.SaveVenueRequest) returns (auth.SaveVenueResponse);
     */
    saveVenue(input: SaveVenueRequest, options?: RpcOptions): UnaryCall<SaveVenueRequest, SaveVenueResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveVenueRequest, SaveVenueResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteVenue(auth.DeleteVenueRequest) returns (auth.Venue);
     */
    deleteVenue(input: DeleteVenueRequest, options?: RpcOptions): UnaryCall<DeleteVenueRequest, Venue> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteVenueRequest, Venue>("unary", this._transport, method, opt, input);
    }
    /**
     * SeatingPlan
     * Список доступных схем залов
     *
     * @generated from protobuf rpc: GetInitialSeatingPlanDataList(auth.GetSeatingPlanListRequest) returns (auth.SimpleSeatingPlanList);
     */
    getInitialSeatingPlanDataList(input: GetSeatingPlanListRequest, options?: RpcOptions): UnaryCall<GetSeatingPlanListRequest, SimpleSeatingPlanList> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSeatingPlanListRequest, SimpleSeatingPlanList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInitialSeatingPlanByIdData(auth.GetSeatingPlanByIdRequest) returns (auth.SeatingPlan);
     */
    getInitialSeatingPlanByIdData(input: GetSeatingPlanByIdRequest, options?: RpcOptions): UnaryCall<GetSeatingPlanByIdRequest, SeatingPlan> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSeatingPlanByIdRequest, SeatingPlan>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSeatingPlanByIdFullData(auth.GetSeatingPlanByIdRequest) returns (auth.GetSeatingPlanFullData);
     */
    getSeatingPlanByIdFullData(input: GetSeatingPlanByIdRequest, options?: RpcOptions): UnaryCall<GetSeatingPlanByIdRequest, GetSeatingPlanFullData> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSeatingPlanByIdRequest, GetSeatingPlanFullData>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteSeatingPlan(auth.DeleteSeatingPlanRequest) returns (auth.SeatingPlan);
     */
    deleteSeatingPlan(input: DeleteSeatingPlanRequest, options?: RpcOptions): UnaryCall<DeleteSeatingPlanRequest, SeatingPlan> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteSeatingPlanRequest, SeatingPlan>("unary", this._transport, method, opt, input);
    }
    /**
     * Gateway
     * Список доступных подключений к ВБС
     *
     * @generated from protobuf rpc: GetInitialSGatewayDataList(auth.AuthorizedRequest) returns (auth.GatewayList);
     */
    getInitialSGatewayDataList(input: AuthorizedRequest, options?: RpcOptions): UnaryCall<AuthorizedRequest, GatewayList> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizedRequest, GatewayList>("unary", this._transport, method, opt, input);
    }
    /**
     * Action
     * Список актуальных представлений
     *
     * @generated from protobuf rpc: GetInitialActionDataList(auth.GetActionFilteredRequest) returns (auth.SimpleActionList);
     */
    getInitialActionDataList(input: GetActionFilteredRequest, options?: RpcOptions): UnaryCall<GetActionFilteredRequest, SimpleActionList> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetActionFilteredRequest, SimpleActionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInitialActionIdData(auth.GetActionByIdRequest) returns (auth.Action);
     */
    getInitialActionIdData(input: GetActionByIdRequest, options?: RpcOptions): UnaryCall<GetActionByIdRequest, Action> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetActionByIdRequest, Action>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteAction(auth.DeleteActionRequest) returns (auth.Action);
     */
    deleteAction(input: DeleteActionRequest, options?: RpcOptions): UnaryCall<DeleteActionRequest, Action> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteActionRequest, Action>("unary", this._transport, method, opt, input);
    }
    /**
     * ActionEvent
     * Список всех неархивных сеансов
     *
     * @generated from protobuf rpc: GetInitialActionEventDataList(auth.GetActionEventFilteredRequest) returns (auth.ActionEventList);
     */
    getInitialActionEventDataList(input: GetActionEventFilteredRequest, options?: RpcOptions): UnaryCall<GetActionEventFilteredRequest, ActionEventList> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetActionEventFilteredRequest, ActionEventList>("unary", this._transport, method, opt, input);
    }
    /**
     * Добавление новых сеансов. Можно добавить несколько сеансов, однако есть ограничение, общее количество мест всех добавляемых сеансов не должно превышать 50 тысяч.
     *
     * @generated from protobuf rpc: AddActionEvent(auth.AddActionEventRequest) returns (auth.ActionEventList);
     */
    addActionEvent(input: AddActionEventRequest, options?: RpcOptions): UnaryCall<AddActionEventRequest, ActionEventList> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddActionEventRequest, ActionEventList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: deleteActionEvent(auth.DeleteActionEventRequest) returns (auth.ActionEvent);
     */
    deleteActionEvent(input: DeleteActionEventRequest, options?: RpcOptions): UnaryCall<DeleteActionEventRequest, ActionEvent> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteActionEventRequest, ActionEvent>("unary", this._transport, method, opt, input);
    }
    /**
     * Добавление нового представления для организатора.
     *
     * @generated from protobuf rpc: AddAction(auth.AddActionRequest) returns (auth.Action);
     */
    addAction(input: AddActionRequest, options?: RpcOptions): UnaryCall<AddActionRequest, Action> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddActionRequest, Action>("unary", this._transport, method, opt, input);
    }
    /**
     * Сохранение представления.
     *
     * @generated from protobuf rpc: SaveAction(auth.SaveActionRequest) returns (auth.Action);
     */
    saveAction(input: SaveActionRequest, options?: RpcOptions): UnaryCall<SaveActionRequest, Action> {
        const method = this.methods[37], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveActionRequest, Action>("unary", this._transport, method, opt, input);
    }
    /**
     * Получение доступных сеансов в подключении к ВБС. Полученные данные необходимы для создания нового сеанса, использующего данное подключение к ВБС.
     *
     * @generated from protobuf rpc: GetGatewayEventList(auth.GetGatewayEventListRequest) returns (auth.GatewayEventList);
     */
    getGatewayEventList(input: GetGatewayEventListRequest, options?: RpcOptions): UnaryCall<GetGatewayEventListRequest, GatewayEventList> {
        const method = this.methods[38], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGatewayEventListRequest, GatewayEventList>("unary", this._transport, method, opt, input);
    }
    /**
     * Сохранение сеанса.
     *
     * @generated from protobuf rpc: SaveActionEvent(auth.SaveActionEventRequest) returns (auth.ActionEvent);
     */
    saveActionEvent(input: SaveActionEventRequest, options?: RpcOptions): UnaryCall<SaveActionEventRequest, ActionEvent> {
        const method = this.methods[39], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveActionEventRequest, ActionEvent>("unary", this._transport, method, opt, input);
    }
    /**
     * Добавление новой страны
     *
     * @generated from protobuf rpc: AddCountry(auth.AddCountryRequest) returns (auth.Country);
     */
    addCountry(input: AddCountryRequest, options?: RpcOptions): UnaryCall<AddCountryRequest, Country> {
        const method = this.methods[40], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddCountryRequest, Country>("unary", this._transport, method, opt, input);
    }
    /**
     * Сохранение страны
     *
     * @generated from protobuf rpc: SaveCountry(auth.SaveCountryRequest) returns (auth.Country);
     */
    saveCountry(input: SaveCountryRequest, options?: RpcOptions): UnaryCall<SaveCountryRequest, Country> {
        const method = this.methods[41], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveCountryRequest, Country>("unary", this._transport, method, opt, input);
    }
    /**
     * Добавление нового города
     *
     * @generated from protobuf rpc: AddCity(auth.AddCityRequest) returns (auth.City);
     */
    addCity(input: AddCityRequest, options?: RpcOptions): UnaryCall<AddCityRequest, City> {
        const method = this.methods[42], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddCityRequest, City>("unary", this._transport, method, opt, input);
    }
    /**
     * Сохранение города
     *
     * @generated from protobuf rpc: SaveCity(auth.SaveCityRequest) returns (auth.City);
     */
    saveCity(input: SaveCityRequest, options?: RpcOptions): UnaryCall<SaveCityRequest, City> {
        const method = this.methods[43], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveCityRequest, City>("unary", this._transport, method, opt, input);
    }
    /**
     * Добавление простого плана рассадки
     *
     * @generated from protobuf rpc: AddPlan1(auth.AddPlan1Request) returns (auth.SeatingPlan);
     */
    addPlan1(input: AddPlan1Request, options?: RpcOptions): UnaryCall<AddPlan1Request, SeatingPlan> {
        const method = this.methods[44], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddPlan1Request, SeatingPlan>("unary", this._transport, method, opt, input);
    }
    /**
     * Добавление плана рассадки со схемой
     *
     * @generated from protobuf rpc: CheckPlan(auth.CheckPlanRequest) returns (auth.CheckPlanResponse);
     */
    checkPlan(input: CheckPlanRequest, options?: RpcOptions): UnaryCall<CheckPlanRequest, CheckPlanResponse> {
        const method = this.methods[45], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckPlanRequest, CheckPlanResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddPlan2(auth.AddPlan2Request) returns (auth.SeatingPlan);
     */
    addPlan2(input: AddPlan2Request, options?: RpcOptions): UnaryCall<AddPlan2Request, SeatingPlan> {
        const method = this.methods[46], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddPlan2Request, SeatingPlan>("unary", this._transport, method, opt, input);
    }
    /**
     * Создание комбинированной схемы
     *
     * @generated from protobuf rpc: AddPlan3(auth.AddPlan3Request) returns (auth.SeatingPlan);
     */
    addPlan3(input: AddPlan3Request, options?: RpcOptions): UnaryCall<AddPlan3Request, SeatingPlan> {
        const method = this.methods[47], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddPlan3Request, SeatingPlan>("unary", this._transport, method, opt, input);
    }
    /**
     * Сохранени плана рассадки
     *
     * @generated from protobuf rpc: SavePlan(auth.SavePlanRequest) returns (auth.SeatingPlan);
     */
    savePlan(input: SavePlanRequest, options?: RpcOptions): UnaryCall<SavePlanRequest, SeatingPlan> {
        const method = this.methods[48], opt = this._transport.mergeOptions(options);
        return stackIntercept<SavePlanRequest, SeatingPlan>("unary", this._transport, method, opt, input);
    }
    /**
     * Работа с ВБС
     *
     * @generated from protobuf rpc: SyncEts(auth.ActionEventSyncRequest) returns (auth.ActionEventSyncResponse);
     */
    syncEts(input: ActionEventSyncRequest, options?: RpcOptions): UnaryCall<ActionEventSyncRequest, ActionEventSyncResponse> {
        const method = this.methods[49], opt = this._transport.mergeOptions(options);
        return stackIntercept<ActionEventSyncRequest, ActionEventSyncResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSyncReport(auth.GetSyncReportRequest) returns (auth.GetSyncReportResponse);
     */
    getSyncReport(input: GetSyncReportRequest, options?: RpcOptions): UnaryCall<GetSyncReportRequest, GetSyncReportResponse> {
        const method = this.methods[50], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSyncReportRequest, GetSyncReportResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGatewayEventInfo(auth.GetGatewayEventInfoRequest) returns (auth.GetGatewayEventInfoResponse);
     */
    getGatewayEventInfo(input: GetGatewayEventInfoRequest, options?: RpcOptions): UnaryCall<GetGatewayEventInfoRequest, GetGatewayEventInfoResponse> {
        const method = this.methods[51], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGatewayEventInfoRequest, GetGatewayEventInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetActionBooklet(auth.SetActionBookletRequest) returns (auth.SetActionBookletResponse);
     */
    setActionBooklet(input: SetActionBookletRequest, options?: RpcOptions): UnaryCall<SetActionBookletRequest, SetActionBookletResponse> {
        const method = this.methods[52], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetActionBookletRequest, SetActionBookletResponse>("unary", this._transport, method, opt, input);
    }
}
